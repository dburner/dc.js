{"version":3,"file":"dc.min.js","sources":["../src/core/bad-argument-exception.js","../src/core/constants.js","../src/core/logger.js","../src/core/config.js","../src/core/chart-registry.js","../src/core/core.js","../src/core/events.js","../src/core/filters.js","../src/core/invalid-state-exception.js","../src/core/utils.js","../src/core/printers.js","../src/core/units.js","../src/base/base-mixin.js","../src/base/color-mixin.js","../src/base/bubble-mixin.js","../src/base/cap-mixin.js","../src/base/margin-mixin.js","../src/base/coordinate-grid-mixin.js","../src/base/d3.box.js","../src/base/stack-mixin.js","../src/charts/bar-chart.js","../src/charts/box-plot.js","../src/charts/bubble-chart.js","../src/charts/bubble-overlay.js","../src/charts/cbox-menu.js","../src/charts/composite-chart.js","../src/charts/data-count.js","../src/charts/data-grid.js","../src/charts/data-table.js","../src/charts/geo-choropleth-chart.js","../src/charts/heatmap.js","../src/charts/html-legend.js","../src/charts/legend.js","../src/charts/line-chart.js","../src/charts/number-display.js","../src/charts/pie-chart.js","../src/charts/row-chart.js","../src/charts/scatter-plot.js","../src/charts/select-menu.js","../src/charts/series-chart.js","../src/charts/sunburst-chart.js","../src/charts/text-filter-widget.js","../src/compat/d3v5.js","../src/compat/d3v6.js"],"sourcesContent":["\r\nexport class BadArgumentException extends Error { }\r\n","export const constants = {\r\n    CHART_CLASS: 'dc-chart',\r\n    DEBUG_GROUP_CLASS: 'debug',\r\n    STACK_CLASS: 'stack',\r\n    DESELECTED_CLASS: 'deselected',\r\n    SELECTED_CLASS: 'selected',\r\n    NODE_INDEX_NAME: '__index__',\r\n    GROUP_INDEX_NAME: '__group_index__',\r\n    DEFAULT_CHART_GROUP: '__default_chart_group__',\r\n    EVENT_DELAY: 40,\r\n    NEGLIGIBLE_NUMBER: 1e-10\r\n};\r\n","/**\r\n * Provides basis logging and deprecation utilities\r\n */\r\nexport class Logger {\r\n\r\n    constructor () {\r\n        /**\r\n         * Enable debug level logging. Set to `false` by default.\r\n         * @name enableDebugLog\r\n         * @memberof Logger\r\n         * @instance\r\n         */\r\n        this.enableDebugLog = false;\r\n\r\n        this._alreadyWarned = {};\r\n    }\r\n\r\n    /**\r\n     * Put a warning message to console\r\n     * @example\r\n     * logger.warn('Invalid use of .tension on CurveLinear');\r\n     * @param {String} [msg]\r\n     * @returns {Logger}\r\n     */\r\n    warn (msg) {\r\n        if (console) {\r\n            if (console.warn) {\r\n                console.warn(msg);\r\n            } else if (console.log) {\r\n                console.log(msg);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Put a warning message to console. It will warn only on unique messages.\r\n     * @example\r\n     * logger.warnOnce('Invalid use of .tension on CurveLinear');\r\n     * @param {String} [msg]\r\n     * @returns {Logger}\r\n     */\r\n    warnOnce (msg) {\r\n        if (!this._alreadyWarned[msg]) {\r\n            this._alreadyWarned[msg] = true;\r\n\r\n            logger.warn(msg);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Put a debug message to console. It is controlled by `logger.enableDebugLog`\r\n     * @example\r\n     * logger.debug('Total number of slices: ' + numSlices);\r\n     * @param {String} [msg]\r\n     * @returns {Logger}\r\n     */\r\n    debug (msg) {\r\n        if (this.enableDebugLog && console) {\r\n            if (console.debug) {\r\n                console.debug(msg);\r\n            } else if (console.log) {\r\n                console.log(msg);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const logger = new Logger();\r\n","import {timeFormat} from 'd3-time-format';\r\n\r\nimport {logger} from './logger';\r\n\r\n/**\r\n * General configuration\r\n */\r\nexport class Config {\r\n    constructor () {\r\n        this._defaultColors = Config._schemeCategory20c;\r\n\r\n        /**\r\n         * The default date format for dc.js\r\n         * @type {Function}\r\n         * @default d3.timeFormat('%m/%d/%Y')\r\n         */\r\n        this.dateFormat = timeFormat('%m/%d/%Y');\r\n\r\n        this._renderlet = null;\r\n\r\n        /**\r\n         * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\r\n         * immediately.\r\n         * @type {Boolean}\r\n         * @default false\r\n         */\r\n        this.disableTransitions = false;\r\n    }\r\n\r\n    /**\r\n     * Set the default color scheme for ordinal charts. Changing it will impact all ordinal charts.\r\n     *\r\n     * By default it is set to a copy of\r\n     * `d3.schemeCategory20c` for backward compatibility. This color scheme has been\r\n     * [removed from D3v5](https://github.com/d3/d3/blob/master/CHANGES.md#changes-in-d3-50).\r\n     * In DC 3.1 release it will change to a more appropriate default.\r\n     *\r\n     * @example\r\n     * config.defaultColors(d3.schemeSet1)\r\n     * @param {Array} [colors]\r\n     * @returns {Array|config}\r\n     */\r\n    defaultColors (colors) {\r\n        if (!arguments.length) {\r\n            // Issue warning if it uses _schemeCategory20c\r\n            if (this._defaultColors === Config._schemeCategory20c) {\r\n                logger.warnOnce('You are using d3.schemeCategory20c, which has been removed in D3v5. ' +\r\n                    'See the explanation at https://github.com/d3/d3/blob/master/CHANGES.md#changes-in-d3-50. ' +\r\n                    'DC is using it for backward compatibility, however it will be changed in DCv3.1. ' +\r\n                    'You can change it by calling dc.config.defaultColors(newScheme). ' +\r\n                    'See https://github.com/d3/d3-scale-chromatic for some alternatives.');\r\n            }\r\n            return this._defaultColors;\r\n        }\r\n        this._defaultColors = colors;\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\n// D3v5 has removed schemeCategory20c, copied here for backward compatibility\r\nConfig._schemeCategory20c = [\r\n    '#3182bd', '#6baed6', '#9ecae1', '#c6dbef', '#e6550d',\r\n    '#fd8d3c', '#fdae6b', '#fdd0a2', '#31a354', '#74c476',\r\n    '#a1d99b', '#c7e9c0', '#756bb1', '#9e9ac8', '#bcbddc',\r\n    '#dadaeb', '#636363', '#969696', '#bdbdbd', '#d9d9d9'];\r\n\r\n/**\r\n * General configuration object; see {@link Config} for members.\r\n */\r\nexport const config = new Config();\r\n\r\n/**\r\n * d3.js compatiblity layer\r\n */\r\nexport const d3compat = {\r\n    eventHandler: handler => function eventHandler (a, b) {\r\n        console.warn('No d3.js compatbility event handler registered, defaulting to v6 behavior.');\r\n        handler.call(this, b, a);\r\n    },\r\n    nester: ({key, sortKeys, sortValues, entries}) => {\r\n        throw new Error('No d3.js compatbility nester registered, load v5 or v6 compability layer.');\r\n    },\r\n    pointer: () => { throw new Error('No d3.js compatbility pointer registered, load v5 or v6 compability layer.'); }\r\n};\r\n","import {constants} from './constants';\r\nimport {config} from './config';\r\n\r\n/**\r\n * The ChartRegistry maintains sets of all instantiated dc.js charts under named groups\r\n * and the default group. There is a single global ChartRegistry object named `chartRegistry`\r\n *\r\n * A chart group often corresponds to a crossfilter instance. It specifies\r\n * the set of charts which should be updated when a filter changes on one of the charts or when the\r\n * global functions {@link filterAll filterAll}, {@link refocusAll refocusAll},\r\n * {@link renderAll renderAll}, {@link redrawAll redrawAll}, or chart functions\r\n * {@link baseMixin#renderGroup baseMixin.renderGroup},\r\n * {@link baseMixin#redrawGroup baseMixin.redrawGroup} are called.\r\n */\r\nclass ChartRegistry {\r\n    constructor () {\r\n        // chartGroup:string => charts:array\r\n        this._chartMap = {};\r\n    }\r\n\r\n    _initializeChartGroup (group) {\r\n        if (!group) {\r\n            group = constants.DEFAULT_CHART_GROUP;\r\n        }\r\n\r\n        if (!(this._chartMap)[group]) {\r\n            (this._chartMap)[group] = [];\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    /**\r\n     * Determine if a given chart instance resides in any group in the registry.\r\n     * @param {Object} chart dc.js chart instance\r\n     * @returns {Boolean}\r\n     */\r\n    has (chart) {\r\n        for (const e in this._chartMap) {\r\n            if ((this._chartMap)[e].indexOf(chart) >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Add given chart instance to the given group, creating the group if necessary.\r\n     * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\r\n     * @param {Object} chart dc.js chart instance\r\n     * @param {String} [group] Group name\r\n     * @return {undefined}\r\n     */\r\n    register (chart, group) {\r\n        const _chartMap = this._chartMap;\r\n        group = this._initializeChartGroup(group);\r\n        _chartMap[group].push(chart);\r\n    }\r\n\r\n    /**\r\n     * Remove given chart instance from the given group, creating the group if necessary.\r\n     * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\r\n     * @param {Object} chart dc.js chart instance\r\n     * @param {String} [group] Group name\r\n     * @return {undefined}\r\n     */\r\n    deregister (chart, group) {\r\n        group = this._initializeChartGroup(group);\r\n        for (let i = 0; i < (this._chartMap)[group].length; i++) {\r\n            if ((this._chartMap)[group][i].anchorName() === chart.anchorName()) {\r\n                (this._chartMap)[group].splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear given group if one is provided, otherwise clears all groups.\r\n     * @param {String} group Group name\r\n     * @return {undefined}\r\n     */\r\n    clear (group) {\r\n        if (group) {\r\n            delete (this._chartMap)[group];\r\n        } else {\r\n            this._chartMap = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an array of each chart instance in the given group.\r\n     * If no group is provided, the charts in the default group are returned.\r\n     * @param {String} [group] Group name\r\n     * @returns {Array<Object>}\r\n     */\r\n    list (group) {\r\n        group = this._initializeChartGroup(group);\r\n        return (this._chartMap)[group];\r\n    }\r\n}\r\n\r\n/**\r\n * The chartRegistry object maintains sets of all instantiated dc.js charts under named groups\r\n * and the default group. See {@link ChartRegistry ChartRegistry} for its methods.\r\n */\r\nexport const chartRegistry = new ChartRegistry();\r\n\r\n/**\r\n * Add given chart instance to the given group, creating the group if necessary.\r\n * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\r\n * @function registerChart\r\n * @param {Object} chart dc.js chart instance\r\n * @param {String} [group] Group name\r\n * @return {undefined}\r\n */\r\nexport const registerChart = function (chart, group) {\r\n    chartRegistry.register(chart, group);\r\n};\r\n\r\n/**\r\n * Remove given chart instance from the given group, creating the group if necessary.\r\n * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\r\n * @function deregisterChart\r\n * @param {Object} chart dc.js chart instance\r\n * @param {String} [group] Group name\r\n * @return {undefined}\r\n */\r\nexport const deregisterChart = function (chart, group) {\r\n    chartRegistry.deregister(chart, group);\r\n};\r\n\r\n/**\r\n * Determine if a given chart instance resides in any group in the registry.\r\n * @function hasChart\r\n * @param {Object} chart dc.js chart instance\r\n * @returns {Boolean}\r\n */\r\nexport const hasChart = function (chart) {\r\n    return chartRegistry.has(chart);\r\n};\r\n\r\n/**\r\n * Clear given group if one is provided, otherwise clears all groups.\r\n * @function deregisterAllCharts\r\n * @param {String} group Group name\r\n * @return {undefined}\r\n */\r\nexport const deregisterAllCharts = function (group) {\r\n    chartRegistry.clear(group);\r\n};\r\n\r\n/**\r\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\r\n * only charts that belong to the default chart group will be reset.\r\n * @function filterAll\r\n * @param {String} [group]\r\n * @return {undefined}\r\n */\r\nexport const filterAll = function (group) {\r\n    const charts = chartRegistry.list(group);\r\n    for (let i = 0; i < charts.length; ++i) {\r\n        charts[i].filterAll();\r\n    }\r\n};\r\n\r\n/**\r\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\r\n * not given then only charts that belong to the default chart group will be reset.\r\n * @function refocusAll\r\n * @param {String} [group]\r\n * @return {undefined}\r\n */\r\nexport const refocusAll = function (group) {\r\n    const charts = chartRegistry.list(group);\r\n    for (let i = 0; i < charts.length; ++i) {\r\n        if (charts[i].focus) {\r\n            charts[i].focus();\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\r\n * charts that belong to the default chart group will be re-rendered.\r\n * @function renderAll\r\n * @param {String} [group]\r\n * @return {undefined}\r\n */\r\nexport const renderAll = function (group) {\r\n    const charts = chartRegistry.list(group);\r\n    for (let i = 0; i < charts.length; ++i) {\r\n        charts[i].render();\r\n    }\r\n\r\n    if (config._renderlet !== null) {\r\n        config._renderlet(group);\r\n    }\r\n};\r\n\r\n/**\r\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\r\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\r\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\r\n * from scratch.\r\n * @function redrawAll\r\n * @param {String} [group]\r\n * @return {undefined}\r\n */\r\nexport const redrawAll = function (group) {\r\n    const charts = chartRegistry.list(group);\r\n    for (let i = 0; i < charts.length; ++i) {\r\n        charts[i].redraw();\r\n    }\r\n\r\n    if (config._renderlet !== null) {\r\n        config._renderlet(group);\r\n    }\r\n};\r\n","import {config} from './config';\r\n\r\n/**\r\n * Start a transition on a selection if transitions are globally enabled\r\n * ({@link disableTransitions} is false) and the duration is greater than zero; otherwise return\r\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\r\n * allows a common code path for both cases.\r\n * @function transition\r\n * @param {d3.selection} selection - the selection to be transitioned\r\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\r\n * function returning the duration, or 0 for no transition\r\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\r\n * returning the delay, or 0 for no delay\r\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\r\n * elements are needed)\r\n * @returns {d3.transition|d3.selection}\r\n */\r\nexport const transition = function (selection, duration, delay, name) {\r\n    if (config.disableTransitions || duration <= 0) {\r\n        return selection;\r\n    }\r\n\r\n    let s = selection.transition(name);\r\n\r\n    if (duration >= 0 || duration !== undefined) {\r\n        s = s.duration(duration);\r\n    }\r\n    if (delay >= 0 || delay !== undefined) {\r\n        s = s.delay(delay);\r\n    }\r\n\r\n    return s;\r\n};\r\n\r\n/* somewhat silly, but to avoid duplicating logic */\r\nexport const optionalTransition = function (enable, duration, delay, name) {\r\n    if (enable) {\r\n        return function (selection) {\r\n            return transition(selection, duration, delay, name);\r\n        };\r\n    } else {\r\n        return function (selection) {\r\n            return selection;\r\n        };\r\n    }\r\n};\r\n\r\n// See http://stackoverflow.com/a/20773846\r\nexport const afterTransition = function (_transition, callback) {\r\n    if (_transition.empty() || !_transition.duration) {\r\n        callback.call(_transition);\r\n    } else {\r\n        let n = 0;\r\n        _transition\r\n            .each(() => { ++n; })\r\n            .on('end', () => {\r\n                if (!--n) {\r\n                    callback.call(_transition);\r\n                }\r\n            });\r\n    }\r\n};\r\n\r\nexport const renderlet = function (_) {\r\n    if (!arguments.length) {\r\n        return config._renderlet;\r\n    }\r\n    config._renderlet = _;\r\n    return null;\r\n};\r\n\r\nexport const instanceOfChart = function (o) {\r\n    return o instanceof Object && o.__dcFlag__ && true;\r\n};\r\n","export const events = {\r\n    current: null\r\n};\r\n\r\n/**\r\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\r\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\r\n * and invoke more renders than can be executed in time. Using this function to wrap your event\r\n * function allows the library to smooth out the rendering by throttling events and only responding to\r\n * the most recent event.\r\n * @name events.trigger\r\n * @example\r\n * chart.on('renderlet', function(chart) {\r\n *     // smooth the rendering through event throttling\r\n *     events.trigger(function(){\r\n *         // focus some other chart to the range selected by user on this chart\r\n *         someOtherChart.focus(chart.filter());\r\n *     });\r\n * })\r\n * @param {Function} closure\r\n * @param {Number} [delay]\r\n * @return {undefined}\r\n */\r\nevents.trigger = function (closure, delay) {\r\n    if (!delay) {\r\n        closure();\r\n        return;\r\n    }\r\n\r\n    events.current = closure;\r\n\r\n    setTimeout(() => {\r\n        if (closure === events.current) {\r\n            closure();\r\n        }\r\n    }, delay);\r\n};\r\n","/**\r\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\r\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\r\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\r\n * function to the dimension; the function combines multiple filters and if any of them accept a\r\n * record, it is filtered in.\r\n *\r\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\r\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\r\n *\r\n * Each of the dc.js filters is an object with the following properties:\r\n * * `isFiltered` - a function that returns true if a value is within the filter\r\n * * `filterType` - a string identifying the filter, here the name of the constructor\r\n *\r\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\r\n * can be used as long as they have the properties above.\r\n * @namespace filters\r\n * @type {{}}\r\n */\r\nexport const filters = {};\r\n\r\n/**\r\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\r\n * axis brushing for the {@link CoordinateGridMixin coordinate grid charts}.\r\n *\r\n * Its `filterType` is 'RangedFilter'\r\n * @name RangedFilter\r\n * @memberof filters\r\n * @param {Number} low\r\n * @param {Number} high\r\n * @returns {Array<Number>}\r\n * @constructor\r\n */\r\nfilters.RangedFilter = function (low, high) {\r\n    const range = new Array(low, high);\r\n    range.isFiltered = function (value) {\r\n        return value >= this[0] && value < this[1];\r\n    };\r\n    range.filterType = 'RangedFilter';\r\n\r\n    return range;\r\n};\r\n\r\n/**\r\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\r\n * {@link HeatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\r\n * filtered by filtering all the cells in the row or column.)\r\n *\r\n * Its `filterType` is 'TwoDimensionalFilter'\r\n * @name TwoDimensionalFilter\r\n * @memberof filters\r\n * @param {Array<Number>} filter\r\n * @returns {Array<Number>}\r\n * @constructor\r\n */\r\nfilters.TwoDimensionalFilter = function (filter) {\r\n    if (filter === null) { return null; }\r\n\r\n    const f = filter;\r\n    f.isFiltered = function (value) {\r\n        return value.length && value.length === f.length &&\r\n               value[0] === f[0] && value[1] === f[1];\r\n    };\r\n    f.filterType = 'TwoDimensionalFilter';\r\n\r\n    return f;\r\n};\r\n\r\n/**\r\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\r\n * region. It is used by the {@link ScatterPlot scatter plot} to implement rectangular brushing.\r\n *\r\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\r\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\r\n * rectangular range including the lower values but excluding the higher values.\r\n *\r\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\r\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\r\n * x2`.\r\n *\r\n * Its `filterType` is 'RangedTwoDimensionalFilter'\r\n * @name RangedTwoDimensionalFilter\r\n * @memberof filters\r\n * @param {Array<Array<Number>>} filter\r\n * @returns {Array<Array<Number>>}\r\n * @constructor\r\n */\r\nfilters.RangedTwoDimensionalFilter = function (filter) {\r\n    if (filter === null) { return null; }\r\n\r\n    const f = filter;\r\n    let fromBottomLeft;\r\n\r\n    if (f[0] instanceof Array) {\r\n        fromBottomLeft = [\r\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\r\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\r\n        ];\r\n    } else {\r\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\r\n    }\r\n\r\n    f.isFiltered = function (value) {\r\n        let x, y;\r\n\r\n        if (value instanceof Array) {\r\n            x = value[0];\r\n            y = value[1];\r\n        } else {\r\n            x = value;\r\n            y = fromBottomLeft[0][1];\r\n        }\r\n\r\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\r\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\r\n    };\r\n    f.filterType = 'RangedTwoDimensionalFilter';\r\n\r\n    return f;\r\n};\r\n\r\n// ******** Sunburst Chart ********\r\n\r\n/**\r\n * HierarchyFilter is a filter which accepts a key path as an array. It matches any node at, or\r\n * child of, the given path. It is used by the {@link SunburstChart sunburst chart} to include particular cells and all\r\n * their children as they are clicked.\r\n *\r\n * @name HierarchyFilter\r\n * @memberof filters\r\n * @param {String} path\r\n * @returns {Array<String>}\r\n * @constructor\r\n */\r\nfilters.HierarchyFilter = function (path) {\r\n    if (path === null) {\r\n        return null;\r\n    }\r\n\r\n    const filter = path.slice(0);\r\n    filter.isFiltered = function (value) {\r\n        if (!(filter.length && value && value.length && value.length >= filter.length)) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < filter.length; i++) {\r\n            if (value[i] !== filter[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n    return filter;\r\n};\r\n","\r\nexport class InvalidStateException extends Error { }\r\n","import {timeDay, timeHour, timeMinute, timeMonth, timeSecond, timeWeek, timeYear} from 'd3-time';\r\nimport {format} from 'd3-format';\r\n\r\nimport {constants} from './constants';\r\nimport {config} from './config';\r\n\r\n/**\r\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\r\n * can be passed as the second argument to also alter the data being returned.\r\n *\r\n * This can be a useful shorthand method to create accessor functions.\r\n * @example\r\n * var xPluck = pluck('x');\r\n * var objA = {x: 1};\r\n * xPluck(objA) // 1\r\n * @example\r\n * var xPosition = pluck('x', function (x, i) {\r\n *     // `this` is the original datum,\r\n *     // `x` is the x property of the datum,\r\n *     // `i` is the position in the array\r\n *     return this.radius + x;\r\n * });\r\n * selectAll('.circle').data(...).x(xPosition);\r\n * @function pluck\r\n * @param {String} n\r\n * @param {Function} [f]\r\n * @returns {Function}\r\n */\r\nexport const pluck = function (n, f) {\r\n    if (!f) {\r\n        return function (d) { return d[n]; };\r\n    }\r\n    return function (d, i) { return f.call(d, d[n], i); };\r\n};\r\n\r\n/**\r\n * @namespace utils\r\n * @type {{}}\r\n */\r\nexport const utils = {};\r\n\r\n/**\r\n * Print a single value filter.\r\n * @method printSingleValue\r\n * @memberof utils\r\n * @param {any} filter\r\n * @returns {String}\r\n */\r\nutils.printSingleValue = function (filter) {\r\n    let s = `${filter}`;\r\n\r\n    if (filter instanceof Date) {\r\n        s = config.dateFormat(filter);\r\n    } else if (typeof (filter) === 'string') {\r\n        s = filter;\r\n    } else if (utils.isFloat(filter)) {\r\n        s = utils.printSingleValue.fformat(filter);\r\n    } else if (utils.isInteger(filter)) {\r\n        s = Math.round(filter);\r\n    }\r\n\r\n    return s;\r\n};\r\nutils.printSingleValue.fformat = format('.2f');\r\n\r\n// convert 'day' to d3.timeDay and similar\r\nutils._toTimeFunc = function (t) {\r\n    const mappings = {\r\n        'second': timeSecond,\r\n        'minute': timeMinute,\r\n        'hour': timeHour,\r\n        'day': timeDay,\r\n        'week': timeWeek,\r\n        'month': timeMonth,\r\n        'year': timeYear\r\n    };\r\n    return mappings[t];\r\n};\r\n\r\n/**\r\n * Arbitrary add one value to another.\r\n *\r\n * If the value l is of type Date, adds r units to it. t becomes the unit.\r\n * For example utils.add(dt, 3, 'week') will add 3 (r = 3) weeks (t= 'week') to dt.\r\n *\r\n * If l is of type numeric, t is ignored. In this case if r is of type string,\r\n * it is assumed to be percentage (whether or not it includes %). For example\r\n * utils.add(30, 10) will give 40 and utils.add(30, '10') will give 33.\r\n *\r\n * They also generate strange results if l is a string.\r\n * @method add\r\n * @memberof utils\r\n * @param {Date|Number} l the value to modify\r\n * @param {String|Number} r the amount by which to modify the value\r\n * @param {Function|String} [t=d3.timeDay] if `l` is a `Date`, then this should be a\r\n * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\r\n * For backward compatibility with dc.js 2.0, it can also be the name of an interval, i.e.\r\n * 'millis', 'second', 'minute', 'hour', 'day', 'week', 'month', or 'year'\r\n * @returns {Date|Number}\r\n */\r\nutils.add = function (l, r, t) {\r\n    if (typeof r === 'string') {\r\n        r = r.replace('%', '');\r\n    }\r\n\r\n    if (l instanceof Date) {\r\n        if (typeof r === 'string') {\r\n            r = +r;\r\n        }\r\n        if (t === 'millis') {\r\n            return new Date(l.getTime() + r);\r\n        }\r\n        t = t || timeDay;\r\n        if (typeof t !== 'function') {\r\n            t = utils._toTimeFunc(t);\r\n        }\r\n        return t.offset(l, r);\r\n    } else if (typeof r === 'string') {\r\n        const percentage = (+r / 100);\r\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\r\n    } else {\r\n        return l + r;\r\n    }\r\n};\r\n\r\n/**\r\n * Arbitrary subtract one value from another.\r\n *\r\n * If the value l is of type Date, subtracts r units from it. t becomes the unit.\r\n * For example utils.subtract(dt, 3, 'week') will subtract 3 (r = 3) weeks (t= 'week') from dt.\r\n *\r\n * If l is of type numeric, t is ignored. In this case if r is of type string,\r\n * it is assumed to be percentage (whether or not it includes %). For example\r\n * utils.subtract(30, 10) will give 20 and utils.subtract(30, '10') will give 27.\r\n *\r\n * They also generate strange results if l is a string.\r\n * @method subtract\r\n * @memberof utils\r\n * @param {Date|Number} l the value to modify\r\n * @param {String|Number} r the amount by which to modify the value\r\n * @param {Function|String} [t=d3.timeDay] if `l` is a `Date`, then this should be a\r\n * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\r\n * For backward compatibility with dc.js 2.0, it can also be the name of an interval, i.e.\r\n * 'millis', 'second', 'minute', 'hour', 'day', 'week', 'month', or 'year'\r\n * @returns {Date|Number}\r\n */\r\nutils.subtract = function (l, r, t) {\r\n    if (typeof r === 'string') {\r\n        r = r.replace('%', '');\r\n    }\r\n\r\n    if (l instanceof Date) {\r\n        if (typeof r === 'string') {\r\n            r = +r;\r\n        }\r\n        if (t === 'millis') {\r\n            return new Date(l.getTime() - r);\r\n        }\r\n        t = t || timeDay;\r\n        if (typeof t !== 'function') {\r\n            t = utils._toTimeFunc(t);\r\n        }\r\n        return t.offset(l, -r);\r\n    } else if (typeof r === 'string') {\r\n        const percentage = (+r / 100);\r\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\r\n    } else {\r\n        return l - r;\r\n    }\r\n};\r\n\r\n/**\r\n * Is the value a number?\r\n * @method isNumber\r\n * @memberof utils\r\n * @param {any} n\r\n * @returns {Boolean}\r\n */\r\nutils.isNumber = function (n) {\r\n    return n === +n;\r\n};\r\n\r\n/**\r\n * Is the value a float?\r\n * @method isFloat\r\n * @memberof utils\r\n * @param {any} n\r\n * @returns {Boolean}\r\n */\r\nutils.isFloat = function (n) {\r\n    return n === +n && n !== (n | 0);\r\n};\r\n\r\n/**\r\n * Is the value an integer?\r\n * @method isInteger\r\n * @memberof utils\r\n * @param {any} n\r\n * @returns {Boolean}\r\n */\r\nutils.isInteger = function (n) {\r\n    return n === +n && n === (n | 0);\r\n};\r\n\r\n/**\r\n * Is the value very close to zero?\r\n * @method isNegligible\r\n * @memberof utils\r\n * @param {any} n\r\n * @returns {Boolean}\r\n */\r\nutils.isNegligible = function (n) {\r\n    return !utils.isNumber(n) || (n < constants.NEGLIGIBLE_NUMBER && n > -constants.NEGLIGIBLE_NUMBER);\r\n};\r\n\r\n/**\r\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\r\n * @method clamp\r\n * @memberof utils\r\n * @param {any} val\r\n * @param {any} min\r\n * @param {any} max\r\n * @returns {any}\r\n */\r\nutils.clamp = function (val, min, max) {\r\n    return val < min ? min : (val > max ? max : val);\r\n};\r\n\r\n/**\r\n * Given `x`, return a function that always returns `x`.\r\n *\r\n * {@link https://github.com/d3/d3/blob/master/CHANGES.md#internals `d3.functor` was removed in d3 version 4}.\r\n * This function helps to implement the replacement,\r\n * `typeof x === \"function\" ? x : utils.constant(x)`\r\n * @method constant\r\n * @memberof utils\r\n * @param {any} x\r\n * @returns {Function}\r\n */\r\nutils.constant = function (x) {\r\n    return function () {\r\n        return x;\r\n    };\r\n};\r\n\r\n/**\r\n * Using a simple static counter, provide a unique integer id.\r\n * @method uniqueId\r\n * @memberof utils\r\n * @returns {Number}\r\n */\r\nlet _idCounter = 0;\r\nutils.uniqueId = function () {\r\n    return ++_idCounter;\r\n};\r\n\r\n/**\r\n * Convert a name to an ID.\r\n * @method nameToId\r\n * @memberof utils\r\n * @param {String} name\r\n * @returns {String}\r\n */\r\nutils.nameToId = function (name) {\r\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\r\n};\r\n\r\n/**\r\n * Append or select an item on a parent element.\r\n * @method appendOrSelect\r\n * @memberof utils\r\n * @param {d3.selection} parent\r\n * @param {String} selector\r\n * @param {String} tag\r\n * @returns {d3.selection}\r\n */\r\nutils.appendOrSelect = function (parent, selector, tag) {\r\n    tag = tag || selector;\r\n    let element = parent.select(selector);\r\n    if (element.empty()) {\r\n        element = parent.append(tag);\r\n    }\r\n    return element;\r\n};\r\n\r\n/**\r\n * Return the number if the value is a number; else 0.\r\n * @method safeNumber\r\n * @memberof utils\r\n * @param {Number|any} n\r\n * @returns {Number}\r\n */\r\nutils.safeNumber = function (n) { return utils.isNumber(+n) ? +n : 0;};\r\n\r\n/**\r\n * Return true if both arrays are equal, if both array are null these are considered equal\r\n * @method arraysEqual\r\n * @memberof utils\r\n * @param {Array|null} a1\r\n * @param {Array|null} a2\r\n * @returns {Boolean}\r\n */\r\nutils.arraysEqual = function (a1, a2) {\r\n    if (!a1 && !a2) {\r\n        return true;\r\n    }\r\n\r\n    if (!a1 || !a2) {\r\n        return false;\r\n    }\r\n\r\n    return a1.length === a2.length &&\r\n        // If elements are not integers/strings, we hope that it will match because of toString\r\n        // Test cases cover dates as well.\r\n        a1.every((elem, i) => elem.valueOf() === a2[i].valueOf());\r\n};\r\n\r\n// ******** Sunburst Chart ********\r\nutils.allChildren = function (node) {\r\n    let paths = [];\r\n    paths.push(node.path);\r\n    console.log('currentNode', node);\r\n    if (node.children) {\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            paths = paths.concat(utils.allChildren(node.children[i]));\r\n        }\r\n    }\r\n    return paths;\r\n};\r\n\r\n// builds a d3 Hierarchy from a collection\r\n// TODO: turn this monster method something better.\r\nutils.toHierarchy = function (list, accessor) {\r\n    const root = {'key': 'root', 'children': []};\r\n    for (let i = 0; i < list.length; i++) {\r\n        const data = list[i];\r\n        const parts = data.key;\r\n        const value = accessor(data);\r\n        let currentNode = root;\r\n        for (let j = 0; j < parts.length; j++) {\r\n            const currentPath = parts.slice(0, j + 1);\r\n            const children = currentNode.children;\r\n            const nodeName = parts[j];\r\n            let childNode;\r\n            if (j + 1 < parts.length) {\r\n                // Not yet at the end of the sequence; move down the tree.\r\n                childNode = findChild(children, nodeName);\r\n\r\n                // If we don't already have a child node for this branch, create it.\r\n                if (childNode === void 0) {\r\n                    childNode = {'key': nodeName, 'children': [], 'path': currentPath};\r\n                    children.push(childNode);\r\n                }\r\n                currentNode = childNode;\r\n            } else {\r\n                // Reached the end of the sequence; create a leaf node.\r\n                childNode = {'key': nodeName, 'value': value, 'data': data, 'path': currentPath};\r\n                children.push(childNode);\r\n            }\r\n        }\r\n    }\r\n    return root;\r\n};\r\n\r\nfunction findChild (children, nodeName) {\r\n    for (let k = 0; k < children.length; k++) {\r\n        if (children[k].key === nodeName) {\r\n            return children[k];\r\n        }\r\n    }\r\n}\r\n\r\nutils.getAncestors = function (node) {\r\n    const path = [];\r\n    let current = node;\r\n    while (current.parent) {\r\n        path.unshift(current.name);\r\n        current = current.parent;\r\n    }\r\n    return path;\r\n};\r\n\r\nutils.arraysIdentical = function (a, b) {\r\n    let i = a.length;\r\n    if (i !== b.length) {\r\n        return false;\r\n    }\r\n    while (i--) {\r\n        if (a[i] !== b[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n","import {utils} from './utils';\r\n\r\n/**\r\n * @namespace printers\r\n * @type {{}}\r\n */\r\nexport const printers = {};\r\n\r\n/**\r\n * Converts a list of filters into a readable string.\r\n * @method filters\r\n * @memberof printers\r\n * @param {Array<filters>} filters\r\n * @returns {String}\r\n */\r\nprinters.filters = function (filters) {\r\n    let s = '';\r\n\r\n    for (let i = 0; i < filters.length; ++i) {\r\n        if (i > 0) {\r\n            s += ', ';\r\n        }\r\n        s += printers.filter(filters[i]);\r\n    }\r\n\r\n    return s;\r\n};\r\n\r\n/**\r\n * Converts a filter into a readable string.\r\n * @method filter\r\n * @memberof printers\r\n * @param {filters|any|Array<any>} filter\r\n * @returns {String}\r\n */\r\nprinters.filter = function (filter) {\r\n    let s = '';\r\n\r\n    if (typeof filter !== 'undefined' && filter !== null) {\r\n        if (filter instanceof Array) {\r\n            if (filter.length >= 2) {\r\n                s = `[${filter.map(e => utils.printSingleValue(e)).join(' -> ')}]`;\r\n            } else if (filter.length >= 1) {\r\n                s = utils.printSingleValue(filter[0]);\r\n            }\r\n        } else {\r\n            s = utils.printSingleValue(filter);\r\n        }\r\n    }\r\n\r\n    return s;\r\n};\r\n","import {utils} from './utils';\r\n\r\n/**\r\n * @namespace units\r\n * @type {{}}\r\n */\r\nexport const units = {};\r\n\r\n/**\r\n * The default value for {@link CoordinateGridMixin#xUnits .xUnits} for the\r\n * {@link CoordinateGridMixin Coordinate Grid Chart} and should\r\n * be used when the x values are a sequence of integers.\r\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\r\n * @method integers\r\n * @memberof units\r\n * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\r\n * @example\r\n * chart.xUnits(units.integers) // already the default\r\n * @param {Number} start\r\n * @param {Number} end\r\n * @returns {Number}\r\n */\r\nunits.integers = function (start, end) {\r\n    return Math.abs(end - start);\r\n};\r\n\r\n/**\r\n * This argument can be passed to the {@link CoordinateGridMixin#xUnits .xUnits} function of a\r\n * coordinate grid chart to specify ordinal units for the x axis. Usually this parameter is used in\r\n * combination with passing\r\n * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal}\r\n * to {@link CoordinateGridMixin#x .x}.\r\n *\r\n * As of dc.js 3.0, this is purely a placeholder or magic value which causes the chart to go into ordinal mode; the\r\n * function is not called.\r\n * @method ordinal\r\n * @memberof units\r\n * @return {uncallable}\r\n * @see {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal}\r\n * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\r\n * @see {@link CoordinateGridMixin#x coordinateGridMixin.x}\r\n * @example\r\n * chart.xUnits(units.ordinal)\r\n *      .x(d3.scaleOrdinal())\r\n */\r\nunits.ordinal = function () {\r\n    throw new Error('dc.units.ordinal should not be called - it is a placeholder');\r\n};\r\n\r\n/**\r\n * @namespace fp\r\n * @memberof units\r\n * @type {{}}\r\n */\r\nunits.fp = {};\r\n/**\r\n * This function generates an argument for the {@link CoordinateGridMixin Coordinate Grid Chart}\r\n * {@link CoordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\r\n * numbers with the given precision.\r\n * The returned function determines how many values at the given precision will fit into the range\r\n * supplied in its start and end parameters.\r\n * @method precision\r\n * @memberof units.fp\r\n * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\r\n * @example\r\n * // specify values (and ticks) every 0.1 units\r\n * chart.xUnits(units.fp.precision(0.1)\r\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\r\n * var thousandths = units.fp.precision(0.001);\r\n * thousandths(0.5, 1.0) // returns 500\r\n * @param {Number} precision\r\n * @returns {Function} start-end unit function\r\n */\r\nunits.fp.precision = function (precision) {\r\n    const _f = function (s, e) {\r\n        const d = Math.abs((e - s) / _f.resolution);\r\n        if (utils.isNegligible(d - Math.floor(d))) {\r\n            return Math.floor(d);\r\n        } else {\r\n            return Math.ceil(d);\r\n        }\r\n    };\r\n    _f.resolution = precision;\r\n    return _f;\r\n};\r\n","import {select} from 'd3-selection';\r\nimport {dispatch} from 'd3-dispatch';\r\nimport {ascending} from 'd3-array';\r\n\r\nimport {pluck, utils} from '../core/utils';\r\nimport {instanceOfChart} from '../core/core';\r\nimport {deregisterChart, redrawAll, registerChart, renderAll} from '../core/chart-registry';\r\nimport {constants} from '../core/constants';\r\nimport {events} from '../core/events';\r\nimport {logger} from '../core/logger';\r\nimport {printers} from '../core/printers';\r\nimport {InvalidStateException} from '../core/invalid-state-exception';\r\nimport {BadArgumentException} from '../core/bad-argument-exception';\r\nimport {d3compat} from '../core/config';\r\n\r\nconst _defaultFilterHandler = (dimension, filters) => {\r\n    if (filters.length === 0) {\r\n        dimension.filter(null);\r\n    } else if (filters.length === 1 && !filters[0].isFiltered) {\r\n        // single value and not a function-based filter\r\n        dimension.filterExact(filters[0]);\r\n    } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\r\n        // single range-based filter\r\n        dimension.filterRange(filters[0]);\r\n    } else {\r\n        dimension.filterFunction(d => {\r\n            for (let i = 0; i < filters.length; i++) {\r\n                const filter = filters[i];\r\n                if (filter.isFiltered) {\r\n                    if(filter.isFiltered(d)) {\r\n                        return true;\r\n                    }\r\n                } else if (filter <= d && filter >= d) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    return filters;\r\n};\r\n\r\nconst _defaultHasFilterHandler = (filters, filter) => {\r\n    if (filter === null || typeof (filter) === 'undefined') {\r\n        return filters.length > 0;\r\n    }\r\n    return filters.some(f => filter <= f && filter >= f);\r\n};\r\n\r\nconst _defaultRemoveFilterHandler = (filters, filter) => {\r\n    for (let i = 0; i < filters.length; i++) {\r\n        if (filters[i] <= filter && filters[i] >= filter) {\r\n            filters.splice(i, 1);\r\n            break;\r\n        }\r\n    }\r\n    return filters;\r\n};\r\n\r\nconst _defaultAddFilterHandler = (filters, filter) => {\r\n    filters.push(filter);\r\n    return filters;\r\n};\r\n\r\nconst _defaultResetFilterHandler = filters => [];\r\n\r\n/**\r\n * `BaseMixin` is an abstract functional object representing a basic `dc` chart object\r\n * for all chart and widget implementations. Methods from the {@link #BaseMixin BaseMixin} are inherited\r\n * and available on all chart implementations in the `dc` library.\r\n * @mixin BaseMixin\r\n */\r\nexport class BaseMixin {\r\n    constructor () {\r\n        this.__dcFlag__ = utils.uniqueId();\r\n        this._svgDescription = null\r\n        this._keyboardAccessible = false;\r\n\r\n        this._dimension = undefined;\r\n        this._group = undefined;\r\n\r\n        this._anchor = undefined;\r\n        this._root = undefined;\r\n        this._svg = undefined;\r\n        this._isChild = undefined;\r\n\r\n        this._minWidth = 200;\r\n        this._defaultWidthCalc = element => {\r\n            const width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\r\n            return (width && width > this._minWidth) ? width : this._minWidth;\r\n        };\r\n        this._widthCalc = this._defaultWidthCalc;\r\n\r\n        this._minHeight = 200;\r\n        this._defaultHeightCalc = element => {\r\n            const height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\r\n            return (height && height > this._minHeight) ? height : this._minHeight;\r\n        };\r\n        this._heightCalc = this._defaultHeightCalc;\r\n        this._width = undefined;\r\n        this._height = undefined;\r\n        this._useViewBoxResizing = false;\r\n\r\n        this._keyAccessor = pluck('key');\r\n        this._valueAccessor = pluck('value');\r\n        this._label = pluck('key');\r\n\r\n        this._ordering = pluck('key');\r\n\r\n        this._renderLabel = false;\r\n\r\n        this._title = d => `${this.keyAccessor()(d)}: ${this.valueAccessor()(d)}`;\r\n        this._renderTitle = true;\r\n        this._controlsUseVisibility = false;\r\n\r\n        this._transitionDuration = 750;\r\n\r\n        this._transitionDelay = 0;\r\n\r\n        this._filterPrinter = printers.filters;\r\n\r\n        this._mandatoryAttributesList = ['dimension', 'group'];\r\n\r\n        this._chartGroup = constants.DEFAULT_CHART_GROUP;\r\n\r\n        this._listeners = dispatch(\r\n            'preRender',\r\n            'postRender',\r\n            'preRedraw',\r\n            'postRedraw',\r\n            'filtered',\r\n            'zoomed',\r\n            'renderlet',\r\n            'pretransition');\r\n\r\n        this._legend = undefined;\r\n        this._commitHandler = undefined;\r\n\r\n        this._defaultData = group => group.all();\r\n        this._data = this._defaultData;\r\n\r\n        this._filters = [];\r\n\r\n        this._filterHandler = _defaultFilterHandler;\r\n        this._hasFilterHandler = _defaultHasFilterHandler;\r\n        this._removeFilterHandler = _defaultRemoveFilterHandler;\r\n        this._addFilterHandler = _defaultAddFilterHandler;\r\n        this._resetFilterHandler = _defaultResetFilterHandler;\r\n    }\r\n\r\n    /**\r\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\r\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\r\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\r\n     * function, or falsy. If no value is specified then the value of the current height attribute will\r\n     * be returned.\r\n     *\r\n     * By default, without an explicit height being given, the chart will select the width of its\r\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\r\n     * {@link BaseMixin#minHeight minHeight} property). Setting the value falsy will return\r\n     * the chart to the default behavior.\r\n     * @see {@link BaseMixin#minHeight minHeight}\r\n     * @example\r\n     * // Default height\r\n     * chart.height(function (element) {\r\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\r\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\r\n     * });\r\n     *\r\n     * chart.height(250); // Set the chart's height to 250px;\r\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\r\n     * chart.height(null); // reset the height to the default auto calculation\r\n     * @param {Number|Function} [height]\r\n     * @returns {Number|BaseMixin}\r\n     */\r\n    height (height) {\r\n        if (!arguments.length) {\r\n            if (!utils.isNumber(this._height)) {\r\n                // only calculate once\r\n                this._height = this._heightCalc(this._root.node());\r\n            }\r\n            return this._height;\r\n        }\r\n        this._heightCalc = height ? (typeof height === 'function' ? height : utils.constant(height)) : this._defaultHeightCalc;\r\n        this._height = undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the width attribute of a chart.\r\n     * @see {@link BaseMixin#height height}\r\n     * @see {@link BaseMixin#minWidth minWidth}\r\n     * @example\r\n     * // Default width\r\n     * chart.width(function (element) {\r\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\r\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\r\n     * });\r\n     * @param {Number|Function} [width]\r\n     * @returns {Number|BaseMixin}\r\n     */\r\n    width (width) {\r\n        if (!arguments.length) {\r\n            if (!utils.isNumber(this._width)) {\r\n                // only calculate once\r\n                this._width = this._widthCalc(this._root.node());\r\n            }\r\n            return this._width;\r\n        }\r\n        this._widthCalc = width ? (typeof width === 'function' ? width : utils.constant(width)) : this._defaultWidthCalc;\r\n        this._width = undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\r\n     * {@link BaseMixin#width width} function.\r\n     * @see {@link BaseMixin#width width}\r\n     * @param {Number} [minWidth=200]\r\n     * @returns {Number|BaseMixin}\r\n     */\r\n    minWidth (minWidth) {\r\n        if (!arguments.length) {\r\n            return this._minWidth;\r\n        }\r\n        this._minWidth = minWidth;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\r\n     * {@link BaseMixin#height height} function.\r\n     * @see {@link BaseMixin#height height}\r\n     * @param {Number} [minHeight=200]\r\n     * @returns {Number|BaseMixin}\r\n     */\r\n    minHeight (minHeight) {\r\n        if (!arguments.length) {\r\n            return this._minHeight;\r\n        }\r\n        this._minHeight = minHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off using the SVG\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\r\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\r\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\r\n     *\r\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\r\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\r\n     * 100%` or absolute positioning to resize to its parent div.\r\n     *\r\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\r\n     * will be resized if the chart is any other size, you need to set the chart width and height so\r\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\r\n     *\r\n     * You can see examples of this resizing strategy in the [Chart Resizing\r\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\r\n     * one-chart examples to enable `useViewBoxResizing`.\r\n     * @param {Boolean} [useViewBoxResizing=false]\r\n     * @returns {Boolean|BaseMixin}\r\n     */\r\n    useViewBoxResizing (useViewBoxResizing) {\r\n        if (!arguments.length) {\r\n            return this._useViewBoxResizing;\r\n        }\r\n        this._useViewBoxResizing = useViewBoxResizing;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\r\n     *\r\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\r\n     * the current dimension will be returned.\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\r\n     * @example\r\n     * var index = crossfilter([]);\r\n     * var dimension = index.dimension(pluck('key'));\r\n     * chart.dimension(dimension);\r\n     * @param {crossfilter.dimension} [dimension]\r\n     * @returns {crossfilter.dimension|BaseMixin}\r\n     */\r\n    dimension (dimension) {\r\n        if (!arguments.length) {\r\n            return this._dimension;\r\n        }\r\n        this._dimension = dimension;\r\n        this.expireCache();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\r\n     * group and by default will return\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\r\n     * This behavior may be modified to, for instance, return only the top 5 groups.\r\n     * @example\r\n     * // Default data function\r\n     * chart.data(function (group) { return group.all(); });\r\n     *\r\n     * chart.data(function (group) { return group.top(5); });\r\n     * @param {Function} [callback]\r\n     * @returns {*|BaseMixin}\r\n     */\r\n    data (callback) {\r\n        if (!arguments.length) {\r\n            return this._data(this._group);\r\n        }\r\n        this._data = typeof callback === 'function' ? callback : utils.constant(callback);\r\n        this.expireCache();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Set or get the group attribute of a chart. In `dc` a group is a\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\r\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\r\n     * given, then it will be used as the new group.\r\n     *\r\n     * If no value specified then the current group will be returned.\r\n     * If `name` is specified then it will be used to generate legend label.\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\r\n     * @example\r\n     * var index = crossfilter([]);\r\n     * var dimension = index.dimension(pluck('key'));\r\n     * chart.dimension(dimension);\r\n     * chart.group(dimension.group().reduceSum());\r\n     * @param {crossfilter.group} [group]\r\n     * @param {String} [name]\r\n     * @returns {crossfilter.group|BaseMixin}\r\n     */\r\n    group (group, name) {\r\n        if (!arguments.length) {\r\n            return this._group;\r\n        }\r\n        this._group = group;\r\n        this._groupName = name;\r\n        this.expireCache();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Array.sort}\r\n     * to sort elements; this accessor returns the value to order on.\r\n     * @example\r\n     * // Default ordering accessor\r\n     * _chart.ordering(pluck('key'));\r\n     * @param {Function} [orderFunction]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    ordering (orderFunction) {\r\n        if (!arguments.length) {\r\n            return this._ordering;\r\n        }\r\n        this._ordering = orderFunction;\r\n        this.expireCache();\r\n        return this;\r\n    }\r\n\r\n    _computeOrderedGroups (data) {\r\n        // clone the array before sorting, otherwise Array.sort sorts in-place\r\n        return Array.from(data).sort((a, b) => ascending(this._ordering(a), this._ordering(b)));\r\n    }\r\n\r\n    /**\r\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\r\n     * {@link BaseMixin#filter chart.filter(null)}.\r\n     * @returns {BaseMixin}\r\n     */\r\n    filterAll () {\r\n        return this.filter(null);\r\n    }\r\n\r\n    /**\r\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\r\n     * selection.\r\n     *\r\n     * This function is **not chainable** since it does not return a chart instance; however the d3\r\n     * selection result can be chained to d3 function calls.\r\n     * @see {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3.select}\r\n     * @example\r\n     * // Has the same effect as d3.select('#chart-id').select(selector)\r\n     * chart.select(selector)\r\n     * @param {String} sel CSS selector string\r\n     * @returns {d3.selection}\r\n     */\r\n    select (sel) {\r\n        return this._root.select(sel);\r\n    }\r\n\r\n    /**\r\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\r\n     *\r\n     * This function is **not chainable** since it does not return a chart instance; however the d3\r\n     * selection result can be chained to d3 function calls.\r\n     * @see {@link https://github.com/d3/d3-selection/blob/master/README.md#selectAll d3.selectAll}\r\n     * @example\r\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\r\n     * chart.selectAll(selector)\r\n     * @param {String} sel CSS selector string\r\n     * @returns {d3.selection}\r\n     */\r\n    selectAll (sel) {\r\n        return this._root ? this._root.selectAll(sel) : null;\r\n    }\r\n\r\n    /**\r\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\r\n     * selector](https://github.com/d3/d3-selection/blob/master/README.md#selecting-elements) specifying a dom\r\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\r\n     * within the chartGroup. This class is called internally on chart initialization, but be called\r\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\r\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\r\n     * @param {String} [chartGroup]\r\n     * @returns {String|node|d3.selection|BaseMixin}\r\n     */\r\n    anchor (parent, chartGroup) {\r\n        if (!arguments.length) {\r\n            return this._anchor;\r\n        }\r\n        if (instanceOfChart(parent)) {\r\n            this._anchor = parent.anchor();\r\n            if (this._anchor.children) { // is _anchor a div?\r\n                this._anchor = `#${parent.anchorName()}`;\r\n            }\r\n            this._root = parent.root();\r\n            this._isChild = true;\r\n        } else if (parent) {\r\n            if (parent.select && parent.classed) { // detect d3 selection\r\n                this._anchor = parent.node();\r\n            } else {\r\n                this._anchor = parent;\r\n            }\r\n            this._root = select(this._anchor);\r\n            this._root.classed(constants.CHART_CLASS, true);\r\n            registerChart(this, chartGroup);\r\n            this._isChild = false;\r\n        } else {\r\n            throw new BadArgumentException('parent must be defined');\r\n        }\r\n        this._chartGroup = chartGroup;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the DOM id for the chart's anchored location.\r\n     * @returns {String}\r\n     */\r\n    anchorName () {\r\n        const a = this.anchor();\r\n        if (a && a.id) {\r\n            return a.id;\r\n        }\r\n        if (a && a.replace) {\r\n            return a.replace('#', '');\r\n        }\r\n        return `dc-chart${this.chartID()}`;\r\n    }\r\n\r\n    /**\r\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\r\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\r\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\r\n     * unexpected consequences.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\r\n     * @param {HTMLElement} [rootElement]\r\n     * @returns {HTMLElement|BaseMixin}\r\n     */\r\n    root (rootElement) {\r\n        if (!arguments.length) {\r\n            return this._root;\r\n        }\r\n        this._root = rootElement;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\r\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\r\n     * of dc internals may have unexpected consequences.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\r\n     * @param {SVGElement|d3.selection} [svgElement]\r\n     * @returns {SVGElement|d3.selection|BaseMixin}\r\n     */\r\n    svg (svgElement) {\r\n        if (!arguments.length) {\r\n            return this._svg;\r\n        }\r\n        this._svg = svgElement;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\r\n     * @returns {SVGElement}\r\n     */\r\n    resetSvg () {\r\n        this.select('svg').remove();\r\n        return this.generateSvg();\r\n    }\r\n\r\n    sizeSvg () {\r\n        if (this._svg) {\r\n            if (!this._useViewBoxResizing) {\r\n                this._svg\r\n                    .attr('width', this.width())\r\n                    .attr('height', this.height());\r\n            } else if (!this._svg.attr('viewBox')) {\r\n                this._svg\r\n                    .attr('viewBox', `0 0 ${this.width()} ${this.height()}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    generateSvg () {\r\n        this._svg = this.root().append('svg');\r\n    \r\n        if (this._svgDescription || this._keyboardAccessible) {\r\n\r\n            this._svg.append('desc')\r\n                .attr('id', `desc-id-${this.__dcFlag__}`)\r\n                .html(`${this.svgDescription()}`);\r\n\r\n            this._svg\r\n                .attr('tabindex', '0')\r\n                .attr('role', 'img')\r\n                .attr('aria-labelledby', `desc-id-${this.__dcFlag__}`);\r\n        }\r\n\r\n        this.sizeSvg();\r\n        return this._svg;\r\n    }\r\n\r\n    /**\r\n     * Set or get description text for the entire SVG graphic. If set, will create a `<desc>` element as the first\r\n     * child of the SVG with the description text and also make the SVG focusable from keyboard.\r\n     * @param {String} [description]\r\n     * @returns {String|BaseMixin}\r\n     */\r\n    svgDescription (description) {\r\n        if (!arguments.length) {\r\n            return this._svgDescription || this.constructor.name;\r\n        }\r\n\r\n        this._svgDescription = description;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * If set, interactive chart elements like individual bars in a bar chart or symbols in a scatter plot\r\n     * will be focusable from keyboard and on pressing Enter or Space will behave as if clicked on.\r\n     * \r\n     * If `svgDescription` has not been explicitly set, will also set SVG description text to the class\r\n     * constructor name, like BarChart or HeatMap, and make the entire SVG focusable.\r\n     * @param {Boolean} [keyboardAccessible=false]\r\n     * @returns {Boolean|BarChart}\r\n     */\r\n    keyboardAccessible (keyboardAccessible) {\r\n        if (!arguments.length) {\r\n            return this._keyboardAccessible;\r\n        }\r\n        this._keyboardAccessible = keyboardAccessible;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the filter printer function. The filter printer function is used to generate human\r\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\r\n     * in the `.filter element; see {@link BaseMixin#turnOnControls turnOnControls}.\r\n     *\r\n     * By default dc charts use a default filter printer {@link printers.filters printers.filters}\r\n     * that provides simple printing support for both single value and ranged filters.\r\n     * @example\r\n     * // for a chart with an ordinal brush, print the filters in upper case\r\n     * chart.filterPrinter(function(filters) {\r\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\r\n     * });\r\n     * // for a chart with a range brush, print the filter as start and extent\r\n     * chart.filterPrinter(function(filters) {\r\n     *   return 'start ' + utils.printSingleValue(filters[0][0]) +\r\n     *     ' extent ' + utils.printSingleValue(filters[0][1] - filters[0][0]);\r\n     * });\r\n     * @param {Function} [filterPrinterFunction=printers.filters]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    filterPrinter (filterPrinterFunction) {\r\n        if (!arguments.length) {\r\n            return this._filterPrinter;\r\n        }\r\n        this._filterPrinter = filterPrinterFunction;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\r\n     * chart reset and filter controls, for less disruption to the layout.\r\n     * @param {Boolean} [controlsUseVisibility=false]\r\n     * @returns {Boolean|BaseMixin}\r\n     */\r\n    controlsUseVisibility (controlsUseVisibility) {\r\n        if (!arguments.length) {\r\n            return this._controlsUseVisibility;\r\n        }\r\n        this._controlsUseVisibility = controlsUseVisibility;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on optional control elements within the root element. dc currently supports the\r\n     * following html control elements.\r\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\r\n     * of control element is usually used to store a reset link to allow user to reset filter on a\r\n     * certain chart. This element will be turned off automatically if the filter is cleared.\r\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\r\n     * content of this element is then replaced with the current filter value using the filter printer\r\n     * function. This type of element will be turned off automatically if the filter is cleared.\r\n     * @returns {BaseMixin}\r\n     */\r\n    turnOnControls () {\r\n        if (this._root) {\r\n            const attribute = this.controlsUseVisibility() ? 'visibility' : 'display';\r\n            this.selectAll('.reset').style(attribute, null);\r\n            this.selectAll('.filter').text(this._filterPrinter(this.filters())).style(attribute, null);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn off optional control elements within the root element.\r\n     * @see {@link BaseMixin#turnOnControls turnOnControls}\r\n     * @returns {BaseMixin}\r\n     */\r\n    turnOffControls () {\r\n        if (this._root) {\r\n            const attribute = this.controlsUseVisibility() ? 'visibility' : 'display';\r\n            const value = this.controlsUseVisibility() ? 'hidden' : 'none';\r\n            this.selectAll('.reset').style(attribute, value);\r\n            this.selectAll('.filter').style(attribute, value).text(this.filter());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\r\n     * @param {Number} [duration=750]\r\n     * @returns {Number|BaseMixin}\r\n     */\r\n    transitionDuration (duration) {\r\n        if (!arguments.length) {\r\n            return this._transitionDuration;\r\n        }\r\n        this._transitionDuration = duration;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\r\n     * @param {Number} [delay=0]\r\n     * @returns {Number|BaseMixin}\r\n     */\r\n    transitionDelay (delay) {\r\n        if (!arguments.length) {\r\n            return this._transitionDelay;\r\n        }\r\n        this._transitionDelay = delay;\r\n        return this;\r\n    }\r\n\r\n    _mandatoryAttributes (_) {\r\n        if (!arguments.length) {\r\n            return this._mandatoryAttributesList;\r\n        }\r\n        this._mandatoryAttributesList = _;\r\n        return this;\r\n    }\r\n\r\n    checkForMandatoryAttributes (a) {\r\n        if (!this[a] || !this[a]()) {\r\n            throw new InvalidStateException(`Mandatory attribute chart.${a} is missing on chart[#${this.anchorName()}]`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\r\n     * should only be used to render the chart for the first time on the page or if you want to make\r\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\r\n     * behaviour.\r\n     * @returns {BaseMixin}\r\n     */\r\n    render () {\r\n        this._height = this._width = undefined; // force recalculate\r\n        this._listeners.call('preRender', this, this);\r\n\r\n        if (this._mandatoryAttributesList) {\r\n            this._mandatoryAttributesList.forEach(e => this.checkForMandatoryAttributes(e));\r\n        }\r\n\r\n        const result = this._doRender();\r\n\r\n        if (this._legend) {\r\n            this._legend.render();\r\n        }\r\n\r\n        this._activateRenderlets('postRender');\r\n\r\n        return result;\r\n    }\r\n\r\n    _makeKeyboardAccessible (onClickFunction, ...onClickArgs) {\r\n        // called from each chart module's render and redraw methods\r\n        const tabElements = this._svg\r\n            .selectAll('.dc-tabbable')\r\n            .attr('tabindex', 0);\r\n                \r\n        if (onClickFunction) {\r\n            tabElements.on('keydown', d3compat.eventHandler((d, event) => {\r\n                // trigger only if d is an object undestood by KeyAccessor()\r\n                if (event.keyCode === 13 && typeof d === 'object') {\r\n                    onClickFunction.call(this, d, ...onClickArgs)\r\n                } \r\n                // special case for space key press - prevent scrolling\r\n                if (event.keyCode === 32 && typeof d === 'object') {\r\n                    onClickFunction.call(this, d, ...onClickArgs)\r\n                    event.preventDefault();                \r\n                }\r\n            \r\n            }));\r\n        }\r\n    }\r\n\r\n    _activateRenderlets (event) {\r\n        this._listeners.call('pretransition', this, this);\r\n        if (this.transitionDuration() > 0 && this._svg) {\r\n            this._svg.transition().duration(this.transitionDuration()).delay(this.transitionDelay())\r\n                .on('end', () => {\r\n                    this._listeners.call('renderlet', this, this);\r\n                    if (event) {\r\n                        this._listeners.call(event, this, this);\r\n                    }\r\n                });\r\n        } else {\r\n            this._listeners.call('renderlet', this, this);\r\n            if (event) {\r\n                this._listeners.call(event, this, this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\r\n     * change in the underlying data dimension then calling this method will have no effect on the\r\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\r\n     * events (in particular {@link redrawAll redrawAll}); therefore, you only need to\r\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\r\n     * data is loaded in the background using\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\r\n     * @returns {BaseMixin}\r\n     */\r\n    redraw () {\r\n        this.sizeSvg();\r\n        this._listeners.call('preRedraw', this, this);\r\n\r\n        const result = this._doRedraw();\r\n\r\n        if (this._legend) {\r\n            this._legend.render();\r\n        }\r\n\r\n        this._activateRenderlets('postRedraw');\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\r\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\r\n     *\r\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\r\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\r\n     * triggered once the commit is done. The callback has the standard node.js continuation signature\r\n     * with error first and result second.\r\n     * @param {Function} commitHandler\r\n     * @returns {BaseMixin}\r\n     */\r\n    commitHandler (commitHandler) {\r\n        if (!arguments.length) {\r\n            return this._commitHandler;\r\n        }\r\n        this._commitHandler = commitHandler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\r\n     * change. If the chart has a {@link BaseMixin.commitFilter commitHandler}, it will\r\n     * be executed and waited for.\r\n     * @returns {BaseMixin}\r\n     */\r\n    redrawGroup () {\r\n        if (this._commitHandler) {\r\n            this._commitHandler(false, (error, result) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    redrawAll(this.chartGroup());\r\n                }\r\n            });\r\n        } else {\r\n            redrawAll(this.chartGroup());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Renders all charts in the same group as this chart. If the chart has a\r\n     * {@link BaseMixin.commitFilter commitHandler}, it will be executed and waited for\r\n     * @returns {BaseMixin}\r\n     */\r\n    renderGroup () {\r\n        if (this._commitHandler) {\r\n            this._commitHandler(false, (error, result) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    renderAll(this.chartGroup());\r\n                }\r\n            });\r\n        } else {\r\n            renderAll(this.chartGroup());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _invokeFilteredListener (f) {\r\n        if (f !== undefined) {\r\n            this._listeners.call('filtered', this, this, f);\r\n        }\r\n    }\r\n\r\n    _invokeZoomedListener () {\r\n        this._listeners.call('zoomed', this, this);\r\n    }\r\n\r\n    /**\r\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\r\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\r\n     * you to change the way filters are checked for and replaced.\r\n     * @example\r\n     * // default has-filter handler\r\n     * chart.hasFilterHandler(function (filters, filter) {\r\n     *     if (filter === null || typeof(filter) === 'undefined') {\r\n     *         return filters.length > 0;\r\n     *     }\r\n     *     return filters.some(function (f) {\r\n     *         return filter <= f && filter >= f;\r\n     *     });\r\n     * });\r\n     *\r\n     * // custom filter handler (no-op)\r\n     * chart.hasFilterHandler(function(filters, filter) {\r\n     *     return false;\r\n     * });\r\n     * @param {Function} [hasFilterHandler]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    hasFilterHandler (hasFilterHandler) {\r\n        if (!arguments.length) {\r\n            return this._hasFilterHandler;\r\n        }\r\n        this._hasFilterHandler = hasFilterHandler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\r\n     * This function is **not chainable**.\r\n     * @see {@link BaseMixin#hasFilterHandler hasFilterHandler}\r\n     * @param {*} [filter]\r\n     * @returns {Boolean}\r\n     */\r\n    hasFilter (filter) {\r\n        return this._hasFilterHandler(this._filters, filter);\r\n    }\r\n\r\n    /**\r\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\r\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\r\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\r\n     * using a filter server other than crossfilter.\r\n     *\r\n     * The handler should return a new or modified array as the result.\r\n     * @example\r\n     * // default remove filter handler\r\n     * chart.removeFilterHandler(function (filters, filter) {\r\n     *     for (var i = 0; i < filters.length; i++) {\r\n     *         if (filters[i] <= filter && filters[i] >= filter) {\r\n     *             filters.splice(i, 1);\r\n     *             break;\r\n     *         }\r\n     *     }\r\n     *     return filters;\r\n     * });\r\n     *\r\n     * // custom filter handler (no-op)\r\n     * chart.removeFilterHandler(function(filters, filter) {\r\n     *     return filters;\r\n     * });\r\n     * @param {Function} [removeFilterHandler]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    removeFilterHandler (removeFilterHandler) {\r\n        if (!arguments.length) {\r\n            return this._removeFilterHandler;\r\n        }\r\n        this._removeFilterHandler = removeFilterHandler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\r\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\r\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\r\n     * than crossfilter.\r\n     *\r\n     * The handler should return a new or modified array as the result.\r\n     * @example\r\n     * // default add filter handler\r\n     * chart.addFilterHandler(function (filters, filter) {\r\n     *     filters.push(filter);\r\n     *     return filters;\r\n     * });\r\n     *\r\n     * // custom filter handler (no-op)\r\n     * chart.addFilterHandler(function(filters, filter) {\r\n     *     return filters;\r\n     * });\r\n     * @param {Function} [addFilterHandler]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    addFilterHandler (addFilterHandler) {\r\n        if (!arguments.length) {\r\n            return this._addFilterHandler;\r\n        }\r\n        this._addFilterHandler = addFilterHandler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\r\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\r\n     * change the way filters are reset, or perform additional work when resetting the filters,\r\n     * e.g. when using a filter server other than crossfilter.\r\n     *\r\n     * The handler should return a new or modified array as the result.\r\n     * @example\r\n     * // default remove filter handler\r\n     * function (filters) {\r\n     *     return [];\r\n     * }\r\n     *\r\n     * // custom filter handler (no-op)\r\n     * chart.resetFilterHandler(function(filters) {\r\n     *     return filters;\r\n     * });\r\n     * @param {Function} [resetFilterHandler]\r\n     * @returns {BaseMixin}\r\n     */\r\n    resetFilterHandler (resetFilterHandler) {\r\n        if (!arguments.length) {\r\n            return this._resetFilterHandler;\r\n        }\r\n        this._resetFilterHandler = resetFilterHandler;\r\n        return this;\r\n    }\r\n\r\n    applyFilters (filters) {\r\n        if (this.dimension() && this.dimension().filter) {\r\n            const fs = this._filterHandler(this.dimension(), filters);\r\n            if (fs) {\r\n                filters = fs;\r\n            }\r\n        }\r\n        return filters;\r\n    }\r\n\r\n    /**\r\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\r\n     * but more efficient because the filter is only applied once.\r\n     *\r\n     * @param {*} [filter]\r\n     * @returns {BaseMixin}\r\n     */\r\n    replaceFilter (filter) {\r\n        this._filters = this._resetFilterHandler(this._filters);\r\n        this.filter(filter);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\r\n     * is given.\r\n     *\r\n     * The filter parameter can take one of these forms:\r\n     * * A single value: the value will be toggled (added if it is not present in the current\r\n     * filters, removed if it is present)\r\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\r\n     * toggled\r\n     * * When appropriate for the chart, a {@link filters dc filter object} such as\r\n     *   * {@link filters.RangedFilter `filters.RangedFilter`} for the\r\n     * {@link CoordinateGridMixin CoordinateGridMixin} charts\r\n     *   * {@link filters.TwoDimensionalFilter `filters.TwoDimensionalFilter`} for the\r\n     * {@link HeatMap heat map}\r\n     *   * {@link filters.RangedTwoDimensionalFilter `filters.RangedTwoDimensionalFilter`}\r\n     * for the {@link ScatterPlot scatter plot}\r\n     * * `null`: the filter will be reset using the\r\n     * {@link BaseMixin#resetFilterHandler resetFilterHandler}\r\n     *\r\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\r\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\r\n     * efficient to call {@link BaseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\r\n     *\r\n     * Each toggle is executed by checking if the value is already present using the\r\n     * {@link BaseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\r\n     * using the {@link BaseMixin#addFilterHandler addFilterHandler}; if it is already present,\r\n     * it is removed using the {@link BaseMixin#removeFilterHandler removeFilterHandler}.\r\n     *\r\n     * Once the filters array has been updated, the filters are applied to the\r\n     * crossfilter dimension, using the {@link BaseMixin#filterHandler filterHandler}.\r\n     *\r\n     * Once you have set the filters, call {@link BaseMixin#redrawGroup `chart.redrawGroup()`}\r\n     * (or {@link redrawAll `redrawAll()`}) to redraw the chart's group.\r\n     * @see {@link BaseMixin#addFilterHandler addFilterHandler}\r\n     * @see {@link BaseMixin#removeFilterHandler removeFilterHandler}\r\n     * @see {@link BaseMixin#resetFilterHandler resetFilterHandler}\r\n     * @see {@link BaseMixin#filterHandler filterHandler}\r\n     * @example\r\n     * // filter by a single string\r\n     * chart.filter('Sunday');\r\n     * // filter by a single age\r\n     * chart.filter(18);\r\n     * // filter by a set of states\r\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\r\n     * // filter by range -- note the use of filters.RangedFilter, which is different\r\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\r\n     * chart.filter(filters.RangedFilter(15,20));\r\n     * @param {*} [filter]\r\n     * @returns {BaseMixin}\r\n     */\r\n    filter (filter) {\r\n        if (!arguments.length) {\r\n            return this._filters.length > 0 ? this._filters[0] : null;\r\n        }\r\n        let filters = this._filters;\r\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\r\n            // toggle each filter\r\n            filter[0].forEach(f => {\r\n                if (this._hasFilterHandler(filters, f)) {\r\n                    filters = this._removeFilterHandler(filters, f);\r\n                } else {\r\n                    filters = this._addFilterHandler(filters, f);\r\n                }\r\n            });\r\n        } else if (filter === null) {\r\n            filters = this._resetFilterHandler(filters);\r\n        } else {\r\n            if (this._hasFilterHandler(filters, filter)) {\r\n                filters = this._removeFilterHandler(filters, filter);\r\n            } else {\r\n                filters = this._addFilterHandler(filters, filter);\r\n            }\r\n        }\r\n        this._filters = this.applyFilters(filters);\r\n        this._invokeFilteredListener(filter);\r\n\r\n        if (this._root !== null && this.hasFilter()) {\r\n            this.turnOnControls();\r\n        } else {\r\n            this.turnOffControls();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns all current filters. This method does not perform defensive cloning of the internal\r\n     * filter array before returning, therefore any modification of the returned array will effect the\r\n     * chart's internal filter storage.\r\n     * @returns {Array<*>}\r\n     */\r\n    filters () {\r\n        return this._filters;\r\n    }\r\n\r\n    highlightSelected (e) {\r\n        select(e).classed(constants.SELECTED_CLASS, true);\r\n        select(e).classed(constants.DESELECTED_CLASS, false);\r\n    }\r\n\r\n    fadeDeselected (e) {\r\n        select(e).classed(constants.SELECTED_CLASS, false);\r\n        select(e).classed(constants.DESELECTED_CLASS, true);\r\n    }\r\n\r\n    resetHighlight (e) {\r\n        select(e).classed(constants.SELECTED_CLASS, false);\r\n        select(e).classed(constants.DESELECTED_CLASS, false);\r\n    }\r\n\r\n    /**\r\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\r\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\r\n     *\r\n     * This function can be replaced in order to change the click behavior (but first look at\r\n     * @example\r\n     * var oldHandler = chart.onClick;\r\n     * chart.onClick = function(datum) {\r\n     *   // use datum.\r\n     * @param {*} datum\r\n     * @return {undefined}\r\n     */\r\n    onClick (datum) {\r\n        const filter = this.keyAccessor()(datum);\r\n        events.trigger(() => {\r\n            this.filter(filter);\r\n            this.redrawGroup();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\r\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\r\n     * before or after filtering.\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\r\n     * @example\r\n     * // the default filter handler handles all possible cases for the charts in dc.js\r\n     * // you can replace it with something more specialized for your own chart\r\n     * chart.filterHandler(function (dimension, filters) {\r\n     *     if (filters.length === 0) {\r\n     *         // the empty case (no filtering)\r\n     *         dimension.filter(null);\r\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\r\n     *         // single value and not a function-based filter\r\n     *         dimension.filterExact(filters[0]);\r\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\r\n     *         // single range-based filter\r\n     *         dimension.filterRange(filters[0]);\r\n     *     } else {\r\n     *         // an array of values, or an array of filter objects\r\n     *         dimension.filterFunction(function (d) {\r\n     *             for (var i = 0; i < filters.length; i++) {\r\n     *                 var filter = filters[i];\r\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\r\n     *                     return true;\r\n     *                 } else if (filter <= d && filter >= d) {\r\n     *                     return true;\r\n     *                 }\r\n     *             }\r\n     *             return false;\r\n     *         });\r\n     *     }\r\n     *     return filters;\r\n     * });\r\n     *\r\n     * // custom filter handler\r\n     * chart.filterHandler(function(dimension, filter){\r\n     *     var newFilter = filter + 10;\r\n     *     dimension.filter(newFilter);\r\n     *     return newFilter; // set the actual filter value to the new value\r\n     * });\r\n     * @param {Function} [filterHandler]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    filterHandler (filterHandler) {\r\n        if (!arguments.length) {\r\n            return this._filterHandler;\r\n        }\r\n        this._filterHandler = filterHandler;\r\n        return this;\r\n    }\r\n\r\n    // abstract function stub\r\n    _doRender () {\r\n        // do nothing in base, should be overridden by sub-function\r\n        return this;\r\n    }\r\n\r\n    _doRedraw () {\r\n        // do nothing in base, should be overridden by sub-function\r\n        return this;\r\n    }\r\n\r\n    legendables () {\r\n        // do nothing in base, should be overridden by sub-function\r\n        return [];\r\n    }\r\n\r\n    legendHighlight () {\r\n        // do nothing in base, should be overridden by sub-function\r\n    }\r\n\r\n    legendReset () {\r\n        // do nothing in base, should be overridden by sub-function\r\n    }\r\n\r\n    legendToggle () {\r\n        // do nothing in base, should be overriden by sub-function\r\n    }\r\n\r\n    isLegendableHidden () {\r\n        // do nothing in base, should be overridden by sub-function\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\r\n     * value from the crossfilter group. Key values are used differently in different charts, for\r\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\r\n     * @example\r\n     * // default key accessor\r\n     * chart.keyAccessor(function(d) { return d.key; });\r\n     * // custom key accessor for a multi-value crossfilter reduction\r\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\r\n     * @param {Function} [keyAccessor]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    keyAccessor (keyAccessor) {\r\n        if (!arguments.length) {\r\n            return this._keyAccessor;\r\n        }\r\n        this._keyAccessor = keyAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\r\n     * value from the crossfilter group. Group values are used differently in different charts, for\r\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\r\n     * coordinate chart.\r\n     * @example\r\n     * // default value accessor\r\n     * chart.valueAccessor(function(d) { return d.value; });\r\n     * // custom value accessor for a multi-value crossfilter reduction\r\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\r\n     * @param {Function} [valueAccessor]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    valueAccessor (valueAccessor) {\r\n        if (!arguments.length) {\r\n            return this._valueAccessor;\r\n        }\r\n        this._valueAccessor = valueAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the label function. The chart class will use this function to render labels for each\r\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\r\n     * chart supports the label function, for example line chart does not use this function\r\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\r\n     * @example\r\n     * // default label function just return the key\r\n     * chart.label(function(d) { return d.key; });\r\n     * // label function has access to the standard d3 data binding and can get quite complicated\r\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\r\n     * @param {Function} [labelFunction]\r\n     * @param {Boolean} [enableLabels=true]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    label (labelFunction, enableLabels) {\r\n        if (!arguments.length) {\r\n            return this._label;\r\n        }\r\n        this._label = labelFunction;\r\n        if ((enableLabels === undefined) || enableLabels) {\r\n            this._renderLabel = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off label rendering\r\n     * @param {Boolean} [renderLabel=false]\r\n     * @returns {Boolean|BaseMixin}\r\n     */\r\n    renderLabel (renderLabel) {\r\n        if (!arguments.length) {\r\n            return this._renderLabel;\r\n        }\r\n        this._renderLabel = renderLabel;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\r\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\r\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\r\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\r\n     * otherwise the brush layer will block tooltip triggering.\r\n     * @example\r\n     * // default title function shows \"key: value\"\r\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\r\n     * // title function has access to the standard d3 data binding and can get quite complicated\r\n     * chart.title(function(p) {\r\n     *    return p.key.getFullYear()\r\n     *        + '\\n'\r\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\r\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\r\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\r\n     * });\r\n     * @param {Function} [titleFunction]\r\n     * @returns {Function|BaseMixin}\r\n     */\r\n    title (titleFunction) {\r\n        if (!arguments.length) {\r\n            return this._title;\r\n        }\r\n        this._title = titleFunction;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\r\n     * given.\r\n     * @param {Boolean} [renderTitle=true]\r\n     * @returns {Boolean|BaseMixin}\r\n     */\r\n    renderTitle (renderTitle) {\r\n        if (!arguments.length) {\r\n            return this._renderTitle;\r\n        }\r\n        this._renderTitle = renderTitle;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\r\n     * together since it is expected they share the same underlying crossfilter data set.\r\n     * @param {String} [chartGroup]\r\n     * @returns {String|BaseMixin}\r\n     */\r\n    chartGroup (chartGroup) {\r\n        if (!arguments.length) {\r\n            return this._chartGroup;\r\n        }\r\n        if (!this._isChild) {\r\n            deregisterChart(this, this._chartGroup);\r\n        }\r\n        this._chartGroup = chartGroup;\r\n        if (!this._isChild) {\r\n            registerChart(this, this._chartGroup);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\r\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\r\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\r\n     * function or reset group or dimension after rendering, it is a good idea to\r\n     * clear the cache to make sure charts are rendered properly.\r\n     * @returns {BaseMixin}\r\n     */\r\n    expireCache () {\r\n        // do nothing in base, should be overridden by sub-function\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Attach a Legend widget to this chart. The legend widget will automatically draw legend labels\r\n     * based on the color setting and names associated with each group.\r\n     * @example\r\n     * chart.legend(new Legend().x(400).y(10).itemHeight(13).gap(5))\r\n     * @param {Legend} [legend]\r\n     * @returns {Legend|BaseMixin}\r\n     */\r\n    legend (legend) {\r\n        if (!arguments.length) {\r\n            return this._legend;\r\n        }\r\n        this._legend = legend;\r\n        this._legend.parent(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the internal numeric ID of the chart.\r\n     * @returns {String}\r\n     */\r\n    chartID () {\r\n        return this.__dcFlag__;\r\n    }\r\n\r\n    /**\r\n     * Set chart options using a configuration object. Each key in the object will cause the method of\r\n     * the same name to be called with the value to set that attribute for the chart.\r\n     * @example\r\n     * chart.options({dimension: myDimension, group: myGroup});\r\n     * @param {{}} opts\r\n     * @returns {BaseMixin}\r\n     */\r\n    options (opts) {\r\n        const applyOptions = [\r\n            'anchor',\r\n            'group',\r\n            'xAxisLabel',\r\n            'yAxisLabel',\r\n            'stack',\r\n            'title',\r\n            'point',\r\n            'getColor',\r\n            'overlayGeoJson'\r\n        ];\r\n\r\n        for (const o in opts) {\r\n            if (typeof (this[o]) === 'function') {\r\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\r\n                    this[o].apply(this, opts[o]);\r\n                } else {\r\n                    this[o].call(this, opts[o]);\r\n                }\r\n            } else {\r\n                logger.debug(`Not a valid option setter name: ${o}`);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * All dc chart instance supports the following listeners.\r\n     * Supports the following events:\r\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\r\n     * deprecated {@link BaseMixin#renderlet renderlet} method.\r\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\r\n     * * `preRender` - This listener function will be invoked before chart rendering.\r\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\r\n     * all renderlets' logic.\r\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\r\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\r\n     * including all renderlets' logic.\r\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\r\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\r\n     * @see {@link https://github.com/d3/d3-dispatch/blob/master/README.md#dispatch_on d3.dispatch.on}\r\n     * @example\r\n     * .on('renderlet', function(chart, filter){...})\r\n     * .on('pretransition', function(chart, filter){...})\r\n     * .on('preRender', function(chart){...})\r\n     * .on('postRender', function(chart){...})\r\n     * .on('preRedraw', function(chart){...})\r\n     * .on('postRedraw', function(chart){...})\r\n     * .on('filtered', function(chart, filter){...})\r\n     * .on('zoomed', function(chart, filter){...})\r\n     * @param {String} event\r\n     * @param {Function} listener\r\n     * @returns {BaseMixin}\r\n     */\r\n    on (event, listener) {\r\n        this._listeners.on(event, listener);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\r\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\r\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\r\n     * Renderlet functions take the chart instance as the only input parameter and you can\r\n     * use the dc API or use raw d3 to achieve pretty much any effect.\r\n     *\r\n     * Use {@link BaseMixin#on on} with a 'renderlet' prefix.\r\n     * Generates a random key for the renderlet, which makes it hard to remove.\r\n     * @deprecated chart.renderlet has been deprecated. Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)\r\n     * @example\r\n     * // do this instead of .renderlet(function(chart) { ... })\r\n     * chart.on(\"renderlet\", function(chart){\r\n     *     // mix of dc API and d3 manipulation\r\n     *     chart.select('g.y').style('display', 'none');\r\n     *     // its a closure so you can also access other chart variable available in the closure scope\r\n     *     moveChart.filter(chart.filter());\r\n     * });\r\n     * @param {Function} renderletFunction\r\n     * @returns {BaseMixin}\r\n     */\r\n    renderlet (renderletFunction) {\r\n        logger.warnOnce('chart.renderlet has been deprecated. Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\r\n        this.on(`renderlet.${utils.uniqueId()}`, renderletFunction);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const baseMixin = () => new BaseMixin();\r\n","import {scaleLinear, scaleOrdinal, scaleQuantize} from 'd3-scale';\r\nimport {interpolateHcl} from 'd3-interpolate';\r\nimport {max, min} from 'd3-array';\r\n\r\nimport {config} from '../core/config';\r\nimport {utils} from '../core/utils';\r\n\r\n/**\r\n * The Color Mixin is an abstract chart functional class providing universal coloring support\r\n * as a mix-in for any concrete chart implementation.\r\n * @mixin ColorMixin\r\n * @param {Object} Base\r\n * @returns {ColorMixin}\r\n */\r\nexport const ColorMixin = Base => class extends Base {\r\n    constructor () {\r\n        super();\r\n\r\n        this._colors = scaleOrdinal(config.defaultColors());\r\n\r\n        this._colorAccessor = d => this.keyAccessor()(d);\r\n        this._colorCalculator = undefined;\r\n\r\n        {\r\n            const chart = this;\r\n            // ES6: this method is called very differently from stack-mixin and derived charts\r\n            // Removing and placing it as a member method is tricky\r\n\r\n            /**\r\n                 * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\r\n                 * @method getColor\r\n                 * @memberof ColorMixin\r\n                 * @instance\r\n                 * @param {*} d\r\n                 * @param {Number} [i]\r\n                 * @returns {String}\r\n                 */\r\n            chart.getColor = function (d, i) {\r\n                return chart._colorCalculator ?\r\n                    chart._colorCalculator.call(this, d, i) :\r\n                    chart._colors(chart._colorAccessor.call(this, d, i));\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n         * Set the domain by determining the min and max values as retrieved by\r\n         * {@link ColorMixin#colorAccessor .colorAccessor} over the chart's dataset.\r\n         * @memberof ColorMixin\r\n         * @instance\r\n         * @returns {ColorMixin}\r\n         */\r\n    calculateColorDomain () {\r\n        const newDomain = [min(this.data(), this.colorAccessor()),\r\n                           max(this.data(), this.colorAccessor())];\r\n        this._colors.domain(newDomain);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Retrieve current color scale or set a new color scale. This methods accepts any function that\r\n         * operates like a d3 scale.\r\n         * @memberof ColorMixin\r\n         * @instance\r\n         * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n         * @example\r\n         * // alternate categorical scale\r\n         * chart.colors(d3.scale.category20b());\r\n         * // ordinal scale\r\n         * chart.colors(d3.scaleOrdinal().range(['red','green','blue']));\r\n         * // convenience method, the same as above\r\n         * chart.ordinalColors(['red','green','blue']);\r\n         * // set a linear scale\r\n         * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\r\n         * @param {d3.scale} [colorScale=d3.scaleOrdinal(d3.schemeCategory20c)]\r\n         * @returns {d3.scale|ColorMixin}\r\n         */\r\n    colors (colorScale) {\r\n        if (!arguments.length) {\r\n            return this._colors;\r\n        }\r\n        if (colorScale instanceof Array) {\r\n            this._colors = scaleQuantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\r\n        } else {\r\n            this._colors = typeof colorScale === 'function' ? colorScale : utils.constant(colorScale);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Convenience method to set the color scale to\r\n         * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal} with\r\n         * range `r`.\r\n         * @memberof ColorMixin\r\n         * @instance\r\n         * @param {Array<String>} r\r\n         * @returns {ColorMixin}\r\n         */\r\n    ordinalColors (r) {\r\n        return this.colors(scaleOrdinal().range(r));\r\n    }\r\n\r\n    /**\r\n         * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\r\n         * @memberof ColorMixin\r\n         * @instance\r\n         * @param {Array<Number>} r\r\n         * @returns {ColorMixin}\r\n         */\r\n    linearColors (r) {\r\n        return this.colors(scaleLinear()\r\n                .range(r)\r\n                .interpolate(interpolateHcl));\r\n    }\r\n\r\n    /**\r\n         * Set or the get color accessor function. This function will be used to map a data point in a\r\n         * crossfilter group to a color value on the color scale. The default function uses the key\r\n         * accessor.\r\n         * @memberof ColorMixin\r\n         * @instance\r\n         * @example\r\n         * // default index based color accessor\r\n         * .colorAccessor(function (d, i){return i;})\r\n         * // color accessor for a multi-value crossfilter reduction\r\n         * .colorAccessor(function (d){return d.value.absGain;})\r\n         * @param {Function} [colorAccessor]\r\n         * @returns {Function|ColorMixin}\r\n         */\r\n    colorAccessor (colorAccessor) {\r\n        if (!arguments.length) {\r\n            return this._colorAccessor;\r\n        }\r\n        this._colorAccessor = colorAccessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Set or get the current domain for the color mapping function. The domain must be supplied as an\r\n         * array.\r\n         *\r\n         * Note: previously this method accepted a callback function. Instead you may use a custom scale\r\n         * set by {@link ColorMixin#colors .colors}.\r\n         * @memberof ColorMixin\r\n         * @instance\r\n         * @param {Array<String>} [domain]\r\n         * @returns {Array<String>|ColorMixin}\r\n         */\r\n    colorDomain (domain) {\r\n        if (!arguments.length) {\r\n            return this._colors.domain();\r\n        }\r\n        this._colors.domain(domain);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Overrides the color selection algorithm, replacing it with a simple function.\r\n         *\r\n         * Normally colors will be determined by calling the `colorAccessor` to get a value, and then passing that\r\n         * value through the `colorScale`.\r\n         *\r\n         * But sometimes it is difficult to get a color scale to produce the desired effect. The `colorCalculator`\r\n         * takes the datum and index and returns a color directly.\r\n         * @memberof ColorMixin\r\n         * @instance\r\n         * @param {*} [colorCalculator]\r\n         * @returns {Function|ColorMixin}\r\n         */\r\n    colorCalculator (colorCalculator) {\r\n        if (!arguments.length) {\r\n            return this._colorCalculator || this.getColor;\r\n        }\r\n        this._colorCalculator = colorCalculator;\r\n        return this;\r\n    }\r\n};\r\n","import { ascending, descending, min, max } from 'd3-array';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport {ColorMixin} from './color-mixin';\r\nimport {transition} from '../core/core';\r\nimport {events} from '../core/events';\r\nimport {d3compat} from '../core/config';\r\n\r\n/**\r\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\r\n * @mixin BubbleMixin\r\n * @mixes ColorMixin\r\n * @param {Object} Base\r\n * @returns {BubbleMixin}\r\n */\r\nexport const BubbleMixin = Base => class extends ColorMixin(Base) {\r\n    constructor () {\r\n        super();\r\n\r\n        this._maxBubbleRelativeSize = 0.3;\r\n        this._minRadiusWithLabel = 10;\r\n        this._sortBubbleSize = false;\r\n        this._elasticRadius = false;\r\n        this._excludeElasticZero = true;\r\n\r\n        // These cane be used by derived classes as well, so member status\r\n        this.BUBBLE_NODE_CLASS = 'node';\r\n        this.BUBBLE_CLASS = 'bubble';\r\n        this.MIN_RADIUS = 10;\r\n\r\n        this.renderLabel(true);\r\n\r\n        this.data(group => {\r\n            const data = group.all();\r\n\r\n            if (this._keyboardAccessible) {\r\n                // sort based on the x value (key)\r\n                data.sort((a, b) => ascending(this.keyAccessor()(a), this.keyAccessor()(b)));\r\n            }\r\n\r\n            if (this._sortBubbleSize) {\r\n                // sort descending so smaller bubbles are on top\r\n                const radiusAccessor = this.radiusValueAccessor();\r\n                data.sort((a, b) => descending(radiusAccessor(a), radiusAccessor(b)));\r\n            }\r\n            return data;\r\n        });\r\n\r\n        this._r = scaleLinear().domain([0, 100]);\r\n    }\r\n\r\n    _rValueAccessor (d) {\r\n        return d.r;\r\n    }\r\n\r\n    /**\r\n         * Get or set the bubble radius scale. By default the bubble chart uses\r\n         * {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleLinear d3.scaleLinear().domain([0, 100])}\r\n         * as its radius scale.\r\n         * @memberof BubbleMixin\r\n         * @instance\r\n         * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n         * @param {d3.scale} [bubbleRadiusScale=d3.scaleLinear().domain([0, 100])]\r\n         * @returns {d3.scale|BubbleMixin}\r\n         */\r\n    r (bubbleRadiusScale) {\r\n        if (!arguments.length) {\r\n            return this._r;\r\n        }\r\n        this._r = bubbleRadiusScale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\r\n         * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\r\n         * @memberof BubbleMixin\r\n         * @instance\r\n         * @param {Boolean} [elasticRadius=false]\r\n         * @returns {Boolean|BubbleChart}\r\n         */\r\n    elasticRadius (elasticRadius) {\r\n        if (!arguments.length) {\r\n            return this._elasticRadius;\r\n        }\r\n        this._elasticRadius = elasticRadius;\r\n        return this;\r\n    }\r\n\r\n    calculateRadiusDomain () {\r\n        if (this._elasticRadius) {\r\n            this.r().domain([this.rMin(), this.rMax()]);\r\n        }\r\n    }\r\n\r\n    /**\r\n         * Get or set the radius value accessor function. If set, the radius value accessor function will\r\n         * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\r\n         * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\r\n         * size.\r\n         * @memberof BubbleMixin\r\n         * @instance\r\n         * @param {Function} [radiusValueAccessor]\r\n         * @returns {Function|BubbleMixin}\r\n         */\r\n    radiusValueAccessor (radiusValueAccessor) {\r\n        if (!arguments.length) {\r\n            return this._rValueAccessor;\r\n        }\r\n        this._rValueAccessor = radiusValueAccessor;\r\n        return this;\r\n    }\r\n\r\n    rMin () {\r\n        let values = this.data().map(this.radiusValueAccessor());\r\n        if(this._excludeElasticZero) {\r\n            values = values.filter(value => value > 0);\r\n        }\r\n        return min(values);\r\n    }\r\n\r\n    rMax () {\r\n        return max(this.data(), e => this.radiusValueAccessor()(e));\r\n    }\r\n\r\n    bubbleR (d) {\r\n        const value = this.radiusValueAccessor()(d);\r\n        let r = this.r()(value);\r\n        if (isNaN(r) || value <= 0) {\r\n            r = 0;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    _labelFunction (d) {\r\n        return this.label()(d);\r\n    }\r\n\r\n    _shouldLabel (d) {\r\n        return (this.bubbleR(d) > this._minRadiusWithLabel);\r\n    }\r\n\r\n    _labelOpacity (d) {\r\n        return this._shouldLabel(d) ? 1 : 0;\r\n    }\r\n\r\n    _labelPointerEvent (d) {\r\n        return this._shouldLabel(d) ? 'all' : 'none';\r\n    }\r\n\r\n    _doRenderLabel (bubbleGEnter) {\r\n        if (this.renderLabel()) {\r\n            let label = bubbleGEnter.select('text');\r\n\r\n            if (label.empty()) {\r\n                label = bubbleGEnter.append('text')\r\n                        .attr('text-anchor', 'middle')\r\n                        .attr('dy', '.3em')\r\n                        .on('click', d3compat.eventHandler(d => this.onClick(d)));\r\n            }\r\n\r\n            label\r\n                    .attr('opacity', 0)\r\n                    .attr('pointer-events', d => this._labelPointerEvent(d))\r\n                    .text(d => this._labelFunction(d));\r\n            transition(label, this.transitionDuration(), this.transitionDelay())\r\n                    .attr('opacity', d => this._labelOpacity(d));\r\n        }\r\n    }\r\n\r\n    doUpdateLabels (bubbleGEnter) {\r\n        if (this.renderLabel()) {\r\n            const labels = bubbleGEnter.select('text')\r\n                    .attr('pointer-events', d => this._labelPointerEvent(d))\r\n                    .text(d => this._labelFunction(d));\r\n            transition(labels, this.transitionDuration(), this.transitionDelay())\r\n                    .attr('opacity', d => this._labelOpacity(d));\r\n        }\r\n    }\r\n\r\n    _titleFunction (d) {\r\n        return this.title()(d);\r\n    }\r\n\r\n    _doRenderTitles (g) {\r\n        if (this.renderTitle()) {\r\n            const title = g.select('title');\r\n\r\n            if (title.empty()) {\r\n                g.append('title').text(d => this._titleFunction(d));\r\n            }\r\n        }\r\n    }\r\n\r\n    doUpdateTitles (g) {\r\n        if (this.renderTitle()) {\r\n            g.select('title').text(d => this._titleFunction(d));\r\n        }\r\n    }\r\n\r\n    /**\r\n         * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\r\n         * bubbles will be sorted by their radius, with smaller bubbles in front.\r\n         * @memberof BubbleChart\r\n         * @instance\r\n         * @param {Boolean} [sortBubbleSize=false]\r\n         * @returns {Boolean|BubbleChart}\r\n         */\r\n    sortBubbleSize (sortBubbleSize) {\r\n        if (!arguments.length) {\r\n            return this._sortBubbleSize;\r\n        }\r\n        this._sortBubbleSize = sortBubbleSize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Get or set the minimum radius. This will be used to initialize the radius scale's range.\r\n         * @memberof BubbleMixin\r\n         * @instance\r\n         * @param {Number} [radius=10]\r\n         * @returns {Number|BubbleMixin}\r\n         */\r\n    minRadius (radius) {\r\n        if (!arguments.length) {\r\n            return this.MIN_RADIUS;\r\n        }\r\n        this.MIN_RADIUS = radius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\r\n         * then no label will be rendered.\r\n         * @memberof BubbleMixin\r\n         * @instance\r\n         * @param {Number} [radius=10]\r\n         * @returns {Number|BubbleMixin}\r\n         */\r\n\r\n    minRadiusWithLabel (radius) {\r\n        if (!arguments.length) {\r\n            return this._minRadiusWithLabel;\r\n        }\r\n        this._minRadiusWithLabel = radius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\r\n         * when the difference in radius between bubbles is too great.\r\n         * @memberof BubbleMixin\r\n         * @instance\r\n         * @param {Number} [relativeSize=0.3]\r\n         * @returns {Number|BubbleMixin}\r\n         */\r\n    maxBubbleRelativeSize (relativeSize) {\r\n        if (!arguments.length) {\r\n            return this._maxBubbleRelativeSize;\r\n        }\r\n        this._maxBubbleRelativeSize = relativeSize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Should the chart exclude zero when calculating elastic bubble radius?\r\n     * @memberof BubbleMixin\r\n     * @instance\r\n     * @param  {Boolean} [excludeZero=true]\r\n     * @returns {Boolean|BubbleMixin}\r\n     */\r\n    excludeElasticZero (excludeZero) {\r\n        if (!arguments.length) {\r\n            return this._excludeElasticZero;\r\n        }\r\n        this._excludeElasticZero = excludeZero;\r\n        return this;\r\n    }\r\n\r\n    fadeDeselectedArea (selection) {\r\n        if (this.hasFilter()) {\r\n            const chart = this;\r\n            this.selectAll(`g.${chart.BUBBLE_NODE_CLASS}`).each(function (d) {\r\n                if (chart.isSelectedNode(d)) {\r\n                    chart.highlightSelected(this);\r\n                } else {\r\n                    chart.fadeDeselected(this);\r\n                }\r\n            });\r\n        } else {\r\n            const chart = this;\r\n            this.selectAll(`g.${chart.BUBBLE_NODE_CLASS}`).each(function () {\r\n                chart.resetHighlight(this);\r\n            });\r\n        }\r\n    }\r\n\r\n    isSelectedNode (d) {\r\n        return this.hasFilter(d.key);\r\n    }\r\n\r\n    onClick (d) {\r\n        const filter = d.key;\r\n        events.trigger(() => {\r\n            this.filter(filter);\r\n            this.redrawGroup();\r\n        });\r\n    }\r\n};\r\n","import {sum} from 'd3-array';\r\n\r\n/**\r\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\r\n * Row and Pie Charts.\r\n *\r\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\r\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\r\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\r\n * others* element is clicked.\r\n * @mixin CapMixin\r\n * @param {Object} Base\r\n * @returns {CapMixin}\r\n */\r\nexport const CapMixin = Base => class extends Base {\r\n    constructor () {\r\n        super();\r\n\r\n        this._cap = Infinity;\r\n        this._takeFront = true;\r\n        this._othersLabel = 'Others';\r\n\r\n        this._othersGrouper = (topItems, restItems) => {\r\n            const restItemsSum = sum(restItems, this.valueAccessor()),\r\n                restKeys = restItems.map(this.keyAccessor());\r\n            if (restItemsSum > 0) {\r\n                return topItems.concat([{\r\n                    others: restKeys,\r\n                    key: this.othersLabel(),\r\n                    value: restItemsSum\r\n                }]);\r\n            }\r\n            return topItems;\r\n        };\r\n\r\n        // emulate old group.top(N) ordering\r\n        this.ordering(kv => -kv.value);\r\n\r\n        // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\r\n        // whether top means front or back depends on takeFront\r\n        this.data(group => {\r\n            if (this._cap === Infinity) {\r\n                return this._computeOrderedGroups(group.all());\r\n            } else {\r\n                let items = group.all(), rest;\r\n                items = this._computeOrderedGroups(items); // sort by baseMixin.ordering\r\n\r\n                if (this._cap) {\r\n                    if (this._takeFront) {\r\n                        rest = items.slice(this._cap);\r\n                        items = items.slice(0, this._cap);\r\n                    } else {\r\n                        const start = Math.max(0, items.length - this._cap);\r\n                        rest = items.slice(0, start);\r\n                        items = items.slice(start);\r\n                    }\r\n                }\r\n\r\n                if (this._othersGrouper) {\r\n                    return this._othersGrouper(items, rest);\r\n                }\r\n                return items;\r\n            }\r\n        });\r\n    }\r\n\r\n    cappedKeyAccessor (d, i) {\r\n        if (d.others) {\r\n            return d.key;\r\n        }\r\n        return this.keyAccessor()(d, i);\r\n    }\r\n\r\n    cappedValueAccessor (d, i) {\r\n        if (d.others) {\r\n            return d.value;\r\n        }\r\n        return this.valueAccessor()(d, i);\r\n    }\r\n\r\n    /**\r\n         * Get or set the count of elements to that will be included in the cap. If there is an\r\n         * {@link CapMixin#othersGrouper othersGrouper}, any further elements will be combined in an\r\n         * extra element with its name determined by {@link CapMixin#othersLabel othersLabel}.\r\n         *\r\n         * As of dc.js 2.1 and onward, the capped charts use\r\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\r\n         * and {@link BaseMixin#ordering BaseMixin.ordering()} to determine the order of\r\n         * elements. Then `cap` and {@link CapMixin#takeFront takeFront} determine how many elements\r\n         * to keep, from which end of the resulting array.\r\n         *\r\n         * **Migration note:** Up through dc.js 2.0.*, capping used\r\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\r\n         * which selects the largest items according to\r\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\r\n         * The chart then sorted the items according to {@link BaseMixin#ordering baseMixin.ordering()}.\r\n         * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\r\n         * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\r\n         *\r\n         * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\r\n         * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\r\n         *\r\n         * If you want to cap by one ordering but sort by another, you can still do this by\r\n         * specifying your own {@link BaseMixin#data `.data()`} callback. For details, see the example\r\n         * {@link https://dc-js.github.io/dc.js/examples/cap-and-sort-differently.html Cap and Sort Differently}.\r\n         * @memberof CapMixin\r\n         * @instance\r\n         * @param {Number} [count=Infinity]\r\n         * @returns {Number|CapMixin}\r\n         */\r\n    cap (count) {\r\n        if (!arguments.length) {\r\n            return this._cap;\r\n        }\r\n        this._cap = count;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Get or set the direction of capping. If set, the chart takes the first\r\n         * {@link CapMixin#cap cap} elements from the sorted array of elements; otherwise\r\n         * it takes the last `cap` elements.\r\n         * @memberof CapMixin\r\n         * @instance\r\n         * @param {Boolean} [takeFront=true]\r\n         * @returns {Boolean|CapMixin}\r\n         */\r\n    takeFront (takeFront) {\r\n        if (!arguments.length) {\r\n            return this._takeFront;\r\n        }\r\n        this._takeFront = takeFront;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Get or set the label for *Others* slice when slices cap is specified.\r\n         * @memberof CapMixin\r\n         * @instance\r\n         * @param {String} [label=\"Others\"]\r\n         * @returns {String|CapMixin}\r\n         */\r\n    othersLabel (label) {\r\n        if (!arguments.length) {\r\n            return this._othersLabel;\r\n        }\r\n        this._othersLabel = label;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n         * Get or set the grouper function that will perform the insertion of data for the *Others* slice\r\n         * if the slices cap is specified. If set to a falsy value, no others will be added.\r\n         *\r\n         * The grouper function takes an array of included (\"top\") items, and an array of the rest of\r\n         * the items. By default the grouper function computes the sum of the rest.\r\n         * @memberof CapMixin\r\n         * @instance\r\n         * @example\r\n         * // Do not show others\r\n         * chart.othersGrouper(null);\r\n         * // Default others grouper\r\n         * chart.othersGrouper(function (topItems, restItems) {\r\n         *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\r\n         *         restKeys = restItems.map(_chart.keyAccessor());\r\n         *     if (restItemsSum > 0) {\r\n         *         return topItems.concat([{\r\n         *             others: restKeys,\r\n         *             key: _chart.othersLabel(),\r\n         *             value: restItemsSum\r\n         *         }]);\r\n         *     }\r\n         *     return topItems;\r\n         * });\r\n         * @param {Function} [grouperFunction]\r\n         * @returns {Function|CapMixin}\r\n         */\r\n    othersGrouper (grouperFunction) {\r\n        if (!arguments.length) {\r\n            return this._othersGrouper;\r\n        }\r\n        this._othersGrouper = grouperFunction;\r\n        return this;\r\n    }\r\n\r\n    onClick (d) {\r\n        if (d.others) {\r\n            this.filter([d.others]);\r\n        }\r\n        super.onClick(d);\r\n    }\r\n};\r\n","import {BaseMixin} from './base-mixin';\r\n\r\n/**\r\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\r\n * Charts.\r\n * @mixin MarginMixin\r\n * @param {Object} Base\r\n * @returns {MarginMixin}\r\n */\r\nexport class MarginMixin extends BaseMixin {\r\n    constructor () {\r\n        super();\r\n\r\n        this._margin = {top: 10, right: 50, bottom: 30, left: 30};\r\n    }\r\n\r\n    /**\r\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\r\n     * an associative Javascript array.\r\n     * @memberof MarginMixin\r\n     * @instance\r\n     * @example\r\n     * var leftMargin = chart.margins().left; // 30 by default\r\n     * chart.margins().left = 50;\r\n     * leftMargin = chart.margins().left; // now 50\r\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\r\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|MarginMixin}\r\n     */\r\n    margins (margins) {\r\n        if (!arguments.length) {\r\n            return this._margin;\r\n        }\r\n        this._margin = margins;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Effective width of the chart excluding margins (in pixels).\r\n     *\r\n     * @returns {number}\r\n     */\r\n    effectiveWidth () {\r\n        return this.width() - this.margins().left - this.margins().right;\r\n    }\r\n\r\n    /**\r\n     * Effective height of the chart excluding margins (in pixels).\r\n     *\r\n     * @returns {number}\r\n     */\r\n    effectiveHeight () {\r\n        return this.height() - this.margins().top - this.margins().bottom;\r\n    }\r\n}\r\n","import {schemeCategory10} from 'd3-scale-chromatic';\r\nimport {timeDay} from 'd3-time';\r\nimport {max, min} from 'd3-array';\r\nimport {scaleBand, scaleLinear, scaleOrdinal} from 'd3-scale';\r\nimport {axisTop, axisBottom, axisLeft, axisRight} from 'd3-axis';\r\nimport {zoom, zoomIdentity} from 'd3-zoom';\r\nimport {brushX} from 'd3-brush';\r\n\r\nimport {ColorMixin} from './color-mixin';\r\nimport {MarginMixin} from './margin-mixin';\r\nimport {optionalTransition, transition} from '../core/core';\r\nimport {units} from '../core/units';\r\nimport {constants} from '../core/constants';\r\nimport {utils} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\nimport {logger} from '../core/logger';\r\nimport {filters} from '../core/filters';\r\nimport {events} from '../core/events';\r\n\r\nconst GRID_LINE_CLASS = 'grid-line';\r\nconst HORIZONTAL_CLASS = 'horizontal';\r\nconst VERTICAL_CLASS = 'vertical';\r\nconst Y_AXIS_LABEL_CLASS = 'y-axis-label';\r\nconst X_AXIS_LABEL_CLASS = 'x-axis-label';\r\nconst CUSTOM_BRUSH_HANDLE_CLASS = 'custom-brush-handle';\r\nconst DEFAULT_AXIS_LABEL_PADDING = 12;\r\n\r\n/**\r\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\r\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\r\n * @mixin CoordinateGridMixin\r\n * @mixes ColorMixin\r\n * @mixes MarginMixin\r\n */\r\nexport class CoordinateGridMixin extends ColorMixin(MarginMixin) {\r\n    constructor () {\r\n        super();\r\n\r\n        this.colors(scaleOrdinal(schemeCategory10));\r\n        this._mandatoryAttributes().push('x');\r\n        this._parent = undefined;\r\n        this._g = undefined;\r\n        this._chartBodyG = undefined;\r\n\r\n        this._x = undefined;\r\n        this._origX = undefined; // Will hold original scale in case of zoom\r\n        this._xOriginalDomain = undefined;\r\n        this._xAxis = null;\r\n        this._xUnits = units.integers;\r\n        this._xAxisPadding = 0;\r\n        this._xAxisPaddingUnit = timeDay;\r\n        this._xElasticity = false;\r\n        this._xAxisLabel = undefined;\r\n        this._xAxisLabelPadding = 0;\r\n        this._lastXDomain = undefined;\r\n\r\n        this._y = undefined;\r\n        this._yAxis = null;\r\n        this._yAxisPadding = 0;\r\n        this._yElasticity = false;\r\n        this._yAxisLabel = undefined;\r\n        this._yAxisLabelPadding = 0;\r\n\r\n        this._brush = brushX();\r\n\r\n        this._gBrush = undefined;\r\n        this._brushOn = true;\r\n        this._parentBrushOn = false;\r\n        this._round = undefined;\r\n        this._ignoreBrushEvents = false; // ignore when carrying out programmatic brush operations\r\n\r\n        this._renderHorizontalGridLine = false;\r\n        this._renderVerticalGridLine = false;\r\n\r\n        this._resizing = false;\r\n        this._unitCount = undefined;\r\n\r\n        this._zoomScale = [1, Infinity];\r\n        this._zoomOutRestrict = true;\r\n\r\n        this._zoom = zoom().on('zoom', d3compat.eventHandler((d, evt) => this._onZoom(evt)));\r\n        this._nullZoom = zoom().on('zoom', null);\r\n        this._hasBeenMouseZoomable = false;\r\n        this._ignoreZoomEvents = false; // ignore when carrying out programmatic zoom operations\r\n\r\n        this._rangeChart = undefined;\r\n        this._focusChart = undefined;\r\n\r\n        this._mouseZoomable = false;\r\n        this._clipPadding = 0;\r\n\r\n        this._fOuterRangeBandPadding = 0.5;\r\n        this._fRangeBandPadding = 0;\r\n\r\n        this._useRightYAxis = false;\r\n        this._useTopXAxis = false;\r\n    }\r\n\r\n    /**\r\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\r\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\r\n     * with {@link CoordinateGridMixin+x .x()} or {@link CoordinateGridMixin#y .y()}, and has\r\n     * no effect on elastic scales.)\r\n     * @returns {CoordinateGridMixin}\r\n     */\r\n    rescale () {\r\n        this._unitCount = undefined;\r\n        this._resizing = true;\r\n        return this;\r\n    }\r\n\r\n    resizing (resizing) {\r\n        if (!arguments.length) {\r\n            return this._resizing;\r\n        }\r\n        this._resizing = resizing;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the range selection chart associated with this instance. Setting the range selection\r\n     * chart using this function will automatically update its selection brush when the current chart\r\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\r\n     * chart hence zoom in when range brush updates.\r\n     *\r\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\r\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\r\n     * the focus chart.\r\n     *\r\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\r\n     * @param {CoordinateGridMixin} [rangeChart]\r\n     * @returns {CoordinateGridMixin}\r\n     */\r\n    rangeChart (rangeChart) {\r\n        if (!arguments.length) {\r\n            return this._rangeChart;\r\n        }\r\n        this._rangeChart = rangeChart;\r\n        this._rangeChart.focusChart(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the scale extent for mouse zooms.\r\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\r\n     * @returns {Array<Number|Date>|CoordinateGridMixin}\r\n     */\r\n    zoomScale (extent) {\r\n        if (!arguments.length) {\r\n            return this._zoomScale;\r\n        }\r\n        this._zoomScale = extent;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\r\n     * @param {Boolean} [zoomOutRestrict=true]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    zoomOutRestrict (zoomOutRestrict) {\r\n        if (!arguments.length) {\r\n            return this._zoomOutRestrict;\r\n        }\r\n        this._zoomOutRestrict = zoomOutRestrict;\r\n        return this;\r\n    }\r\n\r\n    _generateG (parent) {\r\n        if (parent === undefined) {\r\n            this._parent = this.svg();\r\n        } else {\r\n            this._parent = parent;\r\n        }\r\n\r\n        const href = window.location.href.split('#')[0];\r\n\r\n        this._g = this._parent.append('g');\r\n\r\n        this._chartBodyG = this._g.append('g').attr('class', 'chart-body')\r\n            .attr('transform', `translate(${this.margins().left}, ${this.margins().top})`)\r\n            .attr('clip-path', `url(${href}#${this._getClipPathId()})`);\r\n\r\n        return this._g;\r\n    }\r\n\r\n    /**\r\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\r\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\r\n     * by dc.js internals, and resetting it might produce unpredictable result.\r\n     * @param {SVGElement} [gElement]\r\n     * @returns {SVGElement|CoordinateGridMixin}\r\n     */\r\n    g (gElement) {\r\n        if (!arguments.length) {\r\n            return this._g;\r\n        }\r\n        this._g = gElement;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\r\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\r\n     * the range selection brush on the associated range selector chart.\r\n     * @param {Boolean} [mouseZoomable=false]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    mouseZoomable (mouseZoomable) {\r\n        if (!arguments.length) {\r\n            return this._mouseZoomable;\r\n        }\r\n        this._mouseZoomable = mouseZoomable;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the svg group for the chart body.\r\n     * @param {SVGElement} [chartBodyG]\r\n     * @returns {SVGElement}\r\n     */\r\n    chartBodyG (chartBodyG) {\r\n        if (!arguments.length) {\r\n            return this._chartBodyG;\r\n        }\r\n        this._chartBodyG = chartBodyG;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Get or set the x scale. The x scale can be any d3\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale} or\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales ordinal scale}\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @example\r\n     * // set x to a linear scale\r\n     * chart.x(d3.scaleLinear().domain([-2500, 2500]))\r\n     * // set x to a time scale to generate histogram\r\n     * chart.x(d3.scaleTime().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\r\n     * @param {d3.scale} [xScale]\r\n     * @returns {d3.scale|CoordinateGridMixin}\r\n     */\r\n    x (xScale) {\r\n        if (!arguments.length) {\r\n            return this._x;\r\n        }\r\n        this._x = xScale;\r\n        this._xOriginalDomain = this._x.domain();\r\n        this.rescale();\r\n        return this;\r\n    }\r\n\r\n    xOriginalDomain () {\r\n        return this._xOriginalDomain;\r\n    }\r\n\r\n    /**\r\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\r\n     * the number of data projections on the x axis such as the number of bars for a bar chart or the\r\n     * number of dots for a line chart.\r\n     *\r\n     * This function is expected to return a Javascript array of all data points on the x axis, or\r\n     * the number of points on the axis. d3 time range functions [d3.timeDays, d3.timeMonths, and\r\n     * d3.timeYears](https://github.com/d3/d3-time/blob/master/README.md#intervals) are all valid\r\n     * xUnits functions.\r\n     *\r\n     * dc.js also provides a few units function, see the {@link units Units Namespace} for\r\n     * a list of built-in units functions.\r\n     *\r\n     * Note that as of dc.js 3.0, `units.ordinal` is not a real function, because it is not\r\n     * possible to define this function compliant with the d3 range functions. It was already a\r\n     * magic value which caused charts to behave differently, and now it is completely so.\r\n     * @example\r\n     * // set x units to count days\r\n     * chart.xUnits(d3.timeDays);\r\n     * // set x units to count months\r\n     * chart.xUnits(d3.timeMonths);\r\n     *\r\n     * // A custom xUnits function can be used as long as it follows the following interface:\r\n     * // units in integer\r\n     * function(start, end) {\r\n     *      // simply calculates how many integers in the domain\r\n     *      return Math.abs(end - start);\r\n     * }\r\n     *\r\n     * // fixed units\r\n     * function(start, end) {\r\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\r\n     *      return 1000;\r\n     * }\r\n     * @param {Function} [xUnits=units.integers]\r\n     * @returns {Function|CoordinateGridMixin}\r\n     */\r\n    xUnits (xUnits) {\r\n        if (!arguments.length) {\r\n            return this._xUnits;\r\n        }\r\n        this._xUnits = xUnits;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\r\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\r\n     * {@link https://github.com/d3/d3-axis/blob/master/README.md#axisBottom d3 bottom axis object};\r\n     * therefore it supports any valid d3 axisBottom manipulation.\r\n     *\r\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\r\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\r\n     * it returns the axis, not the chart,\r\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\r\n         * so attempting to call chart functions after calling `.xAxis()` will fail}.\r\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md#axisBottom d3.axisBottom}\r\n     * @example\r\n     * // customize x axis tick format\r\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\r\n     * // customize x axis tick values\r\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\r\n     * @param {d3.axis} [xAxis=d3.axisBottom()]\r\n     * @returns {d3.axis|CoordinateGridMixin}\r\n     */\r\n    xAxis (xAxis) {\r\n        if (!arguments.length) {\r\n            if (!this._xAxis) {\r\n                this._xAxis = this._createXAxis();\r\n            }\r\n            return this._xAxis;\r\n        }\r\n        this._xAxis = xAxis;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\r\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\r\n     * @param {Boolean} [elasticX=false]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    elasticX (elasticX) {\r\n        if (!arguments.length) {\r\n            return this._xElasticity;\r\n        }\r\n        this._xElasticity = elasticX;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\r\n     * axis if elasticX is turned on; otherwise it is ignored.\r\n     *\r\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\r\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\r\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\r\n     * xAxisPaddingUnit variable.\r\n     * @param {Number|String} [padding=0]\r\n     * @returns {Number|String|CoordinateGridMixin}\r\n     */\r\n    xAxisPadding (padding) {\r\n        if (!arguments.length) {\r\n            return this._xAxisPadding;\r\n        }\r\n        this._xAxisPadding = padding;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\r\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\r\n     * otherwise it is ignored.\r\n     *\r\n     * The padding unit should be a\r\n     * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#self._interval).\r\n     * For backward compatibility with dc.js 2.0, it can also be the name of a d3 time interval\r\n     * ('day', 'hour', etc). Available arguments are the\r\n     * [d3 time intervals](https://github.com/d3/d3-time/blob/master/README.md#intervals d3.timeInterval).\r\n     * @param {String} [unit=d3.timeDay]\r\n     * @returns {String|CoordinateGridMixin}\r\n     */\r\n    xAxisPaddingUnit (unit) {\r\n        if (!arguments.length) {\r\n            return this._xAxisPaddingUnit;\r\n        }\r\n        this._xAxisPaddingUnit = unit;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of units displayed on the x axis. If the x axis is ordinal (`xUnits` is\r\n     * `units.ordinal`), this is the number of items in the domain of the x scale. Otherwise, the\r\n     * x unit count is calculated using the {@link CoordinateGridMixin#xUnits xUnits} function.\r\n     * @returns {Number}\r\n     */\r\n    xUnitCount () {\r\n        if (this._unitCount === undefined) {\r\n            if (this.isOrdinal()) {\r\n                // In this case it number of items in domain\r\n                this._unitCount = this.x().domain().length;\r\n            } else {\r\n                this._unitCount = this.xUnits()(this.x().domain()[0], this.x().domain()[1]);\r\n\r\n                // Sometimes xUnits() may return an array while sometimes directly the count\r\n                if (this._unitCount instanceof Array) {\r\n                    this._unitCount = this._unitCount.length;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._unitCount;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\r\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\r\n     * chart.\r\n     * @param {Boolean} [useRightYAxis=false]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    useRightYAxis (useRightYAxis) {\r\n        if (!arguments.length) {\r\n            return this._useRightYAxis;\r\n        }\r\n\r\n        // We need to warn if value is changing after self._yAxis was created\r\n        if (this._useRightYAxis !== useRightYAxis && this._yAxis) {\r\n            logger.warn('Value of useRightYAxis has been altered, after yAxis was created. ' +\r\n                'You might get unexpected yAxis behavior. ' +\r\n                'Make calls to useRightYAxis sooner in your chart creation process.');\r\n        }\r\n\r\n        this._useRightYAxis = useRightYAxis;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets whether the chart should be drawn with a top axis instead of a bottom axis. When\r\n     * used with a chart in a composite chart, allows both top and bottom X axes to be shown on a\r\n     * chart.\r\n     * @param {Boolean} [useTopXAxis=false]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    useTopXAxis (useTopXAxis) {\r\n        if (!arguments.length) {\r\n            return this._useTopXAxis;\r\n        }\r\n\r\n        // We need to warn if value is changing after self._yAxis was created\r\n        if (this._useTopXAxis !== useTopXAxis && this._xAxis) {\r\n            logger.warn('Value of useTopXAxis has been altered, after xAxis was created. ' +\r\n                'You might get unexpected yAxis behavior. ' +\r\n                'Make calls to useTopXAxis sooner in your chart creation process.');\r\n        }\r\n\r\n        this._useTopXAxis = useTopXAxis;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the chart is using ordinal xUnits ({@link units.ordinal units.ordinal}, or false\r\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\r\n     * trigger the appropriate logic.\r\n     * @returns {Boolean}\r\n     */\r\n    isOrdinal () {\r\n        return this.xUnits() === units.ordinal;\r\n    }\r\n\r\n    _useOuterPadding () {\r\n        return true;\r\n    }\r\n\r\n    _ordinalXDomain () {\r\n        const groups = this._computeOrderedGroups(this.data());\r\n        return groups.map(this.keyAccessor());\r\n    }\r\n\r\n    _createXAxis () {\r\n        return this._useTopXAxis ? axisTop() : axisBottom();\r\n    }\r\n\r\n    // eslint-disable-next-line complexity\r\n    _prepareXAxis (g, render) {\r\n        if (!this.isOrdinal()) {\r\n            if (this.elasticX()) {\r\n                this._x.domain([this.xAxisMin(), this.xAxisMax()]);\r\n            }\r\n        } else { // self._chart.isOrdinal()\r\n            // D3v4 - Ordinal charts would need scaleBand\r\n            // bandwidth is a method in scaleBand\r\n            // (https://github.com/d3/d3-scale/blob/master/README.md#scaleBand)\r\n            if (!this._x.bandwidth) {\r\n                // If self._x is not a scaleBand create a new scale and\r\n                // copy the original domain to the new scale\r\n                logger.warn('For compatibility with d3v4+, dc.js d3.0 ordinal bar/line/bubble charts need ' +\r\n                    'd3.scaleBand() for the x scale, instead of d3.scaleOrdinal(). ' +\r\n                    'Replacing .x() with a d3.scaleBand with the same domain - ' +\r\n                    'make the same change in your code to avoid this warning!');\r\n                this._x = scaleBand().domain(this._x.domain());\r\n            }\r\n\r\n            if (this.elasticX() || this._x.domain().length === 0) {\r\n                this._x.domain(this._ordinalXDomain());\r\n            }\r\n        }\r\n\r\n        // has the domain changed?\r\n        const xdom = this._x.domain();\r\n        if (render || !utils.arraysEqual(this._lastXDomain, xdom)) {\r\n            this.rescale();\r\n        }\r\n        this._lastXDomain = xdom;\r\n\r\n        // please can't we always use rangeBands for bar charts?\r\n        if (this.isOrdinal()) {\r\n            this._x.range([0, this.xAxisLength()])\r\n                .paddingInner(this._fRangeBandPadding)\r\n                .paddingOuter(this._useOuterPadding() ? this._fOuterRangeBandPadding : 0);\r\n        } else {\r\n            this._x.range([0, this.xAxisLength()]);\r\n        }\r\n\r\n        if (!this._xAxis) {\r\n            this._xAxis = this._createXAxis()\r\n        }\r\n\r\n        this._xAxis = this._xAxis.scale(this.x());\r\n\r\n        this._renderVerticalGridLines(g);\r\n    }\r\n\r\n    renderXAxis (g) {\r\n        let axisXG = g.select('g.x');\r\n\r\n        if (axisXG.empty()) {\r\n            axisXG = g.append('g')\r\n                .attr('class', 'axis x')\r\n                .attr('transform', `translate(${this.margins().left},${this._xAxisY()})`);\r\n        }\r\n\r\n        let axisXLab = g.select(`text.${X_AXIS_LABEL_CLASS}`);\r\n        const axisXLabY = this._useTopXAxis ? this._xAxisLabelPadding : (this.height() - this._xAxisLabelPadding);\r\n        if (axisXLab.empty() && this.xAxisLabel()) {\r\n            axisXLab = g.append('text')\r\n                .attr('class', X_AXIS_LABEL_CLASS)\r\n                .attr('transform', `translate(${this.margins().left + this.xAxisLength() / 2},${axisXLabY})`)\r\n                .attr('text-anchor', 'middle');\r\n        }\r\n        if (this.xAxisLabel() && axisXLab.text() !== this.xAxisLabel()) {\r\n            axisXLab.text(this.xAxisLabel());\r\n        }\r\n\r\n        transition(axisXG, this.transitionDuration(), this.transitionDelay())\r\n            .attr('transform', `translate(${this.margins().left},${this._xAxisY()})`)\r\n            .call(this._xAxis);\r\n        transition(axisXLab, this.transitionDuration(), this.transitionDelay())\r\n            .attr('transform', `translate(${this.margins().left + this.xAxisLength() / 2},${axisXLabY})`);\r\n    }\r\n\r\n    _renderVerticalGridLines (g) {\r\n        let gridLineG = g.select(`g.${VERTICAL_CLASS}`);\r\n\r\n        if (this._renderVerticalGridLine) {\r\n            if (gridLineG.empty()) {\r\n                gridLineG = g.insert('g', ':first-child')\r\n                    .attr('class', `${GRID_LINE_CLASS} ${VERTICAL_CLASS}`)\r\n                    .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\r\n            }\r\n\r\n            const ticks = this._xAxis.tickValues() ? this._xAxis.tickValues() :\r\n                (typeof this._x.ticks === 'function' ? this._x.ticks.apply(this._x, this._xAxis.tickArguments()) : this._x.domain());\r\n\r\n            const lines = gridLineG.selectAll('line')\r\n                .data(ticks);\r\n\r\n            // enter\r\n            const linesGEnter = lines.enter()\r\n                .append('line')\r\n                .attr('x1', d => this._x(d))\r\n                .attr('y1', this._xAxisY() - this.margins().top)\r\n                .attr('x2', d => this._x(d))\r\n                .attr('y2', 0)\r\n                .attr('opacity', 0);\r\n            transition(linesGEnter, this.transitionDuration(), this.transitionDelay())\r\n                .attr('opacity', 0.5);\r\n\r\n            // update\r\n            transition(lines, this.transitionDuration(), this.transitionDelay())\r\n                .attr('x1', d => this._x(d))\r\n                .attr('y1', this._xAxisY() - this.margins().top)\r\n                .attr('x2', d => this._x(d))\r\n                .attr('y2', 0);\r\n\r\n            // exit\r\n            lines.exit().remove();\r\n        } else {\r\n            gridLineG.selectAll('line').remove();\r\n        }\r\n    }\r\n\r\n    _xAxisY () {\r\n        return this._useTopXAxis ? this.margins().top : this.height() - this.margins().bottom;\r\n    }\r\n\r\n    xAxisLength () {\r\n        return this.effectiveWidth();\r\n    }\r\n\r\n    /**\r\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\r\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\r\n     * @param {String} [labelText]\r\n     * @param {Number} [padding=12]\r\n     * @returns {String}\r\n     */\r\n    xAxisLabel (labelText, padding) {\r\n        if (!arguments.length) {\r\n            return this._xAxisLabel;\r\n        }\r\n        this._xAxisLabel = labelText;\r\n        this.margins().bottom -= this._xAxisLabelPadding;\r\n        this._xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\r\n        this.margins().bottom += this._xAxisLabelPadding;\r\n        return this;\r\n    }\r\n\r\n    _createYAxis () {\r\n        return this._useRightYAxis ? axisRight() : axisLeft();\r\n    }\r\n\r\n    _prepareYAxis (g) {\r\n        if (this._y === undefined || this.elasticY()) {\r\n            if (this._y === undefined) {\r\n                this._y = scaleLinear();\r\n            }\r\n            const _min = this.yAxisMin() || 0;\r\n            const _max = this.yAxisMax() || 0;\r\n            this._y.domain([_min, _max]).rangeRound([this.yAxisHeight(), 0]);\r\n        }\r\n\r\n        this._y.range([this.yAxisHeight(), 0]);\r\n\r\n        if (!this._yAxis) {\r\n            this._yAxis = this._createYAxis();\r\n        }\r\n\r\n        this._yAxis.scale(this._y);\r\n\r\n        this._renderHorizontalGridLinesForAxis(g, this._y, this._yAxis);\r\n    }\r\n\r\n    renderYAxisLabel (axisClass, text, rotation, labelXPosition) {\r\n        labelXPosition = labelXPosition || this._yAxisLabelPadding;\r\n\r\n        let axisYLab = this.g().select(`text.${Y_AXIS_LABEL_CLASS}.${axisClass}-label`);\r\n        const labelYPosition = (this.margins().top + this.yAxisHeight() / 2);\r\n        if (axisYLab.empty() && text) {\r\n            axisYLab = this.g().append('text')\r\n                .attr('transform', `translate(${labelXPosition},${labelYPosition}),rotate(${rotation})`)\r\n                .attr('class', `${Y_AXIS_LABEL_CLASS} ${axisClass}-label`)\r\n                .attr('text-anchor', 'middle')\r\n                .text(text);\r\n        }\r\n        if (text && axisYLab.text() !== text) {\r\n            axisYLab.text(text);\r\n        }\r\n        transition(axisYLab, this.transitionDuration(), this.transitionDelay())\r\n            .attr('transform', `translate(${labelXPosition},${labelYPosition}),rotate(${rotation})`);\r\n    }\r\n\r\n    renderYAxisAt (axisClass, axis, position) {\r\n        let axisYG = this.g().select(`g.${axisClass}`);\r\n        if (axisYG.empty()) {\r\n            axisYG = this.g().append('g')\r\n                .attr('class', `axis ${axisClass}`)\r\n                .attr('transform', `translate(${position},${this.margins().top})`);\r\n        }\r\n\r\n        transition(axisYG, this.transitionDuration(), this.transitionDelay())\r\n            .attr('transform', `translate(${position},${this.margins().top})`)\r\n            .call(axis);\r\n    }\r\n\r\n    renderYAxis () {\r\n        const axisPosition = this._useRightYAxis ? (this.width() - this.margins().right) : this._yAxisX();\r\n        this.renderYAxisAt('y', this._yAxis, axisPosition);\r\n        const labelPosition = this._useRightYAxis ? (this.width() - this._yAxisLabelPadding) : this._yAxisLabelPadding;\r\n        const rotation = this._useRightYAxis ? 90 : -90;\r\n        this.renderYAxisLabel('y', this.yAxisLabel(), rotation, labelPosition);\r\n    }\r\n\r\n    _renderHorizontalGridLinesForAxis (g, scale, axis) {\r\n        let gridLineG = g.select(`g.${HORIZONTAL_CLASS}`);\r\n\r\n        if (this._renderHorizontalGridLine) {\r\n            // see https://github.com/d3/d3-axis/blob/master/src/axis.js#L48\r\n            const ticks = axis.tickValues() ? axis.tickValues() :\r\n                (scale.ticks ? scale.ticks.apply(scale, axis.tickArguments()) : scale.domain());\r\n\r\n            if (gridLineG.empty()) {\r\n                gridLineG = g.insert('g', ':first-child')\r\n                    .attr('class', `${GRID_LINE_CLASS} ${HORIZONTAL_CLASS}`)\r\n                    .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\r\n            }\r\n\r\n            const lines = gridLineG.selectAll('line')\r\n                .data(ticks);\r\n\r\n            // enter\r\n            const linesGEnter = lines.enter()\r\n                .append('line')\r\n                .attr('x1', 1)\r\n                .attr('y1', d => scale(d))\r\n                .attr('x2', this.xAxisLength())\r\n                .attr('y2', d => scale(d))\r\n                .attr('opacity', 0);\r\n            transition(linesGEnter, this.transitionDuration(), this.transitionDelay())\r\n                .attr('opacity', 0.5);\r\n\r\n            // update\r\n            transition(lines, this.transitionDuration(), this.transitionDelay())\r\n                .attr('x1', 1)\r\n                .attr('y1', d => scale(d))\r\n                .attr('x2', this.xAxisLength())\r\n                .attr('y2', d => scale(d));\r\n\r\n            // exit\r\n            lines.exit().remove();\r\n        } else {\r\n            gridLineG.selectAll('line').remove();\r\n        }\r\n    }\r\n\r\n    _yAxisX () {\r\n        return this.useRightYAxis() ? this.width() - this.margins().right : this.margins().left;\r\n    }\r\n\r\n    /**\r\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\r\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\r\n     * text height.\r\n     * @param {String} [labelText]\r\n     * @param {Number} [padding=12]\r\n     * @returns {String|CoordinateGridMixin}\r\n     */\r\n    yAxisLabel (labelText, padding) {\r\n        if (!arguments.length) {\r\n            return this._yAxisLabel;\r\n        }\r\n        this._yAxisLabel = labelText;\r\n        this.margins().left -= this._yAxisLabelPadding;\r\n        this._yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\r\n        this.margins().left += this._yAxisLabelPadding;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @param {d3.scale} [yScale]\r\n     * @returns {d3.scale|CoordinateGridMixin}\r\n     */\r\n    y (yScale) {\r\n        if (!arguments.length) {\r\n            return this._y;\r\n        }\r\n        this._y = yScale;\r\n        this.rescale();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\r\n     * when y axis customization is required. Depending on `useRightYAxis` the y axis in dc.js is an instance of\r\n     * either [d3.axisLeft](https://github.com/d3/d3-axis/blob/master/README.md#axisLeft) or\r\n     * [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight); therefore it supports any\r\n     * valid d3 axis manipulation.\r\n     *\r\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\r\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\r\n     * returns the axis, not the chart,\r\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\r\n         * so attempting to call chart functions after calling `.yAxis()` will fail}.\r\n     * In addition, depending on whether you are going to use the axis on left or right\r\n     * you need to appropriately pass [d3.axisLeft](https://github.com/d3/d3-axis/blob/master/README.md#axisLeft)\r\n     * or [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight)\r\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md d3.axis}\r\n     * @example\r\n     * // customize y axis tick format\r\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\r\n     * // customize y axis tick values\r\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\r\n     * @param {d3.axisLeft|d3.axisRight} [yAxis]\r\n     * @returns {d3.axisLeft|d3.axisRight|CoordinateGridMixin}\r\n     */\r\n    yAxis (yAxis) {\r\n        if (!arguments.length) {\r\n            if (!this._yAxis) {\r\n                this._yAxis = this._createYAxis();\r\n            }\r\n            return this._yAxis;\r\n        }\r\n        this._yAxis = yAxis;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\r\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\r\n     * @param {Boolean} [elasticY=false]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    elasticY (elasticY) {\r\n        if (!arguments.length) {\r\n            return this._yElasticity;\r\n        }\r\n        this._yElasticity = elasticY;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off horizontal grid lines.\r\n     * @param {Boolean} [renderHorizontalGridLines=false]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    renderHorizontalGridLines (renderHorizontalGridLines) {\r\n        if (!arguments.length) {\r\n            return this._renderHorizontalGridLine;\r\n        }\r\n        this._renderHorizontalGridLine = renderHorizontalGridLines;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off vertical grid lines.\r\n     * @param {Boolean} [renderVerticalGridLines=false]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    renderVerticalGridLines (renderVerticalGridLines) {\r\n        if (!arguments.length) {\r\n            return this._renderVerticalGridLine;\r\n        }\r\n        this._renderVerticalGridLine = renderVerticalGridLines;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\r\n     * @returns {*}\r\n     */\r\n    xAxisMin () {\r\n        const m = min(this.data(), e => this.keyAccessor()(e));\r\n        return utils.subtract(m, this._xAxisPadding, this._xAxisPaddingUnit);\r\n    }\r\n\r\n    /**\r\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\r\n     * @returns {*}\r\n     */\r\n    xAxisMax () {\r\n        const m = max(this.data(), e => this.keyAccessor()(e));\r\n        return utils.add(m, this._xAxisPadding, this._xAxisPaddingUnit);\r\n    }\r\n\r\n    /**\r\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\r\n     * @returns {*}\r\n     */\r\n    yAxisMin () {\r\n        const m = min(this.data(), e => this.valueAccessor()(e));\r\n        return utils.subtract(m, this._yAxisPadding);\r\n    }\r\n\r\n    /**\r\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\r\n     * @returns {*}\r\n     */\r\n    yAxisMax () {\r\n        const m = max(this.data(), e => this.valueAccessor()(e));\r\n        return utils.add(m, this._yAxisPadding);\r\n    }\r\n\r\n    /**\r\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\r\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\r\n     *\r\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\r\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\r\n     * and a percentage string will be treated the same as an integer.\r\n     * @param {Number|String} [padding=0]\r\n     * @returns {Number|CoordinateGridMixin}\r\n     */\r\n    yAxisPadding (padding) {\r\n        if (!arguments.length) {\r\n            return this._yAxisPadding;\r\n        }\r\n        this._yAxisPadding = padding;\r\n        return this;\r\n    }\r\n\r\n    yAxisHeight () {\r\n        return this.effectiveHeight();\r\n    }\r\n\r\n    /**\r\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\r\n     * @example\r\n     * // set x unit round to by month, this will make sure range selection brush will\r\n     * // select whole months\r\n     * chart.round(d3.timeMonth.round);\r\n     * @param {Function} [round]\r\n     * @returns {Function|CoordinateGridMixin}\r\n     */\r\n    round (round) {\r\n        if (!arguments.length) {\r\n            return this._round;\r\n        }\r\n        this._round = round;\r\n        return this;\r\n    }\r\n\r\n    _rangeBandPadding (_) {\r\n        if (!arguments.length) {\r\n            return this._fRangeBandPadding;\r\n        }\r\n        this._fRangeBandPadding = _;\r\n        return this;\r\n    }\r\n\r\n    _outerRangeBandPadding (_) {\r\n        if (!arguments.length) {\r\n            return this._fOuterRangeBandPadding;\r\n        }\r\n        this._fOuterRangeBandPadding = _;\r\n        return this;\r\n    }\r\n\r\n    filter (_) {\r\n        if (!arguments.length) {\r\n            return super.filter();\r\n        }\r\n\r\n        super.filter(_);\r\n\r\n        this.redrawBrush(_, false);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the brush. Brush must be an instance of d3 brushes\r\n     * https://github.com/d3/d3-brush/blob/master/README.md\r\n     * You will use this only if you are writing a new chart type that supports brushing.\r\n     *\r\n     * **Caution**: dc creates and manages brushes internally. Go through and understand the source code\r\n     * if you want to pass a new brush object. Even if you are only using the getter,\r\n     * the brush object may not behave the way you expect.\r\n     *\r\n     * @param {d3.brush} [_]\r\n     * @returns {d3.brush|CoordinateGridMixin}\r\n     */\r\n    brush (_) {\r\n        if (!arguments.length) {\r\n            return this._brush;\r\n        }\r\n        this._brush = _;\r\n        return this;\r\n    }\r\n\r\n    renderBrush (g, doTransition) {\r\n        if (this._brushOn) {\r\n            this._brush.on('start brush end', d3compat.eventHandler((d, evt) => this._brushing(evt)));\r\n\r\n            // To retrieve selection we need self._gBrush\r\n            this._gBrush = g.append('g')\r\n                .attr('class', 'brush')\r\n                .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\r\n\r\n            this.setBrushExtents();\r\n\r\n            this.createBrushHandlePaths(this._gBrush, doTransition);\r\n\r\n            this.redrawBrush(this.filter(), doTransition);\r\n        }\r\n    }\r\n\r\n    createBrushHandlePaths (gBrush) {\r\n        let brushHandles = gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`).data([{type: 'w'}, {type: 'e'}]);\r\n\r\n        brushHandles = brushHandles\r\n            .enter()\r\n            .append('path')\r\n            .attr('class', CUSTOM_BRUSH_HANDLE_CLASS)\r\n            .merge(brushHandles);\r\n\r\n        brushHandles\r\n            .attr('d', d => this.resizeHandlePath(d));\r\n    }\r\n\r\n    extendBrush (brushSelection) {\r\n        if (brushSelection && this.round()) {\r\n            brushSelection[0] = this.round()(brushSelection[0]);\r\n            brushSelection[1] = this.round()(brushSelection[1]);\r\n        }\r\n        return brushSelection;\r\n    }\r\n\r\n    brushIsEmpty (brushSelection) {\r\n        return !brushSelection || brushSelection[1] <= brushSelection[0];\r\n    }\r\n\r\n    _brushing (evt) {\r\n        if (this._ignoreBrushEvents) {\r\n            return;\r\n        }\r\n\r\n        let brushSelection = evt.selection;\r\n        if (brushSelection) {\r\n            brushSelection = brushSelection.map(this.x().invert);\r\n        }\r\n\r\n        brushSelection = this.extendBrush(brushSelection);\r\n\r\n        this.redrawBrush(brushSelection, false);\r\n\r\n        const rangedFilter = this.brushIsEmpty(brushSelection) ? null : filters.RangedFilter(brushSelection[0], brushSelection[1]);\r\n\r\n        events.trigger(() => {\r\n            this.applyBrushSelection(rangedFilter);\r\n        }, constants.EVENT_DELAY);\r\n    }\r\n\r\n    // This can be overridden in a derived chart. For example Composite chart overrides it\r\n    applyBrushSelection (rangedFilter) {\r\n        this.replaceFilter(rangedFilter);\r\n        this.redrawGroup();\r\n    }\r\n\r\n    _withoutBrushEvents (closure) {\r\n        const oldValue = this._ignoreBrushEvents;\r\n        this._ignoreBrushEvents = true;\r\n\r\n        try {\r\n            closure();\r\n        } finally {\r\n            this._ignoreBrushEvents = oldValue;\r\n        }\r\n    }\r\n\r\n    setBrushExtents (doTransition) {\r\n        this._withoutBrushEvents(() => {\r\n            // Set boundaries of the brush, must set it before applying to self._gBrush\r\n            this._brush.extent([[0, 0], [this.effectiveWidth(), this.effectiveHeight()]]);\r\n        });\r\n\r\n        this._gBrush\r\n            .call(this._brush);\r\n    }\r\n\r\n    redrawBrush (brushSelection, doTransition) {\r\n        if (this._brushOn && this._gBrush) {\r\n            if (this._resizing) {\r\n                this.setBrushExtents(doTransition);\r\n            }\r\n\r\n            if (!brushSelection) {\r\n                this._withoutBrushEvents(() => {\r\n                    this._gBrush\r\n                        .call(this._brush.move, null);\r\n                })\r\n\r\n                this._gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`)\r\n                    .attr('display', 'none');\r\n            } else {\r\n                const scaledSelection = [this._x(brushSelection[0]), this._x(brushSelection[1])];\r\n\r\n                const gBrush =\r\n                    optionalTransition(doTransition, this.transitionDuration(), this.transitionDelay())(this._gBrush);\r\n\r\n                this._withoutBrushEvents(() => {\r\n                    gBrush\r\n                        .call(this._brush.move, scaledSelection);\r\n                });\r\n\r\n                gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`)\r\n                    .attr('display', null)\r\n                    .attr('transform', (d, i) => `translate(${this._x(brushSelection[i])}, 0)`)\r\n                    .attr('d', d => this.resizeHandlePath(d));\r\n            }\r\n        }\r\n        this.fadeDeselectedArea(brushSelection);\r\n    }\r\n\r\n    fadeDeselectedArea (brushSelection) {\r\n        // do nothing, sub-chart should override this function\r\n    }\r\n\r\n    // borrowed from Crossfilter example\r\n    resizeHandlePath (d) {\r\n        d = d.type;\r\n        const e = +(d === 'e'), x = e ? 1 : -1, y = this.effectiveHeight() / 3;\r\n        return `M${0.5 * x},${y \r\n        }A6,6 0 0 ${e} ${6.5 * x},${y + 6 \r\n        }V${2 * y - 6 \r\n        }A6,6 0 0 ${e} ${0.5 * x},${2 * y \r\n        }Z` +\r\n            `M${2.5 * x},${y + 8 \r\n            }V${2 * y - 8 \r\n            }M${4.5 * x},${y + 8 \r\n            }V${2 * y - 8}`;\r\n    }\r\n\r\n    _getClipPathId () {\r\n        return `${this.anchorName().replace(/[ .#=\\[\\]\"]/g, '-')}-clip`;\r\n    }\r\n\r\n    /**\r\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\r\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\r\n     * will be exactly the chart body area minus the margins.\r\n     * @param {Number} [padding=5]\r\n     * @returns {Number|CoordinateGridMixin}\r\n     */\r\n    clipPadding (padding) {\r\n        if (!arguments.length) {\r\n            return this._clipPadding;\r\n        }\r\n        this._clipPadding = padding;\r\n        return this;\r\n    }\r\n\r\n    _generateClipPath () {\r\n        const defs = utils.appendOrSelect(this._parent, 'defs');\r\n        // cannot select <clippath> elements; bug in WebKit, must select by id\r\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\r\n        const id = this._getClipPathId();\r\n        const chartBodyClip = utils.appendOrSelect(defs, `#${id}`, 'clipPath').attr('id', id);\r\n\r\n        const padding = this._clipPadding * 2;\r\n\r\n        utils.appendOrSelect(chartBodyClip, 'rect')\r\n            .attr('width', this.xAxisLength() + padding)\r\n            .attr('height', this.yAxisHeight() + padding)\r\n            .attr('transform', `translate(-${this._clipPadding}, -${this._clipPadding})`);\r\n    }\r\n\r\n    _preprocessData () {\r\n    }\r\n\r\n    _doRender () {\r\n        this.resetSvg();\r\n\r\n        this._preprocessData();\r\n\r\n        this._generateG();\r\n        this._generateClipPath();\r\n\r\n        this._drawChart(true);\r\n\r\n        this._configureMouseZoom();\r\n\r\n        return this;\r\n    }\r\n\r\n    _doRedraw () {\r\n        this._preprocessData();\r\n\r\n        this._drawChart(false);\r\n        this._generateClipPath();\r\n\r\n        return this;\r\n    }\r\n\r\n    _drawChart (render) {\r\n        if (this.isOrdinal()) {\r\n            this._brushOn = false;\r\n        }\r\n\r\n        this._prepareXAxis(this.g(), render);\r\n        this._prepareYAxis(this.g());\r\n\r\n        this.plotData();\r\n\r\n        if (this.elasticX() || this._resizing || render) {\r\n            this.renderXAxis(this.g());\r\n        }\r\n\r\n        if (this.elasticY() || this._resizing || render) {\r\n            this.renderYAxis(this.g());\r\n        }\r\n\r\n        if (render) {\r\n            this.renderBrush(this.g(), false);\r\n        } else {\r\n            // Animate the brush only while resizing\r\n            this.redrawBrush(this.filter(), this._resizing);\r\n        }\r\n        this.fadeDeselectedArea(this.filter());\r\n        this.resizing(false);\r\n    }\r\n\r\n    _configureMouseZoom () {\r\n        // Save a copy of original x scale\r\n        this._origX = this._x.copy();\r\n\r\n        if (this._mouseZoomable) {\r\n            this._enableMouseZoom();\r\n        } else if (this._hasBeenMouseZoomable) {\r\n            this._disableMouseZoom();\r\n        }\r\n    }\r\n\r\n    _enableMouseZoom () {\r\n        this._hasBeenMouseZoomable = true;\r\n\r\n        const extent = [[0, 0], [this.effectiveWidth(), this.effectiveHeight()]];\r\n\r\n        this._zoom\r\n            .scaleExtent(this._zoomScale)\r\n            .extent(extent)\r\n            .duration(this.transitionDuration());\r\n\r\n        if (this._zoomOutRestrict) {\r\n            // Ensure minimum zoomScale is at least 1\r\n            const zoomScaleMin = Math.max(this._zoomScale[0], 1);\r\n            this._zoom\r\n                .translateExtent(extent)\r\n                .scaleExtent([zoomScaleMin, this._zoomScale[1]]);\r\n        }\r\n\r\n        this.root().call(this._zoom);\r\n\r\n        // Tell D3 zoom our current zoom/pan status\r\n        this._updateD3zoomTransform();\r\n    }\r\n\r\n    _disableMouseZoom () {\r\n        this.root().call(this._nullZoom);\r\n    }\r\n\r\n    _zoomHandler (newDomain, noRaiseEvents) {\r\n        let domFilter;\r\n\r\n        if (this._hasRangeSelected(newDomain)) {\r\n            this.x().domain(newDomain);\r\n            domFilter = filters.RangedFilter(newDomain[0], newDomain[1]);\r\n        } else {\r\n            this.x().domain(this._xOriginalDomain);\r\n            domFilter = null;\r\n        }\r\n\r\n        this.replaceFilter(domFilter);\r\n        this.rescale();\r\n        this.redraw();\r\n\r\n        if (!noRaiseEvents) {\r\n            if (this._rangeChart && !utils.arraysEqual(this.filter(), this._rangeChart.filter())) {\r\n                events.trigger(() => {\r\n                    this._rangeChart.replaceFilter(domFilter);\r\n                    this._rangeChart.redraw();\r\n                });\r\n            }\r\n\r\n            this._invokeZoomedListener();\r\n            events.trigger(() => {\r\n                this.redrawGroup();\r\n            }, constants.EVENT_DELAY);\r\n        }\r\n    }\r\n\r\n    // event.transform.rescaleX(self._origX).domain() should give back newDomain\r\n    _domainToZoomTransform (newDomain, origDomain, xScale) {\r\n        const k = (origDomain[1] - origDomain[0]) / (newDomain[1] - newDomain[0]);\r\n        const xt = -1 * xScale(newDomain[0]);\r\n\r\n        return zoomIdentity.scale(k).translate(xt, 0);\r\n    }\r\n\r\n    // If we changing zoom status (for example by calling focus), tell D3 zoom about it\r\n    _updateD3zoomTransform () {\r\n        if (this._zoom) {\r\n            this._withoutZoomEvents(() => {\r\n                this._zoom.transform(this.root(), this._domainToZoomTransform(this.x().domain(), this._xOriginalDomain, this._origX));\r\n            });\r\n        }\r\n    }\r\n\r\n    _withoutZoomEvents (closure) {\r\n        const oldValue = this._ignoreZoomEvents;\r\n        this._ignoreZoomEvents = true;\r\n\r\n        try {\r\n            closure();\r\n        } finally {\r\n            this._ignoreZoomEvents = oldValue;\r\n        }\r\n    }\r\n\r\n    _onZoom (evt) {\r\n        // ignore zoom events if it was caused by a programmatic change\r\n        if (this._ignoreZoomEvents) {\r\n            return;\r\n        }\r\n\r\n        const newDomain = evt.transform.rescaleX(this._origX).domain();\r\n        this.focus(newDomain, false);\r\n    }\r\n\r\n    _checkExtents (ext, outerLimits) {\r\n        if (!ext || ext.length !== 2 || !outerLimits || outerLimits.length !== 2) {\r\n            return ext;\r\n        }\r\n\r\n        if (ext[0] > outerLimits[1] || ext[1] < outerLimits[0]) {\r\n            console.warn('Could not intersect extents, will reset');\r\n        }\r\n        // Math.max does not work (as the values may be dates as well)\r\n        return [ext[0] > outerLimits[0] ? ext[0] : outerLimits[0], ext[1] < outerLimits[1] ? ext[1] : outerLimits[1]];\r\n    }\r\n\r\n    /**\r\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\r\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\r\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\r\n     * otherwise focus will be ignored.\r\n     *\r\n     * To avoid ping-pong volley of events between a pair of range and focus charts please set\r\n     * `noRaiseEvents` to `true`. In that case it will update this chart but will not fire `zoom` event\r\n     * and not try to update back the associated range chart.\r\n     * If you are calling it manually - typically you will leave it to `false` (the default).\r\n     *\r\n     * @example\r\n     * chart.on('renderlet', function(chart) {\r\n     *     // smooth the rendering through event throttling\r\n     *     events.trigger(function(){\r\n     *          // focus some other chart to the range selected by user on this chart\r\n     *          someOtherChart.focus(chart.filter());\r\n     *     });\r\n     * })\r\n     * @param {Array<Number>} [range]\r\n     * @param {Boolean} [noRaiseEvents = false]\r\n     * @return {undefined}\r\n     */\r\n    focus (range, noRaiseEvents) {\r\n        if (this._zoomOutRestrict) {\r\n            // ensure range is within self._xOriginalDomain\r\n            range = this._checkExtents(range, this._xOriginalDomain);\r\n\r\n            // If it has an associated range chart ensure range is within domain of that rangeChart\r\n            if (this._rangeChart) {\r\n                range = this._checkExtents(range, this._rangeChart.x().domain());\r\n            }\r\n        }\r\n\r\n        this._zoomHandler(range, noRaiseEvents);\r\n        this._updateD3zoomTransform();\r\n    }\r\n\r\n    refocused () {\r\n        return !utils.arraysEqual(this.x().domain(), this._xOriginalDomain);\r\n    }\r\n\r\n    focusChart (c) {\r\n        if (!arguments.length) {\r\n            return this._focusChart;\r\n        }\r\n        this._focusChart = c;\r\n        this.on('filtered.dcjs-range-chart', chart => {\r\n            if (!chart.filter()) {\r\n                events.trigger(() => {\r\n                    this._focusChart.x().domain(this._focusChart.xOriginalDomain(), true);\r\n                });\r\n            } else if (!utils.arraysEqual(chart.filter(), this._focusChart.filter())) {\r\n                events.trigger(() => {\r\n                    this._focusChart.focus(chart.filter(), true);\r\n                });\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\r\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\r\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\r\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\r\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\r\n     * if enabled, but only via scrolling (panning will be disabled.)\r\n     * @param {Boolean} [brushOn=true]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    brushOn (brushOn) {\r\n        if (!arguments.length) {\r\n            return this._brushOn;\r\n        }\r\n        this._brushOn = brushOn;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This will be internally used by composite chart onto children. Please go not invoke directly.\r\n     *\r\n     * @protected\r\n     * @param {Boolean} [brushOn=false]\r\n     * @returns {Boolean|CoordinateGridMixin}\r\n     */\r\n    parentBrushOn (brushOn) {\r\n        if (!arguments.length) {\r\n            return this._parentBrushOn;\r\n        }\r\n        this._parentBrushOn = brushOn;\r\n        return this;\r\n    }\r\n\r\n    // Get the SVG rendered brush\r\n    gBrush () {\r\n        return this._gBrush;\r\n    }\r\n\r\n    _hasRangeSelected (range) {\r\n        return range instanceof Array && range.length > 1;\r\n    }\r\n}\r\n","// https://github.com/d3/d3-plugins/blob/master/box/box.js\r\n// * Original source March 22, 2013\r\n// * Enhancements integrated on May 13, 2018 for dc.js library only\r\n\r\n// https://github.com/d3/d3-plugins/blob/master/LICENSE\r\n// Copyright (c) 2012-2015, Michael Bostock\r\n// All rights reserved.\r\n\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n// * Redistributions of source code must retain the above copyright notice, this\r\n//   list of conditions and the following disclaimer.\r\n//\r\n// * Redistributions in binary form must reproduce the above copyright notice,\r\n//   this list of conditions and the following disclaimer in the documentation\r\n//   and/or other materials provided with the distribution.\r\n//\r\n// * The name Michael Bostock may not be used to endorse or promote products\r\n//   derived from this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n// DISCLAIMED. IN NO EVENT SHALL MICHAEL BOSTOCK BE LIABLE FOR ANY DIRECT,\r\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\r\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n/*eslint complexity: 0*/\r\n\r\n// Inspired by http://informationandvisualization.de/blog/box-plot\r\n\r\nimport {ascending, quantile, range} from 'd3-array';\r\nimport {select} from 'd3-selection';\r\nimport {scaleLinear} from 'd3-scale';\r\nimport {timerFlush} from 'd3-timer';\r\n\r\nimport {utils} from '../core/utils';\r\n\r\nexport const d3Box = function () {\r\n    let width = 1;\r\n    let height = 1;\r\n    let duration = 0;\r\n    const delay = 0;\r\n    let domain = null;\r\n    let value = Number;\r\n    let whiskers = boxWhiskers;\r\n    let quartiles = boxQuartiles;\r\n    let tickFormat = null;\r\n\r\n    // Enhanced attributes\r\n    let renderDataPoints = false;\r\n    const dataRadius = 3;\r\n    let dataOpacity = 0.3;\r\n    let dataWidthPortion = 0.8;\r\n    let renderTitle = false;\r\n    let showOutliers = true;\r\n    let boldOutlier = false;\r\n\r\n\r\n    // For each small multiple…\r\n    function box (g) {\r\n        g.each(function (data, index) {\r\n            data = data.map(value).sort(ascending);\r\n            const _g = select(this);\r\n            const n = data.length;\r\n            let min;\r\n            let max;\r\n\r\n            // Leave if there are no items.\r\n            if (n === 0) {return;}\r\n\r\n            // Compute quartiles. Must return exactly 3 elements.\r\n            const quartileData = data.quartiles = quartiles(data);\r\n\r\n            // Compute whiskers. Must return exactly 2 elements, or null.\r\n            const whiskerIndices = whiskers && whiskers.call(this, data, index),\r\n                whiskerData = whiskerIndices && whiskerIndices.map(_i => data[_i]);\r\n\r\n            // Compute outliers. If no whiskers are specified, all data are 'outliers'.\r\n            // We compute the outliers as indices, so that we can join across transitions!\r\n            const outlierIndices = whiskerIndices ?\r\n                range(0, whiskerIndices[0]).concat(range(whiskerIndices[1] + 1, n)) : range(n);\r\n\r\n            // Determine the maximum value based on if outliers are shown\r\n            if (showOutliers) {\r\n                min = data[0];\r\n                max = data[n - 1];\r\n            } else {\r\n                min = data[whiskerIndices[0]];\r\n                max = data[whiskerIndices[1]];\r\n            }\r\n            const pointIndices = range(whiskerIndices[0], whiskerIndices[1] + 1);\r\n\r\n            // Compute the new x-scale.\r\n            const x1 = scaleLinear()\r\n                .domain(domain && domain.call(this, data, index) || [min, max])\r\n                .range([height, 0]);\r\n\r\n            // Retrieve the old x-scale, if this is an update.\r\n            const x0 = this.__chart__ || scaleLinear()\r\n                .domain([0, Infinity])\r\n                .range(x1.range());\r\n\r\n            // Stash the new scale.\r\n            this.__chart__ = x1;\r\n\r\n            // Note: the box, median, and box tick elements are fixed in number,\r\n            // so we only have to handle enter and update. In contrast, the outliers\r\n            // and other elements are variable, so we need to exit them! Variable\r\n            // elements also fade in and out.\r\n\r\n            // Update center line: the vertical line spanning the whiskers.\r\n            const center = _g.selectAll('line.center')\r\n                .data(whiskerData ? [whiskerData] : []);\r\n\r\n            center.enter().insert('line', 'rect')\r\n                .attr('class', 'center')\r\n                .attr('x1', width / 2)\r\n                .attr('y1', d => x0(d[0]))\r\n                .attr('x2', width / 2)\r\n                .attr('y2', d => x0(d[1]))\r\n                .style('opacity', 1e-6)\r\n                .transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .style('opacity', 1)\r\n                .attr('y1', d => x1(d[0]))\r\n                .attr('y2', d => x1(d[1]));\r\n\r\n            center.transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .style('opacity', 1)\r\n                .attr('x1', width / 2)\r\n                .attr('x2', width / 2)\r\n                .attr('y1', d => x1(d[0]))\r\n                .attr('y2', d => x1(d[1]));\r\n\r\n            center.exit().transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .style('opacity', 1e-6)\r\n                .attr('y1', d => x1(d[0]))\r\n                .attr('y2', d => x1(d[1]))\r\n                .remove();\r\n\r\n            // Update innerquartile box.\r\n            const _box = _g.selectAll('rect.box')\r\n                .data([quartileData]);\r\n\r\n            _box.enter().append('rect')\r\n                .attr('class', 'box')\r\n                .attr('x', 0)\r\n                .attr('y', d => x0(d[2]))\r\n                .attr('width', width)\r\n                .attr('height', d => x0(d[0]) - x0(d[2]))\r\n                .style('fill-opacity', (renderDataPoints) ? 0.1 : 1)\r\n                .transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('y', d => x1(d[2]))\r\n                .attr('height', d => x1(d[0]) - x1(d[2]));\r\n\r\n            _box.transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('width', width)\r\n                .attr('y', d => x1(d[2]))\r\n                .attr('height', d => x1(d[0]) - x1(d[2]));\r\n\r\n            // Update median line.\r\n            const medianLine = _g.selectAll('line.median')\r\n                .data([quartileData[1]]);\r\n\r\n            medianLine.enter().append('line')\r\n                .attr('class', 'median')\r\n                .attr('x1', 0)\r\n                .attr('y1', x0)\r\n                .attr('x2', width)\r\n                .attr('y2', x0)\r\n                .transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('y1', x1)\r\n                .attr('y2', x1);\r\n\r\n            medianLine.transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('x1', 0)\r\n                .attr('x2', width)\r\n                .attr('y1', x1)\r\n                .attr('y2', x1);\r\n\r\n            // Update whiskers.\r\n            const whisker = _g.selectAll('line.whisker')\r\n                .data(whiskerData || []);\r\n\r\n            whisker.enter().insert('line', 'circle, text')\r\n                .attr('class', 'whisker')\r\n                .attr('x1', 0)\r\n                .attr('y1', x0)\r\n                .attr('x2', width)\r\n                .attr('y2', x0)\r\n                .style('opacity', 1e-6)\r\n                .transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('y1', x1)\r\n                .attr('y2', x1)\r\n                .style('opacity', 1);\r\n\r\n            whisker.transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('x1', 0)\r\n                .attr('x2', width)\r\n                .attr('y1', x1)\r\n                .attr('y2', x1)\r\n                .style('opacity', 1);\r\n\r\n            whisker.exit().transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('y1', x1)\r\n                .attr('y2', x1)\r\n                .style('opacity', 1e-6)\r\n                .remove();\r\n\r\n            // Update outliers.\r\n            if (showOutliers) {\r\n                const outlierClass = boldOutlier ? 'outlierBold' : 'outlier';\r\n                const outlierSize = boldOutlier ? 3 : 5;\r\n                const outlierX = boldOutlier ?\r\n                    function () {\r\n                        return Math.floor(Math.random() *\r\n                            (width * dataWidthPortion) +\r\n                            1 + ((width - (width * dataWidthPortion)) / 2));\r\n                    } :\r\n                    function () {\r\n                        return width / 2;\r\n                    };\r\n\r\n                const outlier = _g.selectAll(`circle.${outlierClass}`)\r\n                    .data(outlierIndices, Number);\r\n\r\n                outlier.enter().insert('circle', 'text')\r\n                    .attr('class', outlierClass)\r\n                    .attr('r', outlierSize)\r\n                    .attr('cx', outlierX)\r\n                    .attr('cy', i => x0(data[i]))\r\n                    .style('opacity', 1e-6)\r\n                    .transition()\r\n                    .duration(duration)\r\n                    .delay(delay)\r\n                    .attr('cy', i => x1(data[i]))\r\n                    .style('opacity', 0.6);\r\n\r\n                if (renderTitle) {\r\n                    outlier.selectAll('title').remove();\r\n                    outlier.append('title').text(i => data[i]);\r\n                }\r\n\r\n                outlier.transition()\r\n                    .duration(duration)\r\n                    .delay(delay)\r\n                    .attr('cx', outlierX)\r\n                    .attr('cy', i => x1(data[i]))\r\n                    .style('opacity', 0.6);\r\n\r\n                outlier.exit().transition()\r\n                    .duration(duration)\r\n                    .delay(delay)\r\n                    .attr('cy', 0) //function (i) { return x1(d[i]); })\r\n                    .style('opacity', 1e-6)\r\n                    .remove();\r\n            }\r\n\r\n            // Update Values\r\n            if (renderDataPoints) {\r\n                const point = _g.selectAll('circle.data')\r\n                    .data(pointIndices);\r\n\r\n                point.enter().insert('circle', 'text')\r\n                    .attr('class', 'data')\r\n                    .attr('r', dataRadius)\r\n                    .attr('cx', () => Math.floor(Math.random() *\r\n                            (width * dataWidthPortion) +\r\n                            1 + ((width - (width * dataWidthPortion)) / 2)))\r\n                    .attr('cy', i => x0(data[i]))\r\n                    .style('opacity', 1e-6)\r\n                    .transition()\r\n                    .duration(duration)\r\n                    .delay(delay)\r\n                    .attr('cy', i => x1(data[i]))\r\n                    .style('opacity', dataOpacity);\r\n\r\n                if (renderTitle) {\r\n                    point.selectAll('title').remove();\r\n                    point.append('title').text(i => data[i]);\r\n                }\r\n\r\n                point.transition()\r\n                    .duration(duration)\r\n                    .delay(delay)\r\n                    .attr('cx', () => Math.floor(Math.random() *\r\n                            (width * dataWidthPortion) +\r\n                            1 + ((width - (width * dataWidthPortion)) / 2)))\r\n                    .attr('cy', i => x1(data[i]))\r\n                    .style('opacity', dataOpacity);\r\n\r\n                point.exit().transition()\r\n                    .duration(duration)\r\n                    .delay(delay)\r\n                    .attr('cy', 0)\r\n                    .style('opacity', 1e-6)\r\n                    .remove();\r\n            }\r\n\r\n            // Compute the tick format.\r\n            const format = tickFormat || x1.tickFormat(8);\r\n\r\n            // Update box ticks.\r\n            const boxTick = _g.selectAll('text.box')\r\n                .data(quartileData);\r\n\r\n            boxTick.enter().append('text')\r\n                .attr('class', 'box')\r\n                .attr('dy', '.3em')\r\n                .attr('dx', (d, i) => i & 1 ? 6 : -6)\r\n                .attr('x', (d, i) => i & 1 ? width : 0)\r\n                .attr('y', x0)\r\n                .attr('text-anchor', (d, i) => i & 1 ? 'start' : 'end')\r\n                .text(format)\r\n                .transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('y', x1);\r\n\r\n            boxTick.transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .text(format)\r\n                .attr('x', (d, i) => i & 1 ? width : 0)\r\n                .attr('y', x1);\r\n\r\n            // Update whisker ticks. These are handled separately from the box\r\n            // ticks because they may or may not exist, and we want don't want\r\n            // to join box ticks pre-transition with whisker ticks post-.\r\n            const whiskerTick = _g.selectAll('text.whisker')\r\n                .data(whiskerData || []);\r\n\r\n            whiskerTick.enter().append('text')\r\n                .attr('class', 'whisker')\r\n                .attr('dy', '.3em')\r\n                .attr('dx', 6)\r\n                .attr('x', width)\r\n                .attr('y', x0)\r\n                .text(format)\r\n                .style('opacity', 1e-6)\r\n                .transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('y', x1)\r\n                .style('opacity', 1);\r\n\r\n            whiskerTick.transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .text(format)\r\n                .attr('x', width)\r\n                .attr('y', x1)\r\n                .style('opacity', 1);\r\n\r\n            whiskerTick.exit().transition()\r\n                .duration(duration)\r\n                .delay(delay)\r\n                .attr('y', x1)\r\n                .style('opacity', 1e-6)\r\n                .remove();\r\n\r\n            // Remove temporary quartiles element from within data array.\r\n            delete data.quartiles;\r\n        });\r\n        timerFlush();\r\n    }\r\n\r\n    box.width = function (x) {\r\n        if (!arguments.length) {\r\n            return width;\r\n        }\r\n        width = x;\r\n        return box;\r\n    };\r\n\r\n    box.height = function (x) {\r\n        if (!arguments.length) {\r\n            return height;\r\n        }\r\n        height = x;\r\n        return box;\r\n    };\r\n\r\n    box.tickFormat = function (x) {\r\n        if (!arguments.length) {\r\n            return tickFormat;\r\n        }\r\n        tickFormat = x;\r\n        return box;\r\n    };\r\n\r\n    box.showOutliers = function (x) {\r\n        if (!arguments.length) {\r\n            return showOutliers;\r\n        }\r\n        showOutliers = x;\r\n        return box;\r\n    };\r\n\r\n    box.boldOutlier = function (x) {\r\n        if (!arguments.length) {\r\n            return boldOutlier;\r\n        }\r\n        boldOutlier = x;\r\n        return box;\r\n    };\r\n\r\n    box.renderDataPoints = function (x) {\r\n        if (!arguments.length) {\r\n            return renderDataPoints;\r\n        }\r\n        renderDataPoints = x;\r\n        return box;\r\n    };\r\n\r\n    box.renderTitle = function (x) {\r\n        if (!arguments.length) {\r\n            return renderTitle;\r\n        }\r\n        renderTitle = x;\r\n        return box;\r\n    };\r\n\r\n    box.dataOpacity = function (x) {\r\n        if (!arguments.length) {\r\n            return dataOpacity;\r\n        }\r\n        dataOpacity = x;\r\n        return box;\r\n    };\r\n\r\n    box.dataWidthPortion = function (x) {\r\n        if (!arguments.length) {\r\n            return dataWidthPortion;\r\n        }\r\n        dataWidthPortion = x;\r\n        return box;\r\n    };\r\n\r\n    box.duration = function (x) {\r\n        if (!arguments.length) {\r\n            return duration;\r\n        }\r\n        duration = x;\r\n        return box;\r\n    };\r\n\r\n    box.domain = function (x) {\r\n        if (!arguments.length) {\r\n            return domain;\r\n        }\r\n        domain = x === null ? x : typeof x === 'function' ? x : utils.constant(x);\r\n        return box;\r\n    };\r\n\r\n    box.value = function (x) {\r\n        if (!arguments.length) {\r\n            return value;\r\n        }\r\n        value = x;\r\n        return box;\r\n    };\r\n\r\n    box.whiskers = function (x) {\r\n        if (!arguments.length) {\r\n            return whiskers;\r\n        }\r\n        whiskers = x;\r\n        return box;\r\n    };\r\n\r\n    box.quartiles = function (x) {\r\n        if (!arguments.length) {\r\n            return quartiles;\r\n        }\r\n        quartiles = x;\r\n        return box;\r\n    };\r\n\r\n    return box;\r\n};\r\n\r\nfunction boxWhiskers (d) {\r\n    return [0, d.length - 1];\r\n}\r\n\r\nfunction boxQuartiles (d) {\r\n    return [\r\n        quantile(d, 0.25),\r\n        quantile(d, 0.5),\r\n        quantile(d, 0.75)\r\n    ];\r\n}\r\n","import {stack} from 'd3-shape';\r\nimport {max, min} from 'd3-array';\r\n\r\nimport {pluck, utils} from '../core/utils';\r\nimport {CoordinateGridMixin} from './coordinate-grid-mixin';\r\n\r\n/**\r\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.stack.\r\n * @mixin StackMixin\r\n * @mixes CoordinateGridMixin\r\n */\r\nexport class StackMixin extends CoordinateGridMixin {\r\n    constructor () {\r\n        super();\r\n\r\n        this._stackLayout = stack();\r\n\r\n        this._stack = [];\r\n        this._titles = {};\r\n\r\n        this._hidableStacks = false;\r\n        this._evadeDomainFilter = false;\r\n\r\n        this.data(() => {\r\n            const layers = this._stack.filter(this._visibility);\r\n            if (!layers.length) {\r\n                return [];\r\n            }\r\n            layers.forEach((l, i) => this._prepareValues(l, i));\r\n            const v4data = layers[0].values.map((v, i) => {\r\n                const col = {x: v.x};\r\n                layers.forEach(layer => {\r\n                    col[layer.name] = layer.values[i].y;\r\n                });\r\n                return col;\r\n            });\r\n            const keys = layers.map(layer => layer.name);\r\n            const v4result = this.stackLayout().keys(keys)(v4data);\r\n            v4result.forEach((series, i) => {\r\n                series.forEach((ys, j) => {\r\n                    layers[i].values[j].y0 = ys[0];\r\n                    layers[i].values[j].y1 = ys[1];\r\n                });\r\n            });\r\n            return layers;\r\n        });\r\n\r\n        this.colorAccessor(function (d) {\r\n            return this.layer || this.name || d.name || d.layer;\r\n        });\r\n    }\r\n\r\n    _prepareValues (layer, layerIdx) {\r\n        const valAccessor = layer.accessor || this.valueAccessor();\r\n        layer.name = String(layer.name || layerIdx);\r\n        const allValues = layer.group.all().map((d, i) => ({\r\n            x: this.keyAccessor()(d, i),\r\n            y: layer.hidden ? null : valAccessor(d, i),\r\n            data: d,\r\n            layer: layer.name,\r\n            hidden: layer.hidden\r\n        }));\r\n\r\n        layer.domainValues = allValues.filter(l => this._domainFilter()(l));\r\n        layer.values = this.evadeDomainFilter() ? allValues : layer.domainValues;\r\n    }\r\n\r\n    _domainFilter () {\r\n        if (!this.x()) {\r\n            return utils.constant(true);\r\n        }\r\n        const xDomain = this.x().domain();\r\n        if (this.isOrdinal()) {\r\n            // TODO #416\r\n            //var domainSet = d3.set(xDomain);\r\n            return () => true //domainSet.has(p.x);\r\n            ;\r\n        }\r\n        if (this.elasticX()) {\r\n            return () => true;\r\n        }\r\n        return p => p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\r\n     * in the same chart will share the same key accessor and therefore the same set of keys.\r\n     *\r\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\r\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\r\n     * generate the legend label.\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\r\n     * @example\r\n     * // stack group using default accessor\r\n     * chart.stack(valueSumGroup)\r\n     * // stack group using custom accessor\r\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\r\n     * @param {crossfilter.group} group\r\n     * @param {String} [name]\r\n     * @param {Function} [accessor]\r\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|StackMixin}\r\n     */\r\n    stack (group, name, accessor) {\r\n        if (!arguments.length) {\r\n            return this._stack;\r\n        }\r\n\r\n        if (arguments.length <= 2) {\r\n            accessor = name;\r\n        }\r\n\r\n        const layer = {group: group};\r\n        if (typeof name === 'string') {\r\n            layer.name = name;\r\n        }\r\n        if (typeof accessor === 'function') {\r\n            layer.accessor = accessor;\r\n        }\r\n        this._stack.push(layer);\r\n\r\n        return this;\r\n    }\r\n\r\n    group (g, n, f) {\r\n        if (!arguments.length) {\r\n            return super.group();\r\n        }\r\n        this._stack = [];\r\n        this._titles = {};\r\n        this.stack(g, n);\r\n        if (f) {\r\n            this.valueAccessor(f);\r\n        }\r\n        return super.group(g, n);\r\n    }\r\n\r\n    /**\r\n     * Allow named stacks to be hidden or shown by clicking on legend items.\r\n     * This does not affect the behavior of hideStack or showStack.\r\n     * @param {Boolean} [hidableStacks=false]\r\n     * @returns {Boolean|StackMixin}\r\n     */\r\n    hidableStacks (hidableStacks) {\r\n        if (!arguments.length) {\r\n            return this._hidableStacks;\r\n        }\r\n        this._hidableStacks = hidableStacks;\r\n        return this;\r\n    }\r\n\r\n    _findLayerByName (n) {\r\n        const i = this._stack.map(pluck('name')).indexOf(n);\r\n        return this._stack[i];\r\n    }\r\n\r\n    /**\r\n     * Hide all stacks on the chart with the given name.\r\n     * The chart must be re-rendered for this change to appear.\r\n     * @param {String} stackName\r\n     * @returns {StackMixin}\r\n     */\r\n    hideStack (stackName) {\r\n        const layer = this._findLayerByName(stackName);\r\n        if (layer) {\r\n            layer.hidden = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Show all stacks on the chart with the given name.\r\n     * The chart must be re-rendered for this change to appear.\r\n     * @param {String} stackName\r\n     * @returns {StackMixin}\r\n     */\r\n    showStack (stackName) {\r\n        const layer = this._findLayerByName(stackName);\r\n        if (layer) {\r\n            layer.hidden = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getValueAccessorByIndex (index) {\r\n        return this._stack[index].accessor || this.valueAccessor();\r\n    }\r\n\r\n    yAxisMin () {\r\n        const m = min(this._flattenStack(), p => (p.y < 0) ? (p.y + p.y0) : p.y0);\r\n        return utils.subtract(m, this.yAxisPadding());\r\n    }\r\n\r\n    yAxisMax () {\r\n        const m = max(this._flattenStack(), p => (p.y > 0) ? (p.y + p.y0) : p.y0);\r\n        return utils.add(m, this.yAxisPadding());\r\n    }\r\n\r\n    _flattenStack () {\r\n        // A round about way to achieve flatMap\r\n        // When target browsers support flatMap, just replace map -> flatMap, no concat needed\r\n        const values = this.data().map(layer => layer.domainValues);\r\n        return [].concat(...values);\r\n    }\r\n\r\n    xAxisMin () {\r\n        const m = min(this._flattenStack(), pluck('x'));\r\n        return utils.subtract(m, this.xAxisPadding(), this.xAxisPaddingUnit());\r\n    }\r\n\r\n    xAxisMax () {\r\n        const m = max(this._flattenStack(), pluck('x'));\r\n        return utils.add(m, this.xAxisPadding(), this.xAxisPaddingUnit());\r\n    }\r\n\r\n    /**\r\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\r\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\r\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\r\n     * use title otherwise the brush layer will block tooltip trigger.\r\n     *\r\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\r\n     * is not provided, the first stack is implied.\r\n     * @example\r\n     * // set a title function on 'first stack'\r\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\r\n     * // get a title function from 'second stack'\r\n     * var secondTitleFunction = chart.title('second stack');\r\n     * @param {String} [stackName]\r\n     * @param {Function} [titleAccessor]\r\n     * @returns {String|StackMixin}\r\n     */\r\n    title (stackName, titleAccessor) {\r\n        if (!stackName) {\r\n            return super.title();\r\n        }\r\n\r\n        if (typeof stackName === 'function') {\r\n            return super.title(stackName);\r\n        }\r\n        if (stackName === this._groupName && typeof titleAccessor === 'function') {\r\n            return super.title(titleAccessor);\r\n        }\r\n\r\n        if (typeof titleAccessor !== 'function') {\r\n            return this._titles[stackName] || super.title();\r\n        }\r\n\r\n        this._titles[stackName] = titleAccessor;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\r\n     * propagates it to the next.\r\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.stackD3v3}\r\n     * @param {Function} [_stack=d3.stackD3v3]\r\n     * @returns {Function|StackMixin}\r\n     */\r\n    stackLayout (_stack) {\r\n        if (!arguments.length) {\r\n            return this._stackLayout;\r\n        }\r\n        this._stackLayout = _stack;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\r\n     * where points are filtered to the current domain. While this is a useful optimization, it is\r\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\r\n     * that are clipped to the bounds, as well as bars that are partly clipped.\r\n     *\r\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\r\n     * that fix is published, so set this flag to skip any filtering of points.\r\n     *\r\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\r\n     * @param {Boolean} [evadeDomainFilter=false]\r\n     * @returns {Boolean|StackMixin}\r\n     */\r\n    evadeDomainFilter (evadeDomainFilter) {\r\n        if (!arguments.length) {\r\n            return this._evadeDomainFilter;\r\n        }\r\n        this._evadeDomainFilter = evadeDomainFilter;\r\n        return this;\r\n    }\r\n\r\n    _visibility (l) {\r\n        return !l.hidden;\r\n    }\r\n\r\n    _ordinalXDomain () {\r\n        const flat = this._flattenStack().map(pluck('data'));\r\n        const ordered = this._computeOrderedGroups(flat);\r\n        return ordered.map(this.keyAccessor());\r\n    }\r\n\r\n    legendables () {\r\n        return this._stack.map((layer, i) => ({\r\n            chart: this,\r\n            name: layer.name,\r\n            hidden: layer.hidden || false,\r\n            color: this.getColor.call(layer, layer.values, i)\r\n        }));\r\n    }\r\n\r\n    isLegendableHidden (d) {\r\n        const layer = this._findLayerByName(d.name);\r\n        return layer ? layer.hidden : false;\r\n    }\r\n\r\n    legendToggle (d) {\r\n        if (this._hidableStacks) {\r\n            if (this.isLegendableHidden(d)) {\r\n                this.showStack(d.name);\r\n            } else {\r\n                this.hideStack(d.name);\r\n            }\r\n            //_chart.redraw();\r\n            this.renderGroup();\r\n        }\r\n    }\r\n}\r\n","import {select} from 'd3-selection';\r\n\r\nimport {StackMixin} from '../base/stack-mixin';\r\nimport {transition} from '../core/core';\r\nimport {constants} from '../core/constants';\r\nimport {logger} from '../core/logger';\r\nimport {pluck, utils} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\n\r\nconst MIN_BAR_WIDTH = 1;\r\nconst DEFAULT_GAP_BETWEEN_BARS = 2;\r\nconst LABEL_PADDING = 3;\r\n\r\n/**\r\n * Concrete bar chart/histogram implementation.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\r\n * @mixes StackMixin\r\n */\r\nexport class BarChart extends StackMixin {\r\n    /**\r\n     * Create a Bar Chart\r\n     * @example\r\n     * // create a bar chart under #chart-container1 element using the default global chart group\r\n     * var chart1 = new BarChart('#chart-container1');\r\n     * // create a bar chart under #chart-container2 element using chart group A\r\n     * var chart2 = new BarChart('#chart-container2', 'chartGroupA');\r\n     * // create a sub-chart under a composite parent chart\r\n     * var chart3 = new BarChart(compositeChart);\r\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\r\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\r\n     * chart is a sub-chart in a {@link CompositeChart Composite Chart} then pass in the parent\r\n     * composite chart instance instead.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._gap = DEFAULT_GAP_BETWEEN_BARS;\r\n        this._centerBar = false;\r\n        this._alwaysUseRounding = false;\r\n\r\n        this._barWidth = undefined;\r\n\r\n        this.label(d => utils.printSingleValue(d.y0 + d.y), false);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    /**\r\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\r\n     * Will pad the width by `padding * barWidth` on each side of the chart.\r\n     * @param {Number} [padding=0.5]\r\n     * @returns {Number|BarChart}\r\n     */\r\n    outerPadding (padding) {\r\n        if (!arguments.length) {\r\n            return this._outerRangeBandPadding();\r\n        }\r\n        return this._outerRangeBandPadding(padding);\r\n    }\r\n\r\n    rescale () {\r\n        super.rescale();\r\n        this._barWidth = undefined;\r\n        return this;\r\n    }\r\n\r\n    render () {\r\n        if (this.round() && this._centerBar && !this._alwaysUseRounding) {\r\n            logger.warn('By default, brush rounding is disabled if bars are centered. ' +\r\n                'See dc.js bar chart API documentation for details.');\r\n        }\r\n\r\n        return super.render();\r\n    }\r\n\r\n    plotData () {\r\n        let layers = this.chartBodyG().selectAll('g.stack')\r\n            .data(this.data());\r\n\r\n        this._calculateBarWidth();\r\n\r\n        layers = layers\r\n            .enter()\r\n            .append('g')\r\n            .attr('class', (d, i) => `stack _${i}`)\r\n            .merge(layers);\r\n\r\n        const last = layers.size() - 1;\r\n        {\r\n            const chart = this;\r\n            layers.each(function (d, i) {\r\n                const layer = select(this);\r\n\r\n                chart._renderBars(layer, i, d);\r\n\r\n                if (chart.renderLabel() && last === i) {\r\n                    chart._renderLabels(layer, i, d);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    _barHeight (d) {\r\n        return utils.safeNumber(Math.abs(this.y()(d.y + d.y0) - this.y()(d.y0)));\r\n    }\r\n\r\n    _labelXPos (d) {\r\n        let x = this.x()(d.x);\r\n        if (!this._centerBar) {\r\n            x += this._barWidth / 2;\r\n        }\r\n        if (this.isOrdinal() && this._gap !== undefined) {\r\n            x += this._gap / 2;\r\n        }\r\n        return utils.safeNumber(x);\r\n    }\r\n\r\n    _labelYPos (d) {\r\n        let y = this.y()(d.y + d.y0);\r\n\r\n        if (d.y < 0) {\r\n            y -= this._barHeight(d);\r\n        }\r\n\r\n        return utils.safeNumber(y - LABEL_PADDING);\r\n    }\r\n\r\n    _renderLabels (layer, layerIndex, data) {\r\n        const labels = layer.selectAll('text.barLabel')\r\n            .data(data.values, pluck('x'));\r\n\r\n        const labelsEnterUpdate = labels\r\n            .enter()\r\n            .append('text')\r\n            .attr('class', 'barLabel')\r\n            .attr('text-anchor', 'middle')\r\n            .attr('x', d => this._labelXPos(d))\r\n            .attr('y', d => this._labelYPos(d))\r\n            .merge(labels);\r\n\r\n        if (this.isOrdinal()) {\r\n            labelsEnterUpdate.on('click', d3compat.eventHandler(d => this.onClick(d)));\r\n            labelsEnterUpdate.attr('cursor', 'pointer');\r\n        }\r\n\r\n        transition(labelsEnterUpdate, this.transitionDuration(), this.transitionDelay())\r\n            .attr('x', d => this._labelXPos(d))\r\n            .attr('y', d => this._labelYPos(d))\r\n            .text(d => this.label()(d));\r\n\r\n        transition(labels.exit(), this.transitionDuration(), this.transitionDelay())\r\n            .attr('height', 0)\r\n            .remove();\r\n    }\r\n\r\n    _barXPos (d) {\r\n        let x = this.x()(d.x);\r\n        if (this._centerBar) {\r\n            x -= this._barWidth / 2;\r\n        }\r\n        if (this.isOrdinal() && this._gap !== undefined) {\r\n            x += this._gap / 2;\r\n        }\r\n        return utils.safeNumber(x);\r\n    }\r\n\r\n    _renderBars (layer, layerIndex, data) {\r\n        const bars = layer.selectAll('rect.bar')\r\n            .data(data.values, pluck('x'));\r\n\r\n        const enter = bars.enter()\r\n            .append('rect')\r\n            .attr('class', 'bar')\r\n            .classed('dc-tabbable', this._keyboardAccessible)\r\n            .attr('fill', pluck('data', this.getColor))\r\n            .attr('x', d => this._barXPos(d))\r\n            .attr('y', this.yAxisHeight())\r\n            .attr('height', 0);\r\n\r\n        const barsEnterUpdate = enter.merge(bars);\r\n\r\n        if (this.renderTitle()) {\r\n            enter.append('title').text(pluck('data', this.title(data.name)));\r\n        }\r\n\r\n        if (this.isOrdinal()) {\r\n            barsEnterUpdate.on('click', d3compat.eventHandler(d => this.onClick(d)));\r\n        }\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible(this.onClick);\r\n        }\r\n\r\n        transition(barsEnterUpdate, this.transitionDuration(), this.transitionDelay())\r\n            .attr('x', d => this._barXPos(d))\r\n            .attr('y', d => {\r\n                let y = this.y()(d.y + d.y0);\r\n\r\n                if (d.y < 0) {\r\n                    y -= this._barHeight(d);\r\n                }\r\n\r\n                return utils.safeNumber(y);\r\n            })\r\n            .attr('width', this._barWidth)\r\n            .attr('height', d => this._barHeight(d))\r\n            .attr('fill', pluck('data', this.getColor))\r\n            .select('title').text(pluck('data', this.title(data.name)));\r\n\r\n        transition(bars.exit(), this.transitionDuration(), this.transitionDelay())\r\n            .attr('x', d => this.x()(d.x))\r\n            .attr('width', this._barWidth * 0.9)\r\n            .remove();\r\n    }\r\n\r\n    _calculateBarWidth () {\r\n        if (this._barWidth === undefined) {\r\n            const numberOfBars = this.xUnitCount();\r\n\r\n            // please can't we always use rangeBands for bar charts?\r\n            if (this.isOrdinal() && this._gap === undefined) {\r\n                this._barWidth = Math.floor(this.x().bandwidth());\r\n            } else if (this._gap) {\r\n                this._barWidth = Math.floor((this.xAxisLength() - (numberOfBars - 1) * this._gap) / numberOfBars);\r\n            } else {\r\n                this._barWidth = Math.floor(this.xAxisLength() / (1 + this.barPadding()) / numberOfBars);\r\n            }\r\n\r\n            if (this._barWidth === Infinity || isNaN(this._barWidth) || this._barWidth < MIN_BAR_WIDTH) {\r\n                this._barWidth = MIN_BAR_WIDTH;\r\n            }\r\n        }\r\n    }\r\n\r\n    fadeDeselectedArea (brushSelection) {\r\n        const bars = this.chartBodyG().selectAll('rect.bar');\r\n\r\n        if (this.isOrdinal()) {\r\n            if (this.hasFilter()) {\r\n                bars.classed(constants.SELECTED_CLASS, d => this.hasFilter(d.x));\r\n                bars.classed(constants.DESELECTED_CLASS, d => !this.hasFilter(d.x));\r\n            } else {\r\n                bars.classed(constants.SELECTED_CLASS, false);\r\n                bars.classed(constants.DESELECTED_CLASS, false);\r\n            }\r\n        } else if (this.brushOn() || this.parentBrushOn()) {\r\n            if (!this.brushIsEmpty(brushSelection)) {\r\n                const start = brushSelection[0];\r\n                const end = brushSelection[1];\r\n\r\n                bars.classed(constants.DESELECTED_CLASS, d => d.x < start || d.x >= end);\r\n            } else {\r\n                bars.classed(constants.DESELECTED_CLASS, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\r\n     * @param {Boolean} [centerBar=false]\r\n     * @returns {Boolean|BarChart}\r\n     */\r\n    centerBar (centerBar) {\r\n        if (!arguments.length) {\r\n            return this._centerBar;\r\n        }\r\n        this._centerBar = centerBar;\r\n        return this;\r\n    }\r\n\r\n    onClick (d) {\r\n        super.onClick(d.data);\r\n    }\r\n\r\n    /**\r\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\r\n     * Setting this value will also remove any previously set {@link BarChart#gap gap}. See the\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3 docs}\r\n     * for a visual description of how the padding is applied.\r\n     * @param {Number} [barPadding=0]\r\n     * @returns {Number|BarChart}\r\n     */\r\n    barPadding (barPadding) {\r\n        if (!arguments.length) {\r\n            return this._rangeBandPadding();\r\n        }\r\n        this._rangeBandPadding(barPadding);\r\n        this._gap = undefined;\r\n        return this;\r\n    }\r\n\r\n    _useOuterPadding () {\r\n        return this._gap === undefined;\r\n    }\r\n\r\n    /**\r\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\r\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\r\n     * based on the number of data points and the length of the x axis.\r\n     * @param {Number} [gap=2]\r\n     * @returns {Number|BarChart}\r\n     */\r\n    gap (gap) {\r\n        if (!arguments.length) {\r\n            return this._gap;\r\n        }\r\n        this._gap = gap;\r\n        return this;\r\n    }\r\n\r\n    extendBrush (brushSelection) {\r\n        if (brushSelection && this.round() && (!this._centerBar || this._alwaysUseRounding)) {\r\n            brushSelection[0] = this.round()(brushSelection[0]);\r\n            brushSelection[1] = this.round()(brushSelection[1]);\r\n        }\r\n        return brushSelection;\r\n    }\r\n\r\n    /**\r\n     * Set or get whether rounding is enabled when bars are centered. If false, using\r\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\r\n     * has no effect if bars are not {@link BarChart#centerBar centered}.\r\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\r\n     * centered bars since the bars are offset.  The rounding function must add an offset to\r\n     * compensate, such as in the following example.\r\n     * @example\r\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\r\n     * @param {Boolean} [alwaysUseRounding=false]\r\n     * @returns {Boolean|BarChart}\r\n     */\r\n    alwaysUseRounding (alwaysUseRounding) {\r\n        if (!arguments.length) {\r\n            return this._alwaysUseRounding;\r\n        }\r\n        this._alwaysUseRounding = alwaysUseRounding;\r\n        return this;\r\n    }\r\n\r\n    legendHighlight (d) {\r\n        const colorFilter = (color, inv) => function () {\r\n            const item = select(this);\r\n            const match = item.attr('fill') === color;\r\n            return inv ? !match : match;\r\n        };\r\n\r\n        if (!this.isLegendableHidden(d)) {\r\n            this.g().selectAll('rect.bar')\r\n                .classed('highlight', colorFilter(d.color))\r\n                .classed('fadeout', colorFilter(d.color, true));\r\n        }\r\n    }\r\n\r\n    legendReset () {\r\n        this.g().selectAll('rect.bar')\r\n            .classed('highlight', false)\r\n            .classed('fadeout', false);\r\n    }\r\n\r\n    xAxisMax () {\r\n        let max = super.xAxisMax();\r\n        if ('resolution' in this.xUnits()) {\r\n            const res = this.xUnits().resolution;\r\n            max += res;\r\n        }\r\n        return max;\r\n    }\r\n}\r\n\r\nexport const barChart = (parent, chartGroup) => new BarChart(parent, chartGroup);\r\n","import {scaleBand} from 'd3-scale';\r\nimport {select} from 'd3-selection';\r\nimport {min, max} from 'd3-array';\r\n\r\nimport {d3Box} from '../base/d3.box'\r\nimport {CoordinateGridMixin} from '../base/coordinate-grid-mixin';\r\nimport {transition} from '../core/core';\r\nimport {units} from '../core/units';\r\nimport {utils} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\n\r\n// Returns a function to compute the interquartile range.\r\nfunction defaultWhiskersIQR (k) {\r\n    return d => {\r\n        const q1 = d.quartiles[0];\r\n        const q3 = d.quartiles[2];\r\n        const iqr = (q3 - q1) * k;\r\n\r\n        let i = -1;\r\n        let j = d.length;\r\n\r\n        do {\r\n            ++i;\r\n        } while (d[i] < q1 - iqr);\r\n\r\n        do {\r\n            --j;\r\n        } while (d[j] > q3 + iqr);\r\n\r\n        return [i, j];\r\n    };\r\n}\r\n\r\n/**\r\n * A box plot is a chart that depicts numerical data via their quartile ranges.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-basic.html Boxplot Basic example}\r\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-enhanced.html Boxplot Enhanced example}\r\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-render-data.html Boxplot Render Data example}\r\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-time.html Boxplot time example}\r\n * @mixes CoordinateGridMixin\r\n */\r\nexport class BoxPlot extends CoordinateGridMixin {\r\n    /**\r\n     * Create a Box Plot.\r\n     *\r\n     * @example\r\n     * // create a box plot under #chart-container1 element using the default global chart group\r\n     * var boxPlot1 = new BoxPlot('#chart-container1');\r\n     * // create a box plot under #chart-container2 element using chart group A\r\n     * var boxPlot2 = new BoxPlot('#chart-container2', 'chartGroupA');\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._whiskerIqrFactor = 1.5;\r\n        this._whiskersIqr = defaultWhiskersIQR;\r\n        this._whiskers = this._whiskersIqr(this._whiskerIqrFactor);\r\n\r\n        this._box = d3Box();\r\n        this._tickFormat = null;\r\n        this._renderDataPoints = false;\r\n        this._dataOpacity = 0.3;\r\n        this._dataWidthPortion = 0.8;\r\n        this._showOutliers = true;\r\n        this._boldOutlier = false;\r\n\r\n        // Used in yAxisMin and yAxisMax to add padding in pixel coordinates\r\n        // so the min and max data points/whiskers are within the chart\r\n        this._yRangePadding = 8;\r\n\r\n        this._boxWidth = (innerChartWidth, xUnits) => {\r\n            if (this.isOrdinal()) {\r\n                return this.x().bandwidth();\r\n            } else {\r\n                return innerChartWidth / (1 + this.boxPadding()) / xUnits;\r\n            }\r\n        };\r\n\r\n        // default to ordinal\r\n        this.x(scaleBand());\r\n        this.xUnits(units.ordinal);\r\n\r\n        // valueAccessor should return an array of values that can be coerced into numbers\r\n        // or if data is overloaded for a static array of arrays, it should be `Number`.\r\n        // Empty arrays are not included.\r\n        this.data(group => group.all().map(d => {\r\n            d.map = accessor => accessor.call(d, d);\r\n            return d;\r\n        }).filter(d => {\r\n            const values = this.valueAccessor()(d);\r\n            return values.length !== 0;\r\n        }));\r\n\r\n        this.boxPadding(0.8);\r\n        this.outerPadding(0.5);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    /**\r\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\r\n     * See the {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3 docs}\r\n     * for a visual description of how the padding is applied.\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3.scaleBand}\r\n     * @param {Number} [padding=0.8]\r\n     * @returns {Number|BoxPlot}\r\n     */\r\n    boxPadding (padding) {\r\n        if (!arguments.length) {\r\n            return this._rangeBandPadding();\r\n        }\r\n        return this._rangeBandPadding(padding);\r\n    }\r\n\r\n    /**\r\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\r\n     * or on charts with a custom {@link BoxPlot#boxWidth .boxWidth}. Will pad the width by\r\n     * `padding * barWidth` on each side of the chart.\r\n     * @param {Number} [padding=0.5]\r\n     * @returns {Number|BoxPlot}\r\n     */\r\n    outerPadding (padding) {\r\n        if (!arguments.length) {\r\n            return this._outerRangeBandPadding();\r\n        }\r\n        return this._outerRangeBandPadding(padding);\r\n    }\r\n\r\n    /**\r\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\r\n     * parameters the chart width excluding the right and left margins, as well as the number of x\r\n     * units.\r\n     * @example\r\n     * // Using numerical parameter\r\n     * chart.boxWidth(10);\r\n     * // Using function\r\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\r\n     * @param {Number|Function} [boxWidth=0.5]\r\n     * @returns {Number|Function|BoxPlot}\r\n     */\r\n    boxWidth (boxWidth) {\r\n        if (!arguments.length) {\r\n            return this._boxWidth;\r\n        }\r\n        this._boxWidth = typeof boxWidth === 'function' ? boxWidth : utils.constant(boxWidth);\r\n        return this;\r\n    }\r\n\r\n    _boxTransform (d, i) {\r\n        const xOffset = this.x()(this.keyAccessor()(d, i));\r\n        return `translate(${xOffset}, 0)`;\r\n    }\r\n\r\n    _preprocessData () {\r\n        if (this.elasticX()) {\r\n            this.x().domain([]);\r\n        }\r\n    }\r\n\r\n    plotData () {\r\n        this._calculatedBoxWidth = this._boxWidth(this.effectiveWidth(), this.xUnitCount());\r\n\r\n        this._box.whiskers(this._whiskers)\r\n            .width(this._calculatedBoxWidth)\r\n            .height(this.effectiveHeight())\r\n            .value(this.valueAccessor())\r\n            .domain(this.y().domain())\r\n            .duration(this.transitionDuration())\r\n            .tickFormat(this._tickFormat)\r\n            .renderDataPoints(this._renderDataPoints)\r\n            .dataOpacity(this._dataOpacity)\r\n            .dataWidthPortion(this._dataWidthPortion)\r\n            .renderTitle(this.renderTitle())\r\n            .showOutliers(this._showOutliers)\r\n            .boldOutlier(this._boldOutlier);\r\n\r\n        const boxesG = this.chartBodyG().selectAll('g.box').data(this.data(), this.keyAccessor());\r\n\r\n        const boxesGEnterUpdate = this._renderBoxes(boxesG);\r\n        this._updateBoxes(boxesGEnterUpdate);\r\n        this._removeBoxes(boxesG);\r\n\r\n        this.fadeDeselectedArea(this.filter());\r\n    }\r\n\r\n    _renderBoxes (boxesG) {\r\n        const boxesGEnter = boxesG.enter().append('g');\r\n\r\n        boxesGEnter\r\n            .attr('class', 'box')\r\n            .classed('dc-tabbable', this._keyboardAccessible)\r\n            .attr('transform', (d, i) => this._boxTransform(d, i))\r\n            .call(this._box)\r\n            .on('click', d3compat.eventHandler(d => {\r\n                this.filter(this.keyAccessor()(d));\r\n                this.redrawGroup();\r\n            }))\r\n            .selectAll('circle')\r\n            .classed('dc-tabbable', this._keyboardAccessible);\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible(this.onClick);\r\n        }\r\n\r\n        return boxesGEnter.merge(boxesG);\r\n    }\r\n\r\n    _updateBoxes (boxesG) {\r\n        const chart = this;\r\n        transition(boxesG, this.transitionDuration(), this.transitionDelay())\r\n            .attr('transform', (d, i) => this._boxTransform(d, i))\r\n            .call(this._box)\r\n            .each(function (d) {\r\n                const color = chart.getColor(d, 0);\r\n                select(this).select('rect.box').attr('fill', color);\r\n                select(this).selectAll('circle.data').attr('fill', color);\r\n            });\r\n    }\r\n\r\n    _removeBoxes (boxesG) {\r\n        boxesG.exit().remove().call(this._box);\r\n    }\r\n\r\n    _minDataValue () {\r\n        return min(this.data(), e => min(this.valueAccessor()(e)));\r\n    }\r\n\r\n    _maxDataValue () {\r\n        return max(this.data(), e => max(this.valueAccessor()(e)));\r\n    }\r\n\r\n    _yAxisRangeRatio () {\r\n        return ((this._maxDataValue() - this._minDataValue()) / this.effectiveHeight());\r\n    }\r\n\r\n    onClick (d) {\r\n        this.filter(this.keyAccessor()(d));\r\n        this.redrawGroup();\r\n    }\r\n\r\n    fadeDeselectedArea (brushSelection) {\r\n        const chart = this;\r\n        if (this.hasFilter()) {\r\n            if (this.isOrdinal()) {\r\n                this.g().selectAll('g.box').each(function (d) {\r\n                    if (chart.isSelectedNode(d)) {\r\n                        chart.highlightSelected(this);\r\n                    } else {\r\n                        chart.fadeDeselected(this);\r\n                    }\r\n                });\r\n            } else {\r\n                if (!(this.brushOn() || this.parentBrushOn())) {\r\n                    return;\r\n                }\r\n                const start = brushSelection[0];\r\n                const end = brushSelection[1];\r\n                this.g().selectAll('g.box').each(function (d) {\r\n                    const key = chart.keyAccessor()(d);\r\n                    if (key < start || key >= end) {\r\n                        chart.fadeDeselected(this);\r\n                    } else {\r\n                        chart.highlightSelected(this);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            this.g().selectAll('g.box').each(function () {\r\n                chart.resetHighlight(this);\r\n            });\r\n        }\r\n    }\r\n\r\n    isSelectedNode (d) {\r\n        return this.hasFilter(this.keyAccessor()(d));\r\n    }\r\n\r\n    yAxisMin () {\r\n        const padding = this._yRangePadding * this._yAxisRangeRatio();\r\n        return utils.subtract(this._minDataValue() - padding, this.yAxisPadding());\r\n    }\r\n\r\n    yAxisMax () {\r\n        const padding = this._yRangePadding * this._yAxisRangeRatio();\r\n        return utils.add(this._maxDataValue() + padding, this.yAxisPadding());\r\n    }\r\n\r\n    /**\r\n     * Get or set the numerical format of the boxplot median, whiskers and quartile labels. Defaults\r\n     * to integer formatting.\r\n     * @example\r\n     * // format ticks to 2 decimal places\r\n     * chart.tickFormat(d3.format('.2f'));\r\n     * @param {Function} [tickFormat]\r\n     * @returns {Number|Function|BoxPlot}\r\n     */\r\n    tickFormat (tickFormat) {\r\n        if (!arguments.length) {\r\n            return this._tickFormat;\r\n        }\r\n        this._tickFormat = tickFormat;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the amount of padding to add, in pixel coordinates, to the top and\r\n     * bottom of the chart to accommodate box/whisker labels.\r\n     * @example\r\n     * // allow more space for a bigger whisker font\r\n     * chart.yRangePadding(12);\r\n     * @param {Function} [yRangePadding = 8]\r\n     * @returns {Number|Function|BoxPlot}\r\n     */\r\n    yRangePadding (yRangePadding) {\r\n        if (!arguments.length) {\r\n            return this._yRangePadding;\r\n        }\r\n        this._yRangePadding = yRangePadding;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set whether individual data points will be rendered.\r\n     * @example\r\n     * // Enable rendering of individual data points\r\n     * chart.renderDataPoints(true);\r\n     * @param {Boolean} [show=false]\r\n     * @returns {Boolean|BoxPlot}\r\n     */\r\n    renderDataPoints (show) {\r\n        if (!arguments.length) {\r\n            return this._renderDataPoints;\r\n        }\r\n        this._renderDataPoints = show;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the opacity when rendering data.\r\n     * @example\r\n     * // If individual data points are rendered increase the opacity.\r\n     * chart.dataOpacity(0.7);\r\n     * @param {Number} [opacity=0.3]\r\n     * @returns {Number|BoxPlot}\r\n     */\r\n    dataOpacity (opacity) {\r\n        if (!arguments.length) {\r\n            return this._dataOpacity;\r\n        }\r\n        this._dataOpacity = opacity;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the portion of the width of the box to show data points.\r\n     * @example\r\n     * // If individual data points are rendered increase the data box.\r\n     * chart.dataWidthPortion(0.9);\r\n     * @param {Number} [percentage=0.8]\r\n     * @returns {Number|BoxPlot}\r\n     */\r\n    dataWidthPortion (percentage) {\r\n        if (!arguments.length) {\r\n            return this._dataWidthPortion;\r\n        }\r\n        this._dataWidthPortion = percentage;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set whether outliers will be rendered.\r\n     * @example\r\n     * // Disable rendering of outliers\r\n     * chart.showOutliers(false);\r\n     * @param {Boolean} [show=true]\r\n     * @returns {Boolean|BoxPlot}\r\n     */\r\n    showOutliers (show) {\r\n        if (!arguments.length) {\r\n            return this._showOutliers;\r\n        }\r\n        this._showOutliers = show;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set whether outliers will be drawn bold.\r\n     * @example\r\n     * // If outliers are rendered display as bold\r\n     * chart.boldOutlier(true);\r\n     * @param {Boolean} [show=false]\r\n     * @returns {Boolean|BoxPlot}\r\n     */\r\n    boldOutlier (show) {\r\n        if (!arguments.length) {\r\n            return this._boldOutlier;\r\n        }\r\n        this._boldOutlier = show;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const boxPlot = (parent, chartGroup) => new BoxPlot(parent, chartGroup);\r\n","import {BubbleMixin} from '../base/bubble-mixin';\r\nimport {CoordinateGridMixin} from '../base/coordinate-grid-mixin';\r\nimport {transition} from '../core/core';\r\nimport {d3compat} from '../core/config';\r\n\r\n/**\r\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\r\n * following dimensions:\r\n * - x axis position\r\n * - y axis position\r\n * - bubble radius\r\n * - color\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\r\n * @mixes BubbleMixin\r\n * @mixes CoordinateGridMixin\r\n */\r\nexport class BubbleChart extends BubbleMixin(CoordinateGridMixin) {\r\n    /**\r\n     * Create a Bubble Chart.\r\n     *\r\n     * @example\r\n     * // create a bubble chart under #chart-container1 element using the default global chart group\r\n     * var bubbleChart1 = new BubbleChart('#chart-container1');\r\n     * // create a bubble chart under #chart-container2 element using chart group A\r\n     * var bubbleChart2 = new BubbleChart('#chart-container2', 'chartGroupA');\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this.transitionDuration(750);\r\n\r\n        this.transitionDelay(0);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _bubbleLocator (d) {\r\n        return `translate(${this._bubbleX(d)},${this._bubbleY(d)})`;\r\n    }\r\n\r\n    plotData () {\r\n        this.calculateRadiusDomain();\r\n        this.r().range([this.MIN_RADIUS, this.xAxisLength() * this.maxBubbleRelativeSize()]);\r\n\r\n        const data = this.data();\r\n        let bubbleG = this.chartBodyG().selectAll(`g.${this.BUBBLE_NODE_CLASS}`)\r\n            .data(data, d => d.key);\r\n        if (this.sortBubbleSize() || this.keyboardAccessible()) {\r\n            // update dom order based on sort\r\n            bubbleG.order();\r\n        }\r\n\r\n        this._removeNodes(bubbleG);\r\n\r\n        bubbleG = this._renderNodes(bubbleG);\r\n\r\n        this._updateNodes(bubbleG);\r\n\r\n        this.fadeDeselectedArea(this.filter());\r\n    }\r\n\r\n    _renderNodes (bubbleG) {\r\n        const bubbleGEnter = bubbleG.enter().append('g');\r\n\r\n        bubbleGEnter\r\n            .attr('class', this.BUBBLE_NODE_CLASS)\r\n            .attr('transform', d => this._bubbleLocator(d))\r\n            .append('circle').attr('class', (d, i) => `${this.BUBBLE_CLASS} _${i}`)\r\n            .on('click', d3compat.eventHandler(d => this.onClick(d)))\r\n            .classed('dc-tabbable', this._keyboardAccessible)\r\n            .attr('fill', this.getColor)\r\n            .attr('r', 0);\r\n\r\n        bubbleG = bubbleGEnter.merge(bubbleG);\r\n\r\n        transition(bubbleG, this.transitionDuration(), this.transitionDelay())\r\n            .select(`circle.${this.BUBBLE_CLASS}`)\r\n            .attr('r', d => this.bubbleR(d))\r\n            .attr('opacity', d => (this.bubbleR(d) > 0) ? 1 : 0);\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible(this.onClick);\r\n        }\r\n\r\n        this._doRenderLabel(bubbleGEnter);\r\n\r\n        this._doRenderTitles(bubbleGEnter);\r\n\r\n        return bubbleG;\r\n    }\r\n\r\n    _updateNodes (bubbleG) {\r\n        transition(bubbleG, this.transitionDuration(), this.transitionDelay())\r\n            .attr('transform', d => this._bubbleLocator(d))\r\n            .select(`circle.${this.BUBBLE_CLASS}`)\r\n            .attr('fill', this.getColor)\r\n            .attr('r', d => this.bubbleR(d))\r\n            .attr('opacity', d => (this.bubbleR(d) > 0) ? 1 : 0);\r\n\r\n        this.doUpdateLabels(bubbleG);\r\n        this.doUpdateTitles(bubbleG);\r\n    }\r\n\r\n    _removeNodes (bubbleG) {\r\n        bubbleG.exit().remove();\r\n    }\r\n\r\n    _bubbleX (d) {\r\n        let x = this.x()(this.keyAccessor()(d));\r\n        if (isNaN(x) || !isFinite(x)) {\r\n            x = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    _bubbleY (d) {\r\n        let y = this.y()(this.valueAccessor()(d));\r\n        if (isNaN(y) || !isFinite(y)) {\r\n            y = 0;\r\n        }\r\n        return y;\r\n    }\r\n\r\n    renderBrush () {\r\n        // override default x axis brush from parent chart\r\n    }\r\n\r\n    redrawBrush (brushSelection, doTransition) {\r\n        // override default x axis brush from parent chart\r\n        this.fadeDeselectedArea(brushSelection);\r\n    }\r\n}\r\n\r\nexport const bubbleChart = (parent, chartGroup) => new BubbleChart(parent, chartGroup);\r\n","import {BaseMixin} from '../base/base-mixin';\r\nimport {BubbleMixin} from '../base/bubble-mixin';\r\nimport {transition} from '../core/core';\r\nimport {constants} from '../core/constants';\r\nimport {utils} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\n\r\nconst BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\r\nconst BUBBLE_NODE_CLASS = 'node';\r\nconst BUBBLE_CLASS = 'bubble';\r\n\r\n/**\r\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\r\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\r\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\r\n * and coloring.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\r\n * @mixes BubbleMixin\r\n * @mixes BaseMixin\r\n */\r\nexport class BubbleOverlay extends BubbleMixin(BaseMixin) {\r\n    /**\r\n     * Create a Bubble Overlay.\r\n     *\r\n     * @example\r\n     * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\r\n     * var bubbleChart1 = BubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\r\n     * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\r\n     * var bubbleChart2 = new CompositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        /**\r\n         * **mandatory**\r\n         *\r\n         * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\r\n         * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\r\n         * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\r\n         * @example\r\n         * // set up underlying svg element\r\n         * chart.svg(d3.select('#chart svg'));\r\n         * @param {SVGElement|d3.selection} [imageElement]\r\n         * @returns {BubbleOverlay}\r\n         */\r\n        this._g = undefined;\r\n        this._points = [];\r\n        this._keyboardAccessible = false;\r\n\r\n        this.transitionDuration(750);\r\n\r\n        this.transitionDelay(0);\r\n\r\n        this.radiusValueAccessor(d => d.value);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\r\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\r\n     * then a bubble will be generated at the position specified by the function. x and y\r\n     * value specified here are relative to the underlying svg.\r\n     * @param {String} name\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @returns {BubbleOverlay}\r\n     */\r\n    point (name, x, y) {\r\n        this._points.push({name: name, x: x, y: y});\r\n        return this;\r\n    }\r\n\r\n    _doRender () {\r\n        this._g = this._initOverlayG();\r\n\r\n        this.r().range([this.MIN_RADIUS, this.width() * this.maxBubbleRelativeSize()]);\r\n\r\n        this._initializeBubbles();\r\n\r\n        this.fadeDeselectedArea(this.filter());\r\n\r\n        return this;\r\n    }\r\n\r\n    _initOverlayG () {\r\n        this._g = this.select(`g.${BUBBLE_OVERLAY_CLASS}`);\r\n        if (this._g.empty()) {\r\n            this._g = this.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\r\n        }\r\n        return this._g;\r\n    }\r\n\r\n    _initializeBubbles () {\r\n        const data = this._mapData();\r\n        this.calculateRadiusDomain();\r\n\r\n        this._points.forEach(point => {\r\n            const nodeG = this._getNodeG(point, data);\r\n\r\n            let circle = nodeG.select(`circle.${BUBBLE_CLASS}`);\r\n\r\n            if (circle.empty()) {\r\n                circle = nodeG.append('circle')\r\n                    .attr('class', BUBBLE_CLASS)\r\n                    .classed('dc-tabbable', this._keyboardAccessible)\r\n                    .attr('r', 0)\r\n                    .attr('fill', this.getColor)\r\n                    .on('click', d3compat.eventHandler(d => this.onClick(d)));\r\n            }\r\n\r\n            if (this._keyboardAccessible) {\r\n                this._makeKeyboardAccessible(this.onClick);\r\n            }\r\n\r\n            transition(circle, this.transitionDuration(), this.transitionDelay())\r\n                .attr('r', d => this.bubbleR(d));\r\n\r\n            this._doRenderLabel(nodeG);\r\n\r\n            this._doRenderTitles(nodeG);\r\n        });\r\n    }\r\n\r\n    _mapData () {\r\n        const data = {};\r\n        this.data().forEach(datum => {\r\n            data[this.keyAccessor()(datum)] = datum;\r\n        });\r\n        return data;\r\n    }\r\n\r\n    _getNodeG (point, data) {\r\n        const bubbleNodeClass = `${BUBBLE_NODE_CLASS} ${utils.nameToId(point.name)}`;\r\n\r\n        let nodeG = this._g.select(`g.${utils.nameToId(point.name)}`);\r\n\r\n        if (nodeG.empty()) {\r\n            nodeG = this._g.append('g')\r\n                .attr('class', bubbleNodeClass)\r\n                .attr('transform', `translate(${point.x},${point.y})`);\r\n        }\r\n\r\n        nodeG.datum(data[point.name]);\r\n\r\n        return nodeG;\r\n    }\r\n\r\n    _doRedraw () {\r\n        this._updateBubbles();\r\n\r\n        this.fadeDeselectedArea(this.filter());\r\n\r\n        return this;\r\n    }\r\n\r\n    _updateBubbles () {\r\n        const data = this._mapData();\r\n        this.calculateRadiusDomain();\r\n\r\n        this._points.forEach(point => {\r\n            const nodeG = this._getNodeG(point, data);\r\n\r\n            const circle = nodeG.select(`circle.${BUBBLE_CLASS}`);\r\n\r\n            transition(circle, this.transitionDuration(), this.transitionDelay())\r\n                .attr('r', d => this.bubbleR(d))\r\n                .attr('fill', this.getColor);\r\n\r\n            this.doUpdateLabels(nodeG);\r\n\r\n            this.doUpdateTitles(nodeG);\r\n        });\r\n    }\r\n\r\n    debug (flag) {\r\n        if (flag) {\r\n            let debugG = this.select(`g.${constants.DEBUG_GROUP_CLASS}`);\r\n\r\n            if (debugG.empty()) {\r\n                debugG = this.svg()\r\n                    .append('g')\r\n                    .attr('class', constants.DEBUG_GROUP_CLASS);\r\n            }\r\n\r\n            const debugText = debugG.append('text')\r\n                .attr('x', 10)\r\n                .attr('y', 20);\r\n\r\n            debugG\r\n                .append('rect')\r\n                .attr('width', this.width())\r\n                .attr('height', this.height())\r\n                .on('mousemove', d3compat.eventHandler((d, evt) => {\r\n                    const position = d3compat.pointer(evt, debugG.node());\r\n                    const msg = `${position[0]}, ${position[1]}`;\r\n                    debugText.text(msg);\r\n                }));\r\n        } else {\r\n            this.selectAll('.debug').remove();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport const bubbleOverlay = (parent, chartGroup) => new BubbleOverlay(parent, chartGroup);\r\n","import {select} from 'd3-selection';\r\n\r\nimport {events} from '../core/events';\r\nimport {BaseMixin} from '../base/base-mixin';\r\nimport {utils} from '../core/utils'\r\nimport {d3compat} from '../core/config';\r\n\r\nconst GROUP_CSS_CLASS = 'dc-cbox-group';\r\nconst ITEM_CSS_CLASS = 'dc-cbox-item';\r\n\r\n/**\r\n * The CboxMenu is a simple widget designed to filter a dimension by\r\n * selecting option(s) from a set of HTML `<input />` elements. The menu can be\r\n * made into a set of radio buttons (single select) or checkboxes (multiple).\r\n * @mixes BaseMixin\r\n */\r\nexport class CboxMenu extends BaseMixin {\r\n    /**\r\n     * Create a Cbox Menu.\r\n     *\r\n     * @example\r\n     * // create a cboxMenu under #cbox-container using the default global chart group\r\n     * var cbox = new CboxMenu('#cbox-container')\r\n     *                .dimension(states)\r\n     *                .group(stateGroup);\r\n     * // the option text can be set via the title() function\r\n     * // by default the option text is '`key`: `value`'\r\n     * cbox.title(function (d){\r\n     *     return 'STATE: ' + d.key;\r\n     * })\r\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\r\n     * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\r\n     * Interaction with the widget will only trigger events and redraws within its group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._cbox = undefined;\r\n        this._promptText = 'Select all';\r\n        this._multiple = false;\r\n        this._inputType = 'radio';\r\n        this._promptValue = null;\r\n\r\n        this._uniqueId = utils.uniqueId();\r\n\r\n        this.data(group => group.all().filter(this._filterDisplayed));\r\n\r\n        // There is an accessor for this attribute, initialized with default value\r\n        this._filterDisplayed = d => this.valueAccessor()(d) > 0;\r\n\r\n        this._order = (a, b) => {\r\n            if (this.keyAccessor()(a) > this.keyAccessor()(b)) {\r\n                return 1;\r\n            }\r\n            if (this.keyAccessor()(a) < this.keyAccessor()(b)) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _doRender () {\r\n        return this._doRedraw();\r\n    }\r\n\r\n    _doRedraw () {\r\n        this.select('ul').remove();\r\n        this._cbox = this.root()\r\n            .append('ul')\r\n            .classed(GROUP_CSS_CLASS, true);\r\n        this._renderOptions();\r\n\r\n        if (this.hasFilter() && this._multiple) {\r\n            this._cbox.selectAll('input')\r\n            // adding `false` avoids failing test cases in phantomjs\r\n                .property('checked', d => d && this.filters().indexOf(String(this.keyAccessor()(d))) >= 0 || false);\r\n        } else if (this.hasFilter()) {\r\n            this._cbox.selectAll('input')\r\n                .property('checked', d => {\r\n                    if (!d) {\r\n                        return false;\r\n                    }\r\n                    return this.keyAccessor()(d) === this.filter();\r\n                });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _renderOptions () {\r\n        let options = this._cbox\r\n            .selectAll(`li.${ITEM_CSS_CLASS}`)\r\n            .data(this.data(), d => this.keyAccessor()(d));\r\n\r\n        options.exit().remove();\r\n\r\n        options = options.enter()\r\n            .append('li')\r\n            .classed(ITEM_CSS_CLASS, true)\r\n            .merge(options);\r\n\r\n        options\r\n            .append('input')\r\n            .attr('type', this._inputType)\r\n            .attr('value', d => this.keyAccessor()(d))\r\n            .attr('name', `domain_${this._uniqueId}`)\r\n            .attr('id', (d, i) => `input_${this._uniqueId}_${i}`);\r\n        options\r\n            .append('label')\r\n            .attr('for', (d, i) => `input_${this._uniqueId}_${i}`)\r\n            .text(this.title());\r\n\r\n        const chart = this;\r\n        // 'all' option\r\n        if (this._multiple) {\r\n            this._cbox\r\n                .append('li')\r\n                .append('input')\r\n                .attr('type', 'reset')\r\n                .text(this._promptText)\r\n                .on('click', d3compat.eventHandler(function (d, evt) {\r\n                    return chart._onChange(d, evt, this);\r\n                }));\r\n        } else {\r\n            const li = this._cbox.append('li');\r\n            li.append('input')\r\n                .attr('type', this._inputType)\r\n                .attr('value', this._promptValue)\r\n                .attr('name', `domain_${this._uniqueId}`)\r\n                .attr('id', (d, i) => `input_${this._uniqueId}_all`)\r\n                .property('checked', true);\r\n            li.append('label')\r\n                .attr('for', (d, i) => `input_${this._uniqueId}_all`)\r\n                .text(this._promptText);\r\n        }\r\n\r\n        this._cbox\r\n            .selectAll(`li.${ITEM_CSS_CLASS}`)\r\n            .sort(this._order);\r\n\r\n        this._cbox.on('change', d3compat.eventHandler(function (d, evt) {\r\n            return chart._onChange(d, evt, this);\r\n        }));\r\n        return options;\r\n    }\r\n\r\n    _onChange (d, evt, element) {\r\n        let values;\r\n\r\n        const target = select(evt.target);\r\n        let options;\r\n\r\n        if (!target.datum()) {\r\n            values = this._promptValue || null;\r\n        } else {\r\n            options = select(element).selectAll('input')\r\n                .filter(function (o) {\r\n                    if (o) {\r\n                        return this.checked;\r\n                    }\r\n                });\r\n            values = options.nodes().map(option => option.value);\r\n            // check if only prompt option is selected\r\n            if (!this._multiple && values.length === 1) {\r\n                values = values[0];\r\n            }\r\n        }\r\n        this.onChange(values);\r\n    }\r\n\r\n    onChange (val) {\r\n        if (val && this._multiple) {\r\n            this.replaceFilter([val]);\r\n        } else if (val) {\r\n            this.replaceFilter(val);\r\n        } else {\r\n            this.filterAll();\r\n        }\r\n        events.trigger(() => {\r\n            this.redrawGroup();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get or set the function that controls the ordering of option tags in the\r\n     * cbox menu. By default options are ordered by the group key in ascending\r\n     * order.\r\n     * @param {Function} [order]\r\n     * @returns {Function|CboxMenu}\r\n     * @example\r\n     * // order by the group's value\r\n     * chart.order(function (a,b) {\r\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\r\n     * });\r\n     */\r\n    order (order) {\r\n        if (!arguments.length) {\r\n            return this._order;\r\n        }\r\n        this._order = order;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the text displayed in the options used to prompt selection.\r\n     * @param {String} [promptText='Select all']\r\n     * @returns {String|CboxMenu}\r\n     * @example\r\n     * chart.promptText('All states');\r\n     */\r\n    promptText (promptText) {\r\n        if (!arguments.length) {\r\n            return this._promptText;\r\n        }\r\n        this._promptText = promptText;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the function that filters options prior to display. By default options\r\n     * with a value of < 1 are not displayed.\r\n     * @param {function} [filterDisplayed]\r\n     * @returns {Function|CboxMenu}\r\n     * @example\r\n     * // display all options override the `filterDisplayed` function:\r\n     * chart.filterDisplayed(function () {\r\n     *     return true;\r\n     * });\r\n     */\r\n    filterDisplayed (filterDisplayed) {\r\n        if (!arguments.length) {\r\n            return this._filterDisplayed;\r\n        }\r\n        this._filterDisplayed = filterDisplayed;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Controls the type of input element. Setting it to true converts\r\n     * the HTML `input` tags from radio buttons to checkboxes.\r\n     * @param {boolean} [multiple=false]\r\n     * @returns {Boolean|CboxMenu}\r\n     * @example\r\n     * chart.multiple(true);\r\n     */\r\n    multiple (multiple) {\r\n        if (!arguments.length) {\r\n            return this._multiple;\r\n        }\r\n        this._multiple = multiple;\r\n        if (this._multiple) {\r\n            this._inputType = 'checkbox';\r\n        } else {\r\n            this._inputType = 'radio';\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Controls the default value to be used for\r\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\r\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\r\n     * just the prompt is selected.\r\n     * @param {?*} [promptValue=null]\r\n     * @returns {*|CboxMenu}\r\n     */\r\n    promptValue (promptValue) {\r\n        if (!arguments.length) {\r\n            return this._promptValue;\r\n        }\r\n        this._promptValue = promptValue;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const cboxMenu = (parent, chartGroup) => new CboxMenu(parent, chartGroup);\r\n","import {min, max} from 'd3-array';\r\nimport {scaleLinear} from 'd3-scale';\r\nimport {axisRight} from 'd3-axis';\r\n\r\nimport {utils} from '../core/utils';\r\nimport {CoordinateGridMixin} from '../base/coordinate-grid-mixin';\r\n\r\nconst SUB_CHART_CLASS = 'sub';\r\nconst DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\r\n\r\n/**\r\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\r\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\r\n * achieve some quite flexible charting effects.\r\n * @mixes CoordinateGridMixin\r\n */\r\nexport class CompositeChart extends CoordinateGridMixin {\r\n    /**\r\n     * Create a Composite Chart.\r\n     * @example\r\n     * // create a composite chart under #chart-container1 element using the default global chart group\r\n     * var compositeChart1 = new CompositeChart('#chart-container1');\r\n     * // create a composite chart under #chart-container2 element using chart group A\r\n     * var compositeChart2 = new CompositeChart('#chart-container2', 'chartGroupA');\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._children = [];\r\n\r\n        this._childOptions = {};\r\n\r\n        this._shareColors = false;\r\n        this._shareTitle = true;\r\n        this._alignYAxes = false;\r\n\r\n        this._rightYAxis = axisRight();\r\n        this._rightYAxisLabel = 0;\r\n        this._rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING;\r\n        this._rightY = undefined;\r\n        this._rightAxisGridLines = false;\r\n\r\n        this._mandatoryAttributes([]);\r\n        this.transitionDuration(500);\r\n        this.transitionDelay(0);\r\n\r\n        this.on('filtered.dcjs-composite-chart', chart => {\r\n            // Propagate the filters onto the children\r\n            // Notice that on children the call is .replaceFilter and not .filter\r\n            //   the reason is that _chart.filter() returns the entire current set of filters not just the last added one\r\n            for (let i = 0; i < this._children.length; ++i) {\r\n                this._children[i].replaceFilter(this.filter());\r\n            }\r\n        });\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _generateG () {\r\n        const g = super._generateG();\r\n\r\n        for (let i = 0; i < this._children.length; ++i) {\r\n            const child = this._children[i];\r\n\r\n            this._generateChildG(child, i);\r\n\r\n            if (!child.dimension()) {\r\n                child.dimension(this.dimension());\r\n            }\r\n            if (!child.group()) {\r\n                child.group(this.group());\r\n            }\r\n\r\n            child.chartGroup(this.chartGroup());\r\n            child.svg(this.svg());\r\n            child.xUnits(this.xUnits());\r\n            child.transitionDuration(this.transitionDuration(), this.transitionDelay());\r\n            child.parentBrushOn(this.brushOn());\r\n            child.brushOn(false);\r\n            child.renderTitle(this.renderTitle());\r\n            child.elasticX(this.elasticX());\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    rescale () {\r\n        super.rescale();\r\n\r\n        this._children.forEach(child => {\r\n            child.rescale();\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    resizing (resizing) {\r\n        if (!arguments.length) {\r\n            return super.resizing();\r\n        }\r\n        super.resizing(resizing);\r\n\r\n        this._children.forEach(child => {\r\n            child.resizing(resizing);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    _prepareYAxis () {\r\n        const left = (this._leftYAxisChildren().length !== 0);\r\n        const right = (this._rightYAxisChildren().length !== 0);\r\n        const ranges = this._calculateYAxisRanges(left, right);\r\n\r\n        if (left) {\r\n            this._prepareLeftYAxis(ranges);\r\n        }\r\n        if (right) {\r\n            this._prepareRightYAxis(ranges);\r\n        }\r\n\r\n        if (this._leftYAxisChildren().length > 0 && !this._rightAxisGridLines) {\r\n            this._renderHorizontalGridLinesForAxis(this.g(), this.y(), this.yAxis());\r\n        } else if (this._rightYAxisChildren().length > 0) {\r\n            this._renderHorizontalGridLinesForAxis(this.g(), this._rightY, this._rightYAxis);\r\n        }\r\n    }\r\n\r\n    renderYAxis () {\r\n        if (this._leftYAxisChildren().length !== 0) {\r\n            this.renderYAxisAt('y', this.yAxis(), this.margins().left);\r\n            this.renderYAxisLabel('y', this.yAxisLabel(), -90);\r\n        }\r\n\r\n        if (this._rightYAxisChildren().length !== 0) {\r\n            this.renderYAxisAt('yr', this.rightYAxis(), this.width() - this.margins().right);\r\n            this.renderYAxisLabel('yr', this.rightYAxisLabel(), 90, this.width() - this._rightYAxisLabelPadding);\r\n        }\r\n    }\r\n\r\n    _calculateYAxisRanges (left, right) {\r\n        let lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\r\n        let ranges;\r\n\r\n        if (left) {\r\n            lyAxisMin = this._yAxisMin();\r\n            lyAxisMax = this._yAxisMax();\r\n        }\r\n\r\n        if (right) {\r\n            ryAxisMin = this._rightYAxisMin();\r\n            ryAxisMax = this._rightYAxisMax();\r\n        }\r\n\r\n        if (this.alignYAxes() && left && right) {\r\n            ranges = this._alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\r\n        }\r\n\r\n        return ranges || {\r\n            lyAxisMin: lyAxisMin,\r\n            lyAxisMax: lyAxisMax,\r\n            ryAxisMin: ryAxisMin,\r\n            ryAxisMax: ryAxisMax\r\n        };\r\n    }\r\n\r\n    _alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\r\n        // since the two series will share a zero, each Y is just a multiple\r\n        // of the other. and the ratio should be the ratio of the ranges of the\r\n        // input data, so that they come out the same height. so we just min/max\r\n\r\n        // note: both ranges already include zero due to the stack mixin (#667)\r\n        // if #667 changes, we can reconsider whether we want data height or\r\n        // height from zero to be equal. and it will be possible for the axes\r\n        // to be aligned but not visible.\r\n        const extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\r\n\r\n        return {\r\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\r\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\r\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\r\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\r\n        };\r\n    }\r\n\r\n    _prepareRightYAxis (ranges) {\r\n        const needDomain = this.rightY() === undefined || this.elasticY(),\r\n            needRange = needDomain || this.resizing();\r\n        if (this.rightY() === undefined) {\r\n            this.rightY(scaleLinear());\r\n        }\r\n        if (needDomain) {\r\n            this.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\r\n        }\r\n        if (needRange) {\r\n            this.rightY().rangeRound([this.yAxisHeight(), 0]);\r\n        }\r\n\r\n        this.rightY().range([this.yAxisHeight(), 0]);\r\n        this.rightYAxis(this.rightYAxis().scale(this.rightY()));\r\n\r\n        // In D3v4 create a RightAxis\r\n        // _chart.rightYAxis().orient('right');\r\n    }\r\n\r\n    _prepareLeftYAxis (ranges) {\r\n        const needDomain = this.y() === undefined || this.elasticY(),\r\n            needRange = needDomain || this.resizing();\r\n        if (this.y() === undefined) {\r\n            this.y(scaleLinear());\r\n        }\r\n        if (needDomain) {\r\n            this.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\r\n        }\r\n        if (needRange) {\r\n            this.y().rangeRound([this.yAxisHeight(), 0]);\r\n        }\r\n\r\n        this.y().range([this.yAxisHeight(), 0]);\r\n        this.yAxis(this.yAxis().scale(this.y()));\r\n\r\n        // In D3v4 create a LeftAxis\r\n        // _chart.yAxis().orient('left');\r\n    }\r\n\r\n    _generateChildG (child, i) {\r\n        child._generateG(this.g());\r\n        child.g().attr('class', `${SUB_CHART_CLASS} _${i}`);\r\n    }\r\n\r\n    plotData () {\r\n        for (let i = 0; i < this._children.length; ++i) {\r\n            const child = this._children[i];\r\n\r\n            if (!child.g()) {\r\n                this._generateChildG(child, i);\r\n            }\r\n\r\n            if (this._shareColors) {\r\n                child.colors(this.colors());\r\n            }\r\n\r\n            child.x(this.x());\r\n\r\n            child.xAxis(this.xAxis());\r\n\r\n            if (child.useRightYAxis()) {\r\n                child.y(this.rightY());\r\n                child.yAxis(this.rightYAxis());\r\n            } else {\r\n                child.y(this.y());\r\n                child.yAxis(this.yAxis());\r\n            }\r\n\r\n            child.plotData();\r\n\r\n            child._activateRenderlets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\r\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\r\n     * are present.\r\n     * @param {Boolean} [useRightAxisGridLines=false]\r\n     * @returns {Boolean|CompositeChart}\r\n     */\r\n    useRightAxisGridLines (useRightAxisGridLines) {\r\n        if (!arguments) {\r\n            return this._rightAxisGridLines;\r\n        }\r\n\r\n        this._rightAxisGridLines = useRightAxisGridLines;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\r\n     * {@link BaseMixin#options .options} on each child chart.\r\n     * @param {Object} [childOptions]\r\n     * @returns {Object|CompositeChart}\r\n     */\r\n    childOptions (childOptions) {\r\n        if (!arguments.length) {\r\n            return this._childOptions;\r\n        }\r\n        this._childOptions = childOptions;\r\n        this._children.forEach(child => {\r\n            child.options(this._childOptions);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    fadeDeselectedArea (brushSelection) {\r\n        if (this.brushOn()) {\r\n            for (let i = 0; i < this._children.length; ++i) {\r\n                const child = this._children[i];\r\n                child.fadeDeselectedArea(brushSelection);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set or get the right y axis label.\r\n     * @param {String} [rightYAxisLabel]\r\n     * @param {Number} [padding]\r\n     * @returns {String|CompositeChart}\r\n     */\r\n    rightYAxisLabel (rightYAxisLabel, padding) {\r\n        if (!arguments.length) {\r\n            return this._rightYAxisLabel;\r\n        }\r\n        this._rightYAxisLabel = rightYAxisLabel;\r\n        this.margins().right -= this._rightYAxisLabelPadding;\r\n        this._rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\r\n        this.margins().right += this._rightYAxisLabelPadding;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Combine the given charts into one single composite coordinate grid chart.\r\n     * @example\r\n     * moveChart.compose([\r\n     *     // when creating sub-chart you need to pass in the parent chart\r\n     *     new LineChart(moveChart)\r\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\r\n     *         .valueAccessor(function (d){return d.value.avg;})\r\n     *         // most of the normal functions will continue to work in a composed chart\r\n     *         .renderArea(true)\r\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\r\n     *         .title(function (d){\r\n     *             var value = d.value.avg?d.value.avg:d.value;\r\n     *             if(isNaN(value)) value = 0;\r\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\r\n     *         }),\r\n     *     new BarChart(moveChart)\r\n     *         .group(volumeByMonthGroup)\r\n     *         .centerBar(true)\r\n     * ]);\r\n     * @param {Array<Chart>} [subChartArray]\r\n     * @returns {CompositeChart}\r\n     */\r\n    compose (subChartArray) {\r\n        this._children = subChartArray;\r\n        this._children.forEach(child => {\r\n            child.height(this.height());\r\n            child.width(this.width());\r\n            child.margins(this.margins());\r\n\r\n            if (this._shareTitle) {\r\n                child.title(this.title());\r\n            }\r\n\r\n            child.options(this._childOptions);\r\n        });\r\n        this.rescale();\r\n        return this;\r\n    }\r\n\r\n    _setChildrenProperty (prop, value) {\r\n        this._children.forEach(child => {\r\n            child[prop](value);\r\n        });\r\n    }\r\n\r\n    // properties passed through in compose()\r\n    height (height) {\r\n        if(!arguments.length) {\r\n            return super.height();\r\n        }\r\n        super.height(height);\r\n        this._setChildrenProperty('height', height);\r\n        return this;\r\n    }\r\n\r\n    width (width) {\r\n        if(!arguments.length) {\r\n            return super.width();\r\n        }\r\n        super.width(width);\r\n        this._setChildrenProperty('width', width);\r\n        return this;\r\n    }\r\n\r\n    margins (margins) {\r\n        if(!arguments.length) {\r\n            return super.margins();\r\n        }\r\n        super.margins(margins);\r\n        this._setChildrenProperty('margins', margins);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the child charts which are composed into the composite chart.\r\n     * @returns {Array<BaseMixin>}\r\n     */\r\n    children () {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Get or set color sharing for the chart. If set, the {@link ColorMixin#colors .colors()} value from this chart\r\n     * will be shared with composed children. Additionally if the child chart implements\r\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\r\n     * specific to its order in the composition.\r\n     * @param {Boolean} [shareColors=false]\r\n     * @returns {Boolean|CompositeChart}\r\n     */\r\n    shareColors (shareColors) {\r\n        if (!arguments.length) {\r\n            return this._shareColors;\r\n        }\r\n        this._shareColors = shareColors;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set title sharing for the chart. If set, the {@link BaseMixin#title .title()} value from\r\n     * this chart will be shared with composed children.\r\n     *\r\n     * Note: currently you must call this before `compose` or the child will still get the parent's\r\n     * `title` function!\r\n     * @param {Boolean} [shareTitle=true]\r\n     * @returns {Boolean|CompositeChart}\r\n     */\r\n    shareTitle (shareTitle) {\r\n        if (!arguments.length) {\r\n            return this._shareTitle;\r\n        }\r\n        this._shareTitle = shareTitle;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\r\n     * generated by the chart implementation.\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @param {d3.scale} [yScale]\r\n     * @returns {d3.scale|CompositeChart}\r\n     */\r\n    rightY (yScale) {\r\n        if (!arguments.length) {\r\n            return this._rightY;\r\n        }\r\n        this._rightY = yScale;\r\n        this.rescale();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\r\n     * will be parallel to x axis. This only has effect when {@link CoordinateGridMixin#elasticY elasticY} is true.\r\n     * @param {Boolean} [alignYAxes=false]\r\n     * @returns {Chart}\r\n     */\r\n    alignYAxes (alignYAxes) {\r\n        if (!arguments.length) {\r\n            return this._alignYAxes;\r\n        }\r\n        this._alignYAxes = alignYAxes;\r\n        this.rescale();\r\n        return this;\r\n    }\r\n\r\n    _leftYAxisChildren () {\r\n        return this._children.filter(child => !child.useRightYAxis());\r\n    }\r\n\r\n    _rightYAxisChildren () {\r\n        return this._children.filter(child => child.useRightYAxis());\r\n    }\r\n\r\n    _getYAxisMin (charts) {\r\n        return charts.map(c => c.yAxisMin());\r\n    }\r\n\r\n    _yAxisMin () {\r\n        return min(this._getYAxisMin(this._leftYAxisChildren()));\r\n    }\r\n\r\n    _rightYAxisMin () {\r\n        return min(this._getYAxisMin(this._rightYAxisChildren()));\r\n    }\r\n\r\n    _getYAxisMax (charts) {\r\n        return charts.map(c => c.yAxisMax());\r\n    }\r\n\r\n    _yAxisMax () {\r\n        return utils.add(max(this._getYAxisMax(this._leftYAxisChildren())), this.yAxisPadding());\r\n    }\r\n\r\n    _rightYAxisMax () {\r\n        return utils.add(max(this._getYAxisMax(this._rightYAxisChildren())), this.yAxisPadding());\r\n    }\r\n\r\n    _getAllXAxisMinFromChildCharts () {\r\n        return this._children.map(c => c.xAxisMin());\r\n    }\r\n\r\n    xAxisMin () {\r\n        return utils.subtract(min(this._getAllXAxisMinFromChildCharts()), this.xAxisPadding(), this.xAxisPaddingUnit());\r\n    }\r\n\r\n    _getAllXAxisMaxFromChildCharts () {\r\n        return this._children.map(c => c.xAxisMax());\r\n    }\r\n\r\n    xAxisMax () {\r\n        return utils.add(max(this._getAllXAxisMaxFromChildCharts()), this.xAxisPadding(), this.xAxisPaddingUnit());\r\n    }\r\n\r\n    legendables () {\r\n        return this._children.reduce((items, child) => {\r\n            if (this._shareColors) {\r\n                child.colors(this.colors());\r\n            }\r\n            items.push.apply(items, child.legendables());\r\n            return items;\r\n        }, []);\r\n    }\r\n\r\n    legendHighlight (d) {\r\n        for (let j = 0; j < this._children.length; ++j) {\r\n            const child = this._children[j];\r\n            child.legendHighlight(d);\r\n        }\r\n    }\r\n\r\n    legendReset (d) {\r\n        for (let j = 0; j < this._children.length; ++j) {\r\n            const child = this._children[j];\r\n            child.legendReset(d);\r\n        }\r\n    }\r\n\r\n    legendToggle () {\r\n        console.log('composite should not be getting legendToggle itself');\r\n    }\r\n\r\n    /**\r\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\r\n     * axis customization is required. The y axis in dc.js is an instance of a\r\n     * [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight) therefore it supports any valid\r\n     * d3 axis manipulation.\r\n     *\r\n     * **Caution**: The right y axis is usually generated internally by dc; resetting it may cause\r\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\r\n     * returns the axis, not the chart,\r\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\r\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\r\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md#axisRight}\r\n     * @example\r\n     * // customize y axis tick format\r\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\r\n     * // customize y axis tick values\r\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\r\n     * @param {d3.axisRight} [rightYAxis]\r\n     * @returns {d3.axisRight|CompositeChart}\r\n     */\r\n    rightYAxis (rightYAxis) {\r\n        if (!arguments.length) {\r\n            return this._rightYAxis;\r\n        }\r\n        this._rightYAxis = rightYAxis;\r\n        return this;\r\n    }\r\n\r\n    yAxisMin () {\r\n        throw new Error('Not supported for this chart type');\r\n    }\r\n\r\n    yAxisMax () {\r\n        throw new Error('Not supported for this chart type');\r\n    }\r\n}\r\n\r\nexport const compositeChart = (parent, chartGroup) => new CompositeChart(parent, chartGroup);\r\n","import {format} from 'd3-format';\r\n\r\nimport {logger} from '../core/logger';\r\nimport {BaseMixin} from '../base/base-mixin';\r\n\r\n/**\r\n * The data count widget is a simple widget designed to display the number of records selected by the\r\n * current filters out of the total number of records in the data set. Once created the data count widget\r\n * will automatically update the text content of child elements with the following classes:\r\n *\r\n * * `.total-count` - total number of records\r\n * * `.filter-count` - number of records matched by the current filters\r\n *\r\n * Note: this widget works best for the specific case of showing the number of records out of a\r\n * total. If you want a more general-purpose numeric display, please use the\r\n * {@link NumberDisplay} widget instead.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * @mixes BaseMixin\r\n */\r\nexport class DataCount extends BaseMixin {\r\n    /**\r\n     * Create a Data Count widget.\r\n     * @example\r\n     * var ndx = crossfilter(data);\r\n     * var all = ndx.groupAll();\r\n     *\r\n     * new DataCount('.dc-data-count')\r\n     *     .crossfilter(ndx)\r\n     *     .groupAll(all);\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._formatNumber = format(',d');\r\n        this._crossfilter = null;\r\n        this._groupAll = null;\r\n        this._html = {some: '', all: ''};\r\n\r\n        this._mandatoryAttributes(['crossfilter', 'groupAll']);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\r\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\r\n     * `%filter-count` will be replaced with the number of selected records.\r\n     * - all: HTML template to use if all items are selected\r\n     * - some: HTML template to use if not all items are selected\r\n     * @example\r\n     * counter.html({\r\n     *      some: '%filter-count out of %total-count records selected',\r\n     *      all: 'All records selected. Click on charts to apply filters'\r\n     * })\r\n     * @param {{some:String, all: String}} [options]\r\n     * @returns {{some:String, all: String}|DataCount}\r\n     */\r\n    html (options) {\r\n        if (!arguments.length) {\r\n            return this._html;\r\n        }\r\n        if (options.all) {\r\n            this._html.all = options.all;\r\n        }\r\n        if (options.some) {\r\n            this._html.some = options.some;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an optional function to format the filter count and total count.\r\n     * @see {@link https://github.com/d3/d3-format/blob/master/README.md#format d3.format}\r\n     * @example\r\n     * counter.formatNumber(d3.format('.2g'))\r\n     * @param {Function} [formatter=d3.format('.2g')]\r\n     * @returns {Function|DataCount}\r\n     */\r\n    formatNumber (formatter) {\r\n        if (!arguments.length) {\r\n            return this._formatNumber;\r\n        }\r\n        this._formatNumber = formatter;\r\n        return this;\r\n    }\r\n\r\n    _doRender () {\r\n        const tot = this.crossfilter().size(),\r\n            val = this.groupAll().value();\r\n        const all = this._formatNumber(tot);\r\n        const selected = this._formatNumber(val);\r\n\r\n        if ((tot === val) && (this._html.all !== '')) {\r\n            this.root().html(this._html.all.replace('%total-count', all).replace('%filter-count', selected));\r\n        } else if (this._html.some !== '') {\r\n            this.root().html(this._html.some.replace('%total-count', all).replace('%filter-count', selected));\r\n        } else {\r\n            this.selectAll('.total-count').text(all);\r\n            this.selectAll('.filter-count').text(selected);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _doRedraw () {\r\n        return this._doRender();\r\n    }\r\n\r\n    crossfilter (cf) {\r\n        if (!arguments.length) {\r\n            return this._crossfilter;\r\n        }\r\n        this._crossfilter = cf;\r\n        return this;\r\n    }\r\n\r\n    dimension (cf) {\r\n        logger.warnOnce('consider using dataCount.crossfilter instead of dataCount.dimension for clarity');\r\n        if (!arguments.length) {\r\n            return this.crossfilter();\r\n        }\r\n        return this.crossfilter(cf);\r\n    }\r\n\r\n    groupAll (groupAll) {\r\n        if (!arguments.length) {\r\n            return this._groupAll;\r\n        }\r\n        this._groupAll = groupAll;\r\n        return this;\r\n    }\r\n\r\n    group (groupAll) {\r\n        logger.warnOnce('consider using dataCount.groupAll instead of dataCount.group for clarity');\r\n        if (!arguments.length) {\r\n            return this.groupAll();\r\n        }\r\n        return this.groupAll(groupAll);\r\n    }\r\n}\r\n\r\nexport const dataCount = (parent, chartGroup) => new DataCount(parent, chartGroup);\r\n","import {ascending} from 'd3-array';\r\n\r\nimport {logger} from '../core/logger';\r\nimport {BaseMixin} from '../base/base-mixin';\r\nimport {d3compat} from '../core/config';\r\n\r\nconst LABEL_CSS_CLASS = 'dc-grid-label';\r\nconst ITEM_CSS_CLASS = 'dc-grid-item';\r\nconst SECTION_CSS_CLASS = 'dc-grid-section dc-grid-group';\r\nconst GRID_CSS_CLASS = 'dc-grid-top';\r\n\r\n/**\r\n * Data grid is a simple widget designed to list the filtered records, providing\r\n * a simple way to define how the items are displayed.\r\n *\r\n * Note: Formerly the data grid chart (and data table) used the {@link DataGrid#group group} attribute as a\r\n * keying function for {@link https://github.com/d3/d3-collection/blob/master/README.md#nest nesting} the data\r\n * together in sections.  This was confusing so it has been renamed to `section`, although `group` still works.\r\n *\r\n * Examples:\r\n * - {@link https://dc-js.github.io/dc.js/ep/ List of members of the european parliament}\r\n * @mixes BaseMixin\r\n */\r\nexport class DataGrid extends BaseMixin {\r\n    /**\r\n     * Create a Data Grid.\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._section = null;\r\n        this._size = 999; // shouldn't be needed, but you might\r\n        this._html = function (d) {\r\n            return `you need to provide an html() handling param:  ${JSON.stringify(d)}`;\r\n        };\r\n        this._sortBy = function (d) {\r\n            return d;\r\n        };\r\n        this._order = ascending;\r\n        this._beginSlice = 0;\r\n        this._endSlice = undefined;\r\n\r\n        this._htmlSection = d => `<div class='${SECTION_CSS_CLASS}'><h1 class='${LABEL_CSS_CLASS}'>${ \r\n            this.keyAccessor()(d)}</h1></div>`;\r\n\r\n        this._mandatoryAttributes(['dimension', 'section']);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _doRender () {\r\n        this.selectAll(`div.${GRID_CSS_CLASS}`).remove();\r\n\r\n        this._renderItems(this._renderSections());\r\n\r\n        return this;\r\n    }\r\n\r\n    _renderSections () {\r\n        const sections = this.root().selectAll(`div.${GRID_CSS_CLASS}`)\r\n            .data(this._nestEntries(), d => this.keyAccessor()(d));\r\n\r\n        const itemSection = sections\r\n            .enter()\r\n            .append('div')\r\n            .attr('class', GRID_CSS_CLASS);\r\n\r\n        if (this._htmlSection) {\r\n            itemSection\r\n                .html(d => this._htmlSection(d));\r\n        }\r\n\r\n        sections.exit().remove();\r\n        return itemSection;\r\n    }\r\n\r\n    _nestEntries () {\r\n        let entries = this.dimension().top(this._size);\r\n\r\n        entries = entries\r\n            .sort((a, b) => this._order(this._sortBy(a), this._sortBy(b)))\r\n            .slice(this._beginSlice, this._endSlice)\r\n\r\n        return d3compat.nester({\r\n            key: this.section(),\r\n            sortKeys: this._order,\r\n            entries\r\n        });\r\n    }\r\n\r\n    _renderItems (sections) {\r\n        let items = sections.order()\r\n            .selectAll(`div.${ITEM_CSS_CLASS}`)\r\n            .data(d => d.values);\r\n\r\n        items.exit().remove();\r\n\r\n        items = items\r\n            .enter()\r\n            .append('div')\r\n            .attr('class', ITEM_CSS_CLASS)\r\n            .html(d => this._html(d))\r\n            .merge(items);\r\n\r\n        return items;\r\n    }\r\n\r\n    _doRedraw () {\r\n        return this._doRender();\r\n    }\r\n\r\n    /**\r\n     * Get or set the section function for the data grid. The section function takes a data row and\r\n     * returns the key to specify to {@link https://github.com/d3/d3-collection/blob/master/README.md#nest d3.nest}\r\n     * to split rows into sections.\r\n     *\r\n     * Do not pass in a crossfilter section as this will not work.\r\n     * @example\r\n     * // section rows by the value of their field\r\n     * chart\r\n     *     .section(function(d) { return d.field; })\r\n     * @param {Function} section Function taking a row of data and returning the nest key.\r\n     * @returns {Function|DataGrid}\r\n     */\r\n    section (section) {\r\n        if (!arguments.length) {\r\n            return this._section;\r\n        }\r\n        this._section = section;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Backward-compatible synonym for {@link DataGrid#section section}.\r\n     *\r\n     * @param {Function} section Function taking a row of data and returning the nest key.\r\n     * @returns {Function|DataGrid}\r\n     */\r\n    group (section) {\r\n        logger.warnOnce('consider using dataGrid.section instead of dataGrid.group for clarity');\r\n        if (!arguments.length) {\r\n            return this.section();\r\n        }\r\n        return this.section(section);\r\n    }\r\n\r\n    /**\r\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\r\n     * Useful when implementing pagination.\r\n     * @param {Number} [beginSlice=0]\r\n     * @returns {Number|DataGrid}\r\n     */\r\n    beginSlice (beginSlice) {\r\n        if (!arguments.length) {\r\n            return this._beginSlice;\r\n        }\r\n        this._beginSlice = beginSlice;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\r\n     * Useful when implementing pagination.\r\n     * @param {Number} [endSlice]\r\n     * @returns {Number|DataGrid}\r\n     */\r\n    endSlice (endSlice) {\r\n        if (!arguments.length) {\r\n            return this._endSlice;\r\n        }\r\n        this._endSlice = endSlice;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the grid size which determines the number of items displayed by the widget.\r\n     * @param {Number} [size=999]\r\n     * @returns {Number|DataGrid}\r\n     */\r\n    size (size) {\r\n        if (!arguments.length) {\r\n            return this._size;\r\n        }\r\n        this._size = size;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the function that formats an item. The data grid widget uses a\r\n     * function to generate dynamic html. Use your favourite templating engine or\r\n     * generate the string directly.\r\n     * @example\r\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\r\n     * @param {Function} [html]\r\n     * @returns {Function|DataGrid}\r\n     */\r\n    html (html) {\r\n        if (!arguments.length) {\r\n            return this._html;\r\n        }\r\n        this._html = html;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the function that formats a section label.\r\n     * @example\r\n     * chart.htmlSection (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\r\n     * @param {Function} [htmlSection]\r\n     * @returns {Function|DataGrid}\r\n     */\r\n    htmlSection (htmlSection) {\r\n        if (!arguments.length) {\r\n            return this._htmlSection;\r\n        }\r\n        this._htmlSection = htmlSection;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Backward-compatible synonym for {@link DataGrid#htmlSection htmlSection}.\r\n     * @param {Function} [htmlSection]\r\n     * @returns {Function|DataGrid}\r\n     */\r\n    htmlGroup (htmlSection) {\r\n        logger.warnOnce('consider using dataGrid.htmlSection instead of dataGrid.htmlGroup for clarity');\r\n        if (!arguments.length) {\r\n            return this.htmlSection();\r\n        }\r\n        return this.htmlSection(htmlSection);\r\n    }\r\n\r\n    /**\r\n     * Get or set sort-by function. This function works as a value accessor at the item\r\n     * level and returns a particular field to be sorted.\r\n     * @example\r\n     * chart.sortBy(function(d) {\r\n     *     return d.date;\r\n     * });\r\n     * @param {Function} [sortByFunction]\r\n     * @returns {Function|DataGrid}\r\n     */\r\n    sortBy (sortByFunction) {\r\n        if (!arguments.length) {\r\n            return this._sortBy;\r\n        }\r\n        this._sortBy = sortByFunction;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set sort the order function.\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\r\n     * @example\r\n     * chart.order(d3.descending);\r\n     * @param {Function} [order=d3.ascending]\r\n     * @returns {Function|DataGrid}\r\n     */\r\n    order (order) {\r\n        if (!arguments.length) {\r\n            return this._order;\r\n        }\r\n        this._order = order;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const dataGrid = (parent, chartGroup) => new DataGrid(parent, chartGroup);\r\n","import {ascending} from 'd3-array';\r\n\r\nimport {logger} from '../core/logger';\r\nimport {BaseMixin} from '../base/base-mixin';\r\nimport {d3compat} from '../core/config';\r\n\r\nconst LABEL_CSS_CLASS = 'dc-table-label';\r\nconst ROW_CSS_CLASS = 'dc-table-row';\r\nconst COLUMN_CSS_CLASS = 'dc-table-column';\r\nconst SECTION_CSS_CLASS = 'dc-table-section dc-table-group';\r\nconst HEAD_CSS_CLASS = 'dc-table-head';\r\n\r\n/**\r\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\r\n * filtered) in a good old tabular fashion.\r\n *\r\n * An interesting feature of the data table is that you can pass a crossfilter group to the\r\n * `dimension`, if you want to show aggregated data instead of raw data rows. This requires no\r\n * special code as long as you specify the {@link DataTable#order order} as `d3.descending`,\r\n * since the data table will use `dimension.top()` to fetch the data in that case, and the method is\r\n * equally supported on the crossfilter group as the crossfilter dimension.\r\n *\r\n * If you want to display aggregated data in ascending order, you will need to wrap the group\r\n * in a [fake dimension](https://github.com/dc-js/dc.js/wiki/FAQ#fake-dimensions) to support the\r\n * `.bottom()` method. See the example linked below for more details.\r\n *\r\n * Note: Formerly the data table (and data grid chart) used the {@link DataTable#group group} attribute as a\r\n * keying function for {@link https://github.com/d3/d3-collection/blob/master/README.md#nest nesting} the data\r\n * together in sections.  This was confusing so it has been renamed to `section`, although `group` still works.\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\r\n * ({@link https://github.com/dc-js/dc.js/blob/master/web-src/examples/table-on-aggregated-data.html source})\r\n *\r\n * @mixes BaseMixin\r\n */\r\nexport class DataTable extends BaseMixin {\r\n    /**\r\n     * Create a Data Table.\r\n     *\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._size = 25;\r\n        this._columns = [];\r\n        this._sortBy = d => d;\r\n        this._order = ascending;\r\n        this._beginSlice = 0;\r\n        this._endSlice = undefined;\r\n        this._showSections = true;\r\n        this._section = () => ''; // all in one section\r\n\r\n        this._mandatoryAttributes(['dimension']);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _doRender () {\r\n        this.selectAll('tbody').remove();\r\n\r\n        this._renderRows(this._renderSections());\r\n\r\n        return this;\r\n    }\r\n\r\n    _doColumnValueFormat (v, d) {\r\n        return (typeof v === 'function') ? v(d) :  // v as function\r\n            (typeof v === 'string') ? d[v] :       // v is field name string\r\n            v.format(d);                           // v is Object, use fn (element 2)\r\n    }\r\n\r\n    _doColumnHeaderFormat (d) {\r\n        // if 'function', convert to string representation\r\n        // show a string capitalized\r\n        // if an object then display its label string as-is.\r\n        return (typeof d === 'function') ? this._doColumnHeaderFnToString(d) :\r\n            (typeof d === 'string') ? this._doColumnHeaderCapitalize(d) :\r\n            String(d.label);\r\n    }\r\n\r\n    _doColumnHeaderCapitalize (s) {\r\n        // capitalize\r\n        return s.charAt(0).toUpperCase() + s.slice(1);\r\n    }\r\n\r\n    _doColumnHeaderFnToString (f) {\r\n        // columnString(f) {\r\n        let s = String(f);\r\n        const i1 = s.indexOf('return ');\r\n        if (i1 >= 0) {\r\n            const i2 = s.lastIndexOf(';');\r\n            if (i2 >= 0) {\r\n                s = s.substring(i1 + 7, i2);\r\n                const i3 = s.indexOf('numberFormat');\r\n                if (i3 >= 0) {\r\n                    s = s.replace('numberFormat', '');\r\n                }\r\n            }\r\n        }\r\n        return s;\r\n    }\r\n\r\n    _renderSections () {\r\n        // The 'original' example uses all 'functions'.\r\n        // If all 'functions' are used, then don't remove/add a header, and leave\r\n        // the html alone. This preserves the functionality of earlier releases.\r\n        // A 2nd option is a string representing a field in the data.\r\n        // A third option is to supply an Object such as an array of 'information', and\r\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\r\n        // create what you need.\r\n        let bAllFunctions = true;\r\n        this._columns.forEach(f => {\r\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\r\n        });\r\n\r\n        if (!bAllFunctions) {\r\n            // ensure one thead\r\n            let thead = this.selectAll('thead').data([0]);\r\n            thead.exit().remove();\r\n            thead = thead.enter()\r\n                .append('thead')\r\n                .merge(thead);\r\n\r\n            // with one tr\r\n            let headrow = thead.selectAll('tr').data([0]);\r\n            headrow.exit().remove();\r\n            headrow = headrow.enter()\r\n                .append('tr')\r\n                .merge(headrow);\r\n\r\n            // with a th for each column\r\n            const headcols = headrow.selectAll('th')\r\n                .data(this._columns);\r\n            headcols.exit().remove();\r\n            headcols.enter().append('th')\r\n                .merge(headcols)\r\n                .attr('class', HEAD_CSS_CLASS)\r\n                .html(d => (this._doColumnHeaderFormat(d)));\r\n        }\r\n\r\n        const sections = this.root().selectAll('tbody')\r\n            .data(this._nestEntries(), d => this.keyAccessor()(d));\r\n\r\n        const rowSection = sections\r\n            .enter()\r\n            .append('tbody');\r\n\r\n        if (this._showSections === true) {\r\n            rowSection\r\n                .append('tr')\r\n                .attr('class', SECTION_CSS_CLASS)\r\n                .append('td')\r\n                .attr('class', LABEL_CSS_CLASS)\r\n                .attr('colspan', this._columns.length)\r\n                .html(d => this.keyAccessor()(d));\r\n        }\r\n\r\n        sections.exit().remove();\r\n\r\n        return rowSection;\r\n    }\r\n\r\n    _nestEntries () {\r\n        let entries;\r\n        if (this._order === ascending) {\r\n            entries = this.dimension().bottom(this._size);\r\n        } else {\r\n            entries = this.dimension().top(this._size);\r\n        }\r\n\r\n        entries = entries.sort((a, b) => this._order(this._sortBy(a), this._sortBy(b))).slice(this._beginSlice, this._endSlice)\r\n\r\n        return d3compat.nester({\r\n            key: this.section(),\r\n            sortKeys: this._order,\r\n            entries\r\n        });\r\n    }\r\n\r\n    _renderRows (sections) {\r\n        const rows = sections.order()\r\n            .selectAll(`tr.${ROW_CSS_CLASS}`)\r\n            .data(d => d.values);\r\n\r\n        const rowEnter = rows.enter()\r\n            .append('tr')\r\n            .attr('class', ROW_CSS_CLASS);\r\n\r\n        this._columns.forEach((v, i) => {\r\n            rowEnter.append('td')\r\n                .attr('class', `${COLUMN_CSS_CLASS} _${i}`)\r\n                .html(d => this._doColumnValueFormat(v, d));\r\n        });\r\n\r\n        rows.exit().remove();\r\n\r\n        return rows;\r\n    }\r\n\r\n    _doRedraw () {\r\n        return this._doRender();\r\n    }\r\n\r\n    /**\r\n     * Get or set the section function for the data table. The section function takes a data row and\r\n     * returns the key to specify to {@link https://github.com/d3/d3-collection/blob/master/README.md#nest d3.nest}\r\n     * to split rows into sections. By default there will be only one section with no name.\r\n     *\r\n     * Set {@link DataTable#showSections showSections} to false to hide the section headers\r\n     *\r\n     * @example\r\n     * // section rows by the value of their field\r\n     * chart\r\n     *     .section(function(d) { return d.field; })\r\n     * @param {Function} section Function taking a row of data and returning the nest key.\r\n     * @returns {Function|DataTable}\r\n     */\r\n    section (section) {\r\n        if (!arguments.length) {\r\n            return this._section;\r\n        }\r\n        this._section = section;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Backward-compatible synonym for {@link DataTable#section section}.\r\n     *\r\n     * @param {Function} section Function taking a row of data and returning the nest key.\r\n     * @returns {Function|DataTable}\r\n     */\r\n    group (section) {\r\n        logger.warnOnce('consider using dataTable.section instead of dataTable.group for clarity');\r\n        if (!arguments.length) {\r\n            return this.section();\r\n        }\r\n        return this.section(section);\r\n    }\r\n\r\n    /**\r\n     * Get or set the table size which determines the number of rows displayed by the widget.\r\n     * @param {Number} [size=25]\r\n     * @returns {Number|DataTable}\r\n     */\r\n    size (size) {\r\n        if (!arguments.length) {\r\n            return this._size;\r\n        }\r\n        this._size = size;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the index of the beginning slice which determines which entries get displayed\r\n     * by the widget. Useful when implementing pagination.\r\n     *\r\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\r\n\r\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\r\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\r\n     * @param {Number} [beginSlice=0]\r\n     * @returns {Number|DataTable}\r\n     */\r\n    beginSlice (beginSlice) {\r\n        if (!arguments.length) {\r\n            return this._beginSlice;\r\n        }\r\n        this._beginSlice = beginSlice;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the index of the end slice which determines which entries get displayed by the\r\n     * widget. Useful when implementing pagination. See {@link DataTable#beginSlice `beginSlice`} for more information.\r\n     * @param {Number|undefined} [endSlice=undefined]\r\n     * @returns {Number|DataTable}\r\n     */\r\n    endSlice (endSlice) {\r\n        if (!arguments.length) {\r\n            return this._endSlice;\r\n        }\r\n        this._endSlice = endSlice;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set column functions. The data table widget supports several methods of specifying the\r\n     * columns to display.\r\n     *\r\n     * The original method uses an array of functions to generate dynamic columns. Column functions\r\n     * are simple javascript functions with only one input argument `d` which represents a row in\r\n     * the data set. The return value of these functions will be used to generate the content for\r\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\r\n     * headers.\r\n     *\r\n     * <pre><code>chart.columns([\r\n     *     function(d) { return d.date; },\r\n     *     function(d) { return d.open; },\r\n     *     function(d) { return d.close; },\r\n     *     function(d) { return numberFormat(d.close - d.open); },\r\n     *     function(d) { return d.volume; }\r\n     * ]);\r\n     * </code></pre>\r\n     *\r\n     * In the second method, you can list the columns to read from the data without specifying it as\r\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\r\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\r\n     * using the third `{label, format}` form, as shown below.\r\n     *\r\n     * <pre><code>chart.columns([\r\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\r\n     *     \"open\",    // ...\r\n     *     \"close\",   // ...\r\n     *     {\r\n     *         label: \"Change\",\r\n     *         format: function (d) {\r\n     *             return numberFormat(d.close - d.open);\r\n     *         }\r\n     *     },\r\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\r\n     * ]);\r\n     * </code></pre>\r\n     *\r\n     * In the third example, we specify all fields using the `{label, format}` method:\r\n     * <pre><code>chart.columns([\r\n     *     {\r\n     *         label: \"Date\",\r\n     *         format: function (d) { return d.date; }\r\n     *     },\r\n     *     {\r\n     *         label: \"Open\",\r\n     *         format: function (d) { return numberFormat(d.open); }\r\n     *     },\r\n     *     {\r\n     *         label: \"Close\",\r\n     *         format: function (d) { return numberFormat(d.close); }\r\n     *     },\r\n     *     {\r\n     *         label: \"Change\",\r\n     *         format: function (d) { return numberFormat(d.close - d.open); }\r\n     *     },\r\n     *     {\r\n     *         label: \"Volume\",\r\n     *         format: function (d) { return d.volume; }\r\n     *     }\r\n     * ]);\r\n     * </code></pre>\r\n     *\r\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\r\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\r\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\r\n     * second is used to transform a stringified function into something displayable. For the Stock\r\n     * example, the function for Change becomes the table header **d.close - d.open**.\r\n     *\r\n     * Finally, you can even specify a completely different form of column definition. To do this,\r\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\r\n     * fields without numberFormat specification will be displayed just as they are stored in the\r\n     * data, unformatted.\r\n     * @param {Array<Function>} [columns=[]]\r\n     * @returns {Array<Function>}|DataTable}\r\n     */\r\n    columns (columns) {\r\n        if (!arguments.length) {\r\n            return this._columns;\r\n        }\r\n        this._columns = columns;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\r\n     * particular field to be sorted by.\r\n     * @example\r\n     * chart.sortBy(function(d) {\r\n     *     return d.date;\r\n     * });\r\n     * @param {Function} [sortBy=identity function]\r\n     * @returns {Function|DataTable}\r\n     */\r\n    sortBy (sortBy) {\r\n        if (!arguments.length) {\r\n            return this._sortBy;\r\n        }\r\n        this._sortBy = sortBy;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\r\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\r\n     * @example\r\n     * chart.order(d3.descending);\r\n     * @param {Function} [order=d3.ascending]\r\n     * @returns {Function|DataTable}\r\n     */\r\n    order (order) {\r\n        if (!arguments.length) {\r\n            return this._order;\r\n        }\r\n        this._order = order;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set if section header rows will be shown.\r\n     * @example\r\n     * chart\r\n     *     .section([value], [name])\r\n     *     .showSections(true|false);\r\n     * @param {Boolean} [showSections=true]\r\n     * @returns {Boolean|DataTable}\r\n     */\r\n    showSections (showSections) {\r\n        if (!arguments.length) {\r\n            return this._showSections;\r\n        }\r\n        this._showSections = showSections;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Backward-compatible synonym for {@link DataTable#showSections showSections}.\r\n     * @param {Boolean} [showSections=true]\r\n     * @returns {Boolean|DataTable}\r\n     */\r\n    showGroups (showSections) {\r\n        logger.warnOnce('consider using dataTable.showSections instead of dataTable.showGroups for clarity');\r\n        if (!arguments.length) {\r\n            return this.showSections();\r\n        }\r\n        return this.showSections(showSections);\r\n    }\r\n}\r\n\r\nexport const dataTable = (parent, chartGroup) => new DataTable(parent, chartGroup);\r\n","import {geoPath, geoAlbersUsa} from 'd3-geo';\r\nimport {select} from 'd3-selection';\r\n\r\nimport {BaseMixin} from '../base/base-mixin';\r\nimport {ColorMixin} from '../base/color-mixin';\r\nimport {transition} from '../core/core';\r\nimport {logger} from '../core/logger';\r\nimport {events} from '../core/events';\r\nimport {utils} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\n\r\n/**\r\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\r\n * from GeoJson data. This chart implementation was inspired by\r\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\r\n * @mixes ColorMixin\r\n * @mixes BaseMixin\r\n */\r\nexport class GeoChoroplethChart extends ColorMixin(BaseMixin) {\r\n    /**\r\n     * Create a Geo Choropleth Chart.\r\n     * @example\r\n     * // create a choropleth chart under '#us-chart' element using the default global chart group\r\n     * var chart1 = new GeoChoroplethChart('#us-chart');\r\n     * // create a choropleth chart under '#us-chart2' element using chart group A\r\n     * var chart2 = new CompositeChart('#us-chart2', 'chartGroupA');\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this.colorAccessor(d => d || 0);\r\n\r\n        this._geoPath = geoPath();\r\n        this._projectionFlag = undefined;\r\n        this._projection = undefined;\r\n\r\n        this._geoJsons = [];\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _doRender () {\r\n        this.resetSvg();\r\n        for (let layerIndex = 0; layerIndex < this._geoJsons.length; ++layerIndex) {\r\n            const states = this.svg().append('g')\r\n                .attr('class', `layer${layerIndex}`);\r\n\r\n            let regionG = states.selectAll(`g.${this._geoJson(layerIndex).name}`)\r\n                .data(this._geoJson(layerIndex).data);\r\n\r\n            regionG = regionG.enter()\r\n                .append('g')\r\n                .attr('class', this._geoJson(layerIndex).name)\r\n                .merge(regionG);\r\n\r\n            regionG\r\n                .append('path')\r\n                .classed('dc-tabbable', this._keyboardAccessible)\r\n                .attr('fill', 'white')\r\n                .attr('d', this._getGeoPath());\r\n\r\n            regionG.append('title');\r\n\r\n            this._plotData(layerIndex);\r\n        }\r\n        this._projectionFlag = false;\r\n    }\r\n\r\n    _plotData (layerIndex) {\r\n        const data = this._generateLayeredData();\r\n\r\n        if (this._isDataLayer(layerIndex)) {\r\n            const regionG = this._renderRegionG(layerIndex);\r\n\r\n            this._renderPaths(regionG, layerIndex, data);\r\n\r\n            this._renderTitles(regionG, layerIndex, data);\r\n        }\r\n    }\r\n\r\n    _generateLayeredData () {\r\n        const data = {};\r\n        const groupAll = this.data();\r\n        for (let i = 0; i < groupAll.length; ++i) {\r\n            data[this.keyAccessor()(groupAll[i])] = this.valueAccessor()(groupAll[i]);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    _isDataLayer (layerIndex) {\r\n        return this._geoJson(layerIndex).keyAccessor;\r\n    }\r\n\r\n    _renderRegionG (layerIndex) {\r\n        const regionG = this.svg()\r\n            .selectAll(this._layerSelector(layerIndex))\r\n            .classed('selected', d => this._isSelected(layerIndex, d))\r\n            .classed('deselected', d => this._isDeselected(layerIndex, d))\r\n            .attr('class', d => {\r\n                const layerNameClass = this._geoJson(layerIndex).name;\r\n                const regionClass = utils.nameToId(this._geoJson(layerIndex).keyAccessor(d));\r\n                let baseClasses = `${layerNameClass} ${regionClass}`;\r\n                if (this._isSelected(layerIndex, d)) {\r\n                    baseClasses += ' selected';\r\n                }\r\n                if (this._isDeselected(layerIndex, d)) {\r\n                    baseClasses += ' deselected';\r\n                }\r\n                return baseClasses;\r\n            });\r\n        return regionG;\r\n    }\r\n\r\n    _layerSelector (layerIndex) {\r\n        return `g.layer${layerIndex} g.${this._geoJson(layerIndex).name}`;\r\n    }\r\n\r\n    _isSelected (layerIndex, d) {\r\n        return this.hasFilter() && this.hasFilter(this._getKey(layerIndex, d));\r\n    }\r\n\r\n    _isDeselected (layerIndex, d) {\r\n        return this.hasFilter() && !this.hasFilter(this._getKey(layerIndex, d));\r\n    }\r\n\r\n    _getKey (layerIndex, d) {\r\n        return this._geoJson(layerIndex).keyAccessor(d);\r\n    }\r\n\r\n    _geoJson (index) {\r\n        return this._geoJsons[index];\r\n    }\r\n\r\n    _renderPaths (regionG, layerIndex, data) {\r\n        const paths = regionG\r\n            .select('path')\r\n            .attr('fill', function () {\r\n                const currentFill = select(this).attr('fill');\r\n                if (currentFill) {\r\n                    return currentFill;\r\n                }\r\n                return 'none';\r\n            })\r\n            .on('click', d3compat.eventHandler(d => this.onClick(d, layerIndex)));\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible(this.onClick, layerIndex);\r\n        }\r\n\r\n        transition(paths, this.transitionDuration(),\r\n                   this.transitionDelay()).attr('fill', (d, i) => this.getColor(data[this._geoJson(layerIndex).keyAccessor(d)], i));\r\n    }\r\n\r\n    onClick (d, layerIndex) {\r\n        const selectedRegion = this._geoJson(layerIndex).keyAccessor(d);\r\n        events.trigger(() => {\r\n            this.filter(selectedRegion);\r\n            this.redrawGroup();\r\n        });\r\n    }\r\n\r\n    _renderTitles (regionG, layerIndex, data) {\r\n        if (this.renderTitle()) {\r\n            regionG.selectAll('title').text(d => {\r\n                const key = this._getKey(layerIndex, d);\r\n                const value = data[key];\r\n                return this.title()({key: key, value: value});\r\n            });\r\n        }\r\n    }\r\n\r\n    _doRedraw () {\r\n        for (let layerIndex = 0; layerIndex < this._geoJsons.length; ++layerIndex) {\r\n            this._plotData(layerIndex);\r\n            if (this._projectionFlag) {\r\n                this.svg().selectAll(`g.${this._geoJson(layerIndex).name} path`).attr('d', this._getGeoPath());\r\n            }\r\n        }\r\n        this._projectionFlag = false;\r\n    }\r\n\r\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\r\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\r\n     * layers with the same name the new overlay will override the existing one.\r\n     * @see {@link http://geojson.org/ GeoJSON}\r\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\r\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\r\n     * @example\r\n     * // insert a layer for rendering US states\r\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\r\n     *      return d.properties.name;\r\n     * });\r\n     * @param {_geoJson} json - a geojson feed\r\n     * @param {String} name - name of the layer\r\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\r\n     * this function should match the keys returned by the crossfilter groups.\r\n     * @returns {GeoChoroplethChart}\r\n     */\r\n    overlayGeoJson (json, name, keyAccessor) {\r\n        for (let i = 0; i < this._geoJsons.length; ++i) {\r\n            if (this._geoJsons[i].name === name) {\r\n                this._geoJsons[i].data = json;\r\n                this._geoJsons[i].keyAccessor = keyAccessor;\r\n                return this;\r\n            }\r\n        }\r\n        this._geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a custom geo projection function. See the available\r\n     * {@link https://github.com/d3/d3-geo/blob/master/README.md#projections d3 geo projection functions}.\r\n     *\r\n     * Starting version 3.0 it has been deprecated to rely on the default projection being\r\n     * {@link https://github.com/d3/d3-geo/blob/master/README.md#geoAlbersUsa d3.geoAlbersUsa()}. Please\r\n     * set it explicitly. {@link https://bl.ocks.org/mbostock/5557726\r\n     * Considering that `null` is also a valid value for projection}, if you need\r\n     * projection to be `null` please set it explicitly to `null`.\r\n     * @see {@link https://github.com/d3/d3-geo/blob/master/README.md#projections d3.projection}\r\n     * @see {@link https://github.com/d3/d3-geo-projection d3-geo-projection}\r\n     * @param {d3.projection} [projection=d3.geoAlbersUsa()]\r\n     * @returns {d3.projection|GeoChoroplethChart}\r\n     */\r\n    projection (projection) {\r\n        if (!arguments.length) {\r\n            return this._projection;\r\n        }\r\n\r\n        this._projection = projection;\r\n        this._projectionFlag = true;\r\n        return this;\r\n    }\r\n\r\n    _getGeoPath () {\r\n        if (this._projection === undefined) {\r\n            logger.warn('choropleth projection default of geoAlbers is deprecated,' +\r\n                ' in next version projection will need to be set explicitly');\r\n            return this._geoPath.projection(geoAlbersUsa());\r\n        }\r\n\r\n        return this._geoPath.projection(this._projection);\r\n    }\r\n\r\n    /**\r\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\r\n     * reference to this chart's internal data structure, so any modification to this array will also\r\n     * modify this chart's internal registration.\r\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\r\n     */\r\n    geoJsons () {\r\n        return this._geoJsons;\r\n    }\r\n\r\n    /**\r\n     * Returns the {@link https://github.com/d3/d3-geo/blob/master/README.md#paths d3.geoPath} object used to\r\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\r\n     * feature set and thus a way to calculate scale and translation for the projection.\r\n     * @see {@link https://github.com/d3/d3-geo/blob/master/README.md#paths d3.geoPath}\r\n     * @returns {d3.geoPath}\r\n     */\r\n    geoPath () {\r\n        return this._geoPath;\r\n    }\r\n\r\n    /**\r\n     * Remove a GeoJson layer from this chart by name\r\n     * @param {String} name\r\n     * @returns {GeoChoroplethChart}\r\n     */\r\n    removeGeoJson (name) {\r\n        const geoJsons = [];\r\n\r\n        for (let i = 0; i < this._geoJsons.length; ++i) {\r\n            const layer = this._geoJsons[i];\r\n            if (layer.name !== name) {\r\n                geoJsons.push(layer);\r\n            }\r\n        }\r\n\r\n        this._geoJsons = geoJsons;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const geoChoroplethChart = (parent, chartGroup) => new GeoChoroplethChart(parent, chartGroup);\r\n","import {ascending} from 'd3-array';\r\nimport {scaleBand} from 'd3-scale';\r\n\r\nimport {transition} from '../core/core';\r\nimport {logger} from '../core/logger';\r\nimport {filters} from '../core/filters';\r\nimport {events} from '../core/events';\r\nimport {ColorMixin} from '../base/color-mixin';\r\nimport {MarginMixin} from '../base/margin-mixin';\r\nimport {d3compat} from '../core/config';\r\n\r\nconst DEFAULT_BORDER_RADIUS = 6.75;\r\n\r\n/**\r\n * A heat map is matrix that represents the values of two dimensions of data using colors.\r\n * @mixes ColorMixin\r\n * @mixes MarginMixin\r\n * @mixes BaseMixin\r\n */\r\nexport class HeatMap extends ColorMixin(MarginMixin) {\r\n    /**\r\n     * Create a Heat Map\r\n     * @example\r\n     * // create a heat map under #chart-container1 element using the default global chart group\r\n     * var heatMap1 = new HeatMap('#chart-container1');\r\n     * // create a heat map under #chart-container2 element using chart group A\r\n     * var heatMap2 = new HeatMap('#chart-container2', 'chartGroupA');\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._chartBody = undefined;\r\n\r\n        this._cols = undefined;\r\n        this._rows = undefined;\r\n        this._colOrdering = ascending;\r\n        this._rowOrdering = ascending;\r\n        this._colScale = scaleBand();\r\n        this._rowScale = scaleBand();\r\n\r\n        this._xBorderRadius = DEFAULT_BORDER_RADIUS;\r\n        this._yBorderRadius = DEFAULT_BORDER_RADIUS;\r\n\r\n        this._mandatoryAttributes(['group']);\r\n        this.title(this.colorAccessor());\r\n\r\n        this._colsLabel = d => d;\r\n        this._rowsLabel = d => d;\r\n\r\n        this._xAxisOnClick = d => {\r\n            this._filterAxis(0, d);\r\n        };\r\n        this._yAxisOnClick = d => {\r\n            this._filterAxis(1, d);\r\n        };\r\n        this._boxOnClick = d => {\r\n            const filter = d.key;\r\n            events.trigger(() => {\r\n                this.filter(filters.TwoDimensionalFilter(filter));\r\n                this.redrawGroup();\r\n            });\r\n        };\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    /**\r\n     * Set or get the column label function. The chart class uses this function to render\r\n     * column labels on the X axis. It is passed the column name.\r\n     * @example\r\n     * // the default label function just returns the name\r\n     * chart.colsLabel(function(d) { return d; });\r\n     * @param  {Function} [labelFunction=function(d) { return d; }]\r\n     * @returns {Function|HeatMap}\r\n     */\r\n    colsLabel (labelFunction) {\r\n        if (!arguments.length) {\r\n            return this._colsLabel;\r\n        }\r\n        this._colsLabel = labelFunction;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the row label function. The chart class uses this function to render\r\n     * row labels on the Y axis. It is passed the row name.\r\n     * @example\r\n     * // the default label function just returns the name\r\n     * chart.rowsLabel(function(d) { return d; });\r\n     * @param  {Function} [labelFunction=function(d) { return d; }]\r\n     * @returns {Function|HeatMap}\r\n     */\r\n    rowsLabel (labelFunction) {\r\n        if (!arguments.length) {\r\n            return this._rowsLabel;\r\n        }\r\n        this._rowsLabel = labelFunction;\r\n        return this;\r\n    }\r\n\r\n    _filterAxis (axis, value) {\r\n        const cellsOnAxis = this.selectAll('.box-group').filter(d => d.key[axis] === value);\r\n        const unfilteredCellsOnAxis = cellsOnAxis.filter(d => !this.hasFilter(d.key));\r\n        events.trigger(() => {\r\n            const selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\r\n            const filtersList = selection.data().map(kv => filters.TwoDimensionalFilter(kv.key));\r\n            this.filter([filtersList]);\r\n            this.redrawGroup();\r\n        });\r\n    }\r\n\r\n    filter (filter) {\r\n        const nonstandardFilter = f => {\r\n            logger.warnOnce('heatmap.filter taking a coordinate is deprecated - please pass dc.filters.TwoDimensionalFilter instead');\r\n            return this._filter(filters.TwoDimensionalFilter(f));\r\n        };\r\n\r\n        if (!arguments.length) {\r\n            return super.filter();\r\n        }\r\n        if (filter !== null && filter.filterType !== 'TwoDimensionalFilter' &&\r\n            !(Array.isArray(filter) && Array.isArray(filter[0]) && filter[0][0].filterType === 'TwoDimensionalFilter')) {\r\n            return nonstandardFilter(filter);\r\n        }\r\n        return super.filter(filter);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\r\n     * the values will be fetched from the data using the value accessor.\r\n     * @param  {Array<String|Number>} [rows]\r\n     * @returns {Array<String|Number>|HeatMap}\r\n     */\r\n\r\n    rows (rows) {\r\n        if (!arguments.length) {\r\n            return this._rows;\r\n        }\r\n        this._rows = rows;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set a comparator to order the rows.\r\n     * Default is {@link https://github.com/d3/d3-array#ascending d3.ascending}.\r\n     * @param  {Function} [rowOrdering]\r\n     * @returns {Function|HeatMap}\r\n     */\r\n    rowOrdering (rowOrdering) {\r\n        if (!arguments.length) {\r\n            return this._rowOrdering;\r\n        }\r\n        this._rowOrdering = rowOrdering;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\r\n     * the values will be fetched from the data using the key accessor.\r\n     * @param  {Array<String|Number>} [cols]\r\n     * @returns {Array<String|Number>|HeatMap}\r\n     */\r\n    cols (cols) {\r\n        if (!arguments.length) {\r\n            return this._cols;\r\n        }\r\n        this._cols = cols;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set a comparator to order the columns.\r\n     * Default is  {@link https://github.com/d3/d3-array#ascending d3.ascending}.\r\n     * @param  {Function} [colOrdering]\r\n     * @returns {Function|HeatMap}\r\n     */\r\n    colOrdering (colOrdering) {\r\n        if (!arguments.length) {\r\n            return this._colOrdering;\r\n        }\r\n        this._colOrdering = colOrdering;\r\n        return this;\r\n    }\r\n\r\n    _doRender () {\r\n        this.resetSvg();\r\n\r\n        this._chartBody = this.svg()\r\n            .append('g')\r\n            .attr('class', 'heatmap')\r\n            .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\r\n\r\n        return this._doRedraw();\r\n    }\r\n\r\n    _doRedraw () {\r\n        const data = this.data();\r\n        let rows = this.rows() || data.map(this.valueAccessor()),\r\n            cols = this.cols() || data.map(this.keyAccessor());\r\n        if (this._rowOrdering) {\r\n            rows = rows.sort(this._rowOrdering);\r\n        }\r\n        if (this._colOrdering) {\r\n            cols = cols.sort(this._colOrdering);\r\n        }\r\n        rows = this._rowScale.domain(rows);\r\n        cols = this._colScale.domain(cols);\r\n\r\n        const rowCount = rows.domain().length,\r\n            colCount = cols.domain().length,\r\n            boxWidth = Math.floor(this.effectiveWidth() / colCount),\r\n            boxHeight = Math.floor(this.effectiveHeight() / rowCount);\r\n\r\n        cols.rangeRound([0, this.effectiveWidth()]);\r\n        rows.rangeRound([this.effectiveHeight(), 0]);\r\n\r\n        let boxes = this._chartBody.selectAll('g.box-group').data(this.data(),\r\n                                                                  (d, i) => `${this.keyAccessor()(d, i)}\\0${this.valueAccessor()(d, i)}`);\r\n\r\n        boxes.exit().remove();\r\n\r\n        const gEnter = boxes.enter().append('g')\r\n            .attr('class', 'box-group');\r\n\r\n        gEnter.append('rect')\r\n            .attr('class', 'heat-box')\r\n            .classed('dc-tabbable', this._keyboardAccessible)\r\n            .attr('fill', 'white')\r\n            .attr('x', (d, i) => cols(this.keyAccessor()(d, i)))\r\n            .attr('y', (d, i) => rows(this.valueAccessor()(d, i)))\r\n            .on('click', d3compat.eventHandler(this.boxOnClick()));\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible(this.boxOnClick);\r\n        }\r\n\r\n        boxes = gEnter.merge(boxes);\r\n\r\n        if (this.renderTitle()) {\r\n            gEnter.append('title');\r\n            boxes.select('title').text(this.title());\r\n        }\r\n\r\n        transition(boxes.select('rect'), this.transitionDuration(), this.transitionDelay())\r\n            .attr('x', (d, i) => cols(this.keyAccessor()(d, i)))\r\n            .attr('y', (d, i) => rows(this.valueAccessor()(d, i)))\r\n            .attr('rx', this._xBorderRadius)\r\n            .attr('ry', this._yBorderRadius)\r\n            .attr('fill', this.getColor)\r\n            .attr('width', boxWidth)\r\n            .attr('height', boxHeight);\r\n\r\n        let gCols = this._chartBody.select('g.cols');\r\n        if (gCols.empty()) {\r\n            gCols = this._chartBody.append('g').attr('class', 'cols axis');\r\n        }\r\n        let gColsText = gCols.selectAll('text').data(cols.domain());\r\n\r\n        gColsText.exit().remove();\r\n\r\n        gColsText = gColsText\r\n            .enter()\r\n            .append('text')\r\n            .attr('x', d => cols(d) + boxWidth / 2)\r\n            .style('text-anchor', 'middle')\r\n            .attr('y', this.effectiveHeight())\r\n            .attr('dy', 12)\r\n            .on('click', d3compat.eventHandler(this.xAxisOnClick()))\r\n            .text(this.colsLabel())\r\n            .merge(gColsText);\r\n\r\n        transition(gColsText, this.transitionDuration(), this.transitionDelay())\r\n            .text(this.colsLabel())\r\n            .attr('x', d => cols(d) + boxWidth / 2)\r\n            .attr('y', this.effectiveHeight());\r\n\r\n        let gRows = this._chartBody.select('g.rows');\r\n        if (gRows.empty()) {\r\n            gRows = this._chartBody.append('g').attr('class', 'rows axis');\r\n        }\r\n\r\n        let gRowsText = gRows.selectAll('text').data(rows.domain());\r\n\r\n        gRowsText.exit().remove();\r\n\r\n        gRowsText = gRowsText\r\n            .enter()\r\n            .append('text')\r\n            .style('text-anchor', 'end')\r\n            .attr('x', 0)\r\n            .attr('dx', -2)\r\n            .attr('y', d => rows(d) + boxHeight / 2)\r\n            .attr('dy', 6)\r\n            .on('click', d3compat.eventHandler(this.yAxisOnClick()))\r\n            .text(this.rowsLabel())\r\n            .merge(gRowsText);\r\n\r\n        transition(gRowsText, this.transitionDuration(), this.transitionDelay())\r\n            .text(this.rowsLabel())\r\n            .attr('y', d => rows(d) + boxHeight / 2);\r\n\r\n        if (this.hasFilter()) {\r\n            const chart = this;\r\n            this.selectAll('g.box-group').each(function (d) {\r\n                if (chart.isSelectedNode(d)) {\r\n                    chart.highlightSelected(this);\r\n                } else {\r\n                    chart.fadeDeselected(this);\r\n                }\r\n            });\r\n        } else {\r\n            const chart = this;\r\n            this.selectAll('g.box-group').each(function () {\r\n                chart.resetHighlight(this);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\r\n     * By default, filtering of the cell will be toggled.\r\n     * @example\r\n     * // default box on click handler\r\n     * chart.boxOnClick(function (d) {\r\n     *     var filter = d.key;\r\n     *     events.trigger(function () {\r\n     *         _chart.filter(filter);\r\n     *         _chart.redrawGroup();\r\n     *     });\r\n     * });\r\n     * @param  {Function} [handler]\r\n     * @returns {Function|HeatMap}\r\n     */\r\n    boxOnClick (handler) {\r\n        if (!arguments.length) {\r\n            return this._boxOnClick;\r\n        }\r\n        this._boxOnClick = handler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\r\n     * By default, if any cells in the column are unselected, the whole column will be selected,\r\n     * otherwise the whole column will be unselected.\r\n     * @param  {Function} [handler]\r\n     * @returns {Function|HeatMap}\r\n     */\r\n    xAxisOnClick (handler) {\r\n        if (!arguments.length) {\r\n            return this._xAxisOnClick;\r\n        }\r\n        this._xAxisOnClick = handler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\r\n     * By default, if any cells in the row are unselected, the whole row will be selected,\r\n     * otherwise the whole row will be unselected.\r\n     * @param  {Function} [handler]\r\n     * @returns {Function|HeatMap}\r\n     */\r\n    yAxisOnClick (handler) {\r\n        if (!arguments.length) {\r\n            return this._yAxisOnClick;\r\n        }\r\n        this._yAxisOnClick = handler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\r\n     * @param  {Number} [xBorderRadius=6.75]\r\n     * @returns {Number|HeatMap}\r\n     */\r\n    xBorderRadius (xBorderRadius) {\r\n        if (!arguments.length) {\r\n            return this._xBorderRadius;\r\n        }\r\n        this._xBorderRadius = xBorderRadius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\r\n     * @param  {Number} [yBorderRadius=6.75]\r\n     * @returns {Number|HeatMap}\r\n     */\r\n    yBorderRadius (yBorderRadius) {\r\n        if (!arguments.length) {\r\n            return this._yBorderRadius;\r\n        }\r\n        this._yBorderRadius = yBorderRadius;\r\n        return this;\r\n    }\r\n\r\n    isSelectedNode (d) {\r\n        return this.hasFilter(d.key);\r\n    }\r\n}\r\n\r\nexport const heatMap = (parent, chartGroup) => new HeatMap(parent, chartGroup);\r\n","import {select} from 'd3-selection';\r\n\r\nimport {pluck, utils} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\nimport {constants} from '../core/constants';\r\n\r\n/**\r\n * htmlLegend is a attachable widget that can be added to other dc charts to render horizontal/vertical legend\r\n * labels.\r\n * @example\r\n * chart.legend(HtmlLegend().container(legendContainerElement).horizontal(false))\r\n * @returns {HtmlLegend}\r\n */\r\nexport class HtmlLegend {\r\n    constructor () {\r\n        this._htmlLegendDivCssClass = 'dc-html-legend';\r\n        this._legendItemCssClassHorizontal = 'dc-legend-item-horizontal';\r\n        this._legendItemCssClassVertical = 'dc-legend-item-vertical';\r\n        this._parent = undefined;\r\n        this._container = undefined;\r\n        this._legendText = pluck('name');\r\n        this._maxItems = undefined;\r\n        this._horizontal = false;\r\n        this._legendItemClass = undefined;\r\n        this._highlightSelected = false;\r\n        this._keyboardAccessible = false;\r\n    }\r\n\r\n    parent (p) {\r\n        if (!arguments.length) {\r\n            return this._parent;\r\n        }\r\n        this._parent = p;\r\n        return this;\r\n    }\r\n\r\n    render () {\r\n        this._defaultLegendItemCssClass = this._horizontal ? this._legendItemCssClassHorizontal : this._legendItemCssClassVertical;\r\n        this._container.select(`div.${this._htmlLegendDivCssClass}`).remove();\r\n\r\n        const container = this._container.append('div').attr('class', this._htmlLegendDivCssClass);\r\n        container.attr('style', `max-width:${this._container.nodes()[0].style.width}`);\r\n\r\n        let legendables = this._parent.legendables();\r\n        const filters = this._parent.filters();\r\n\r\n        if (this._maxItems !== undefined) {\r\n            legendables = legendables.slice(0, this._maxItems);\r\n        }\r\n\r\n        const legendItemClassName = this._legendItemClass ? this._legendItemClass : this._defaultLegendItemCssClass;\r\n\r\n        const itemEnter = container.selectAll(`div.${legendItemClassName}`)\r\n            .data(legendables).enter()\r\n            .append('div')\r\n            .classed(legendItemClassName, true)\r\n            .on('mouseover', d3compat.eventHandler(d => this._parent.legendHighlight(d)))\r\n            .on('mouseout', d3compat.eventHandler(d => this._parent.legendReset(d)))\r\n            .on('click', d3compat.eventHandler(d => this._parent.legendToggle(d)));\r\n\r\n        if (this._highlightSelected) {\r\n            itemEnter.classed(constants.SELECTED_CLASS, d => filters.indexOf(d.name) !== -1);\r\n        }\r\n\r\n        itemEnter.append('span')\r\n            .attr('class', 'dc-legend-item-color')\r\n            .style('background-color', pluck('color'));\r\n\r\n        itemEnter.append('span')\r\n            .attr('class', 'dc-legend-item-label')\r\n            .classed('dc-tabbable', this._keyboardAccessible)\r\n            .attr('title', this._legendText)\r\n            .text(this._legendText);\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeLegendKeyboardAccessible();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the container selector for the legend widget. Required.\r\n     * @param {String} [container]\r\n     * @return {String|HtmlLegend}\r\n     */\r\n    container (container) {\r\n        if (!arguments.length) {\r\n            return this._container;\r\n        }\r\n        this._container = select(container);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This can be optionally used to override class for legenditem and just use this class style.\r\n     * This is helpful for overriding the style of a particular chart rather than overriding\r\n     * the style for all charts.\r\n     *\r\n     * Setting this will disable the highlighting of selected items also.\r\n     * @param {String} [legendItemClass]\r\n     * @return {String|HtmlLegend}\r\n     */\r\n    legendItemClass (legendItemClass) {\r\n        if (!arguments.length) {\r\n            return this._legendItemClass;\r\n        }\r\n        this._legendItemClass = legendItemClass;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This can be optionally used to enable highlighting legends for the selections/filters for the\r\n     * chart.\r\n     * @param {String} [highlightSelected]\r\n     * @return {String|HtmlLegend}\r\n     */\r\n    highlightSelected (highlightSelected) {\r\n        if (!arguments.length) {\r\n            return this._highlightSelected;\r\n        }\r\n        this._highlightSelected = highlightSelected;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Display the legend horizontally instead of vertically\r\n     * @param {String} [horizontal]\r\n     * @return {String|HtmlLegend}\r\n     */\r\n    horizontal (horizontal) {\r\n        if (!arguments.length) {\r\n            return this._horizontal;\r\n        }\r\n        this._horizontal = horizontal;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the legend text function. The legend widget uses this function to render the legend\r\n     * text for each item. If no function is specified the legend widget will display the names\r\n     * associated with each group.\r\n     * @param  {Function} [legendText]\r\n     * @returns {Function|HtmlLegend}\r\n     * @example\r\n     * // default legendText\r\n     * legend.legendText(pluck('name'))\r\n     *\r\n     * // create numbered legend items\r\n     * chart.legend(new HtmlLegend().legendText(function(d, i) { return i + '. ' + d.name; }))\r\n     *\r\n     * // create legend displaying group counts\r\n     * chart.legend(new HtmlLegend().legendText(function(d) { return d.name + ': ' d.data; }))\r\n     */\r\n    legendText (legendText) {\r\n        if (!arguments.length) {\r\n            return this._legendText;\r\n        }\r\n        this._legendText = legendText;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Maximum number of legend items to display\r\n     * @param  {Number} [maxItems]\r\n     * @return {HtmlLegend}\r\n     */\r\n    maxItems (maxItems) {\r\n        if (!arguments.length) {\r\n            return this._maxItems;\r\n        }\r\n        this._maxItems = utils.isNumber(maxItems) ? maxItems : undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * If set, individual legend items will be focusable from keyboard and on pressing Enter or Space\r\n     * will behave as if clicked on.\r\n     * \r\n     * If `svgDescription` on the parent chart has not been explicitly set, will also set the default \r\n     * SVG description text to the class constructor name, like BarChart or HeatMap, and make the entire\r\n     * SVG focusable.\r\n     * @param {Boolean} [keyboardAccessible=false]\r\n     * @returns {Boolean|HtmlLegend}\r\n     */\r\n    keyboardAccessible (keyboardAccessible) {\r\n        if (!arguments.length) {\r\n            return this._keyboardAccessible;\r\n        }\r\n        this._keyboardAccessible = keyboardAccessible;\r\n        return this;\r\n    }\r\n\r\n    _makeLegendKeyboardAccessible () {\r\n\r\n        if (!this._parent._svgDescription) {\r\n\r\n            this._parent.svg().append('desc')\r\n                .attr('id', `desc-id-${this._parent.__dcFlag__}`)\r\n                .html(`${this._parent.svgDescription()}`);\r\n\r\n            this._parent.svg()\r\n                .attr('tabindex', '0')\r\n                .attr('role', 'img')\r\n                .attr('aria-labelledby', `desc-id-${this._parent.__dcFlag__}`);\r\n        }\r\n\r\n        const tabElements = this.container()\r\n            .selectAll('.dc-legend-item-label.dc-tabbable')\r\n            .attr('tabindex', 0);\r\n\r\n        tabElements\r\n            .on('keydown', d3compat.eventHandler((d, event) => {\r\n                // trigger only if d is an object\r\n                if (event.keyCode === 13 && typeof d === 'object') {\r\n                    d.chart.legendToggle(d)\r\n                } \r\n                // special case for space key press - prevent scrolling\r\n                if (event.keyCode === 32 && typeof d === 'object') {\r\n                    d.chart.legendToggle(d)\r\n                    event.preventDefault();            \r\n                }\r\n            }))\r\n            .on('focus', d3compat.eventHandler(d => {\r\n                this._parent.legendHighlight(d);\r\n            }))\r\n            .on('blur', d3compat.eventHandler(d => {\r\n                this._parent.legendReset(d);\r\n            }));\r\n    }\r\n}\r\n\r\nexport const htmlLegend = () => new HtmlLegend();\r\n","import {pluck, utils} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\nimport {constants} from '../core/constants';\r\n\r\nconst LABEL_GAP = 2;\r\n\r\n/**\r\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\r\n * labels.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\r\n * @example\r\n * chart.legend(new Legend().x(400).y(10).itemHeight(13).gap(5))\r\n * @returns {Legend}\r\n */\r\nexport class Legend {\r\n    constructor () {\r\n        this._parent = undefined;\r\n        this._x = 0;\r\n        this._y = 0;\r\n        this._itemHeight = 12;\r\n        this._gap = 5;\r\n        this._horizontal = false;\r\n        this._legendWidth = 560;\r\n        this._itemWidth = 70;\r\n        this._autoItemWidth = false;\r\n        this._legendText = pluck('name');\r\n        this._maxItems = undefined;\r\n        this._highlightSelected = false;\r\n        this._keyboardAccessible = false;\r\n\r\n        this._g = undefined;\r\n    }\r\n\r\n    parent (p) {\r\n        if (!arguments.length) {\r\n            return this._parent;\r\n        }\r\n        this._parent = p;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get x coordinate for legend widget.\r\n     * @param  {Number} [x=0]\r\n     * @returns {Number|Legend}\r\n     */\r\n    x (x) {\r\n        if (!arguments.length) {\r\n            return this._x;\r\n        }\r\n        this._x = x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get y coordinate for legend widget.\r\n     * @param  {Number} [y=0]\r\n     * @returns {Number|Legend}\r\n     */\r\n    y (y) {\r\n        if (!arguments.length) {\r\n            return this._y;\r\n        }\r\n        this._y = y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get gap between legend items.\r\n     * @param  {Number} [gap=5]\r\n     * @returns {Number|Legend}\r\n     */\r\n    gap (gap) {\r\n        if (!arguments.length) {\r\n            return this._gap;\r\n        }\r\n        this._gap = gap;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This can be optionally used to enable highlighting legends for the selections/filters for the\r\n     * chart.\r\n     * @param {String} [highlightSelected]\r\n     * @return {String|dc.legend}\r\n     **/\r\n    highlightSelected (highlightSelected) {\r\n        if (!arguments.length) {\r\n            return this._highlightSelected;\r\n        }\r\n        this._highlightSelected = highlightSelected;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get legend item height.\r\n     * @param  {Number} [itemHeight=12]\r\n     * @returns {Number|Legend}\r\n     */\r\n    itemHeight (itemHeight) {\r\n        if (!arguments.length) {\r\n            return this._itemHeight;\r\n        }\r\n        this._itemHeight = itemHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Position legend horizontally instead of vertically.\r\n     * @param  {Boolean} [horizontal=false]\r\n     * @returns {Boolean|Legend}\r\n     */\r\n    horizontal (horizontal) {\r\n        if (!arguments.length) {\r\n            return this._horizontal;\r\n        }\r\n        this._horizontal = horizontal;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Maximum width for horizontal legend.\r\n     * @param  {Number} [legendWidth=500]\r\n     * @returns {Number|Legend}\r\n     */\r\n    legendWidth (legendWidth) {\r\n        if (!arguments.length) {\r\n            return this._legendWidth;\r\n        }\r\n        this._legendWidth = legendWidth;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Legend item width for horizontal legend.\r\n     * @param  {Number} [itemWidth=70]\r\n     * @returns {Number|Legend}\r\n     */\r\n    itemWidth (itemWidth) {\r\n        if (!arguments.length) {\r\n            return this._itemWidth;\r\n        }\r\n        this._itemWidth = itemWidth;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Turn automatic width for legend items on or off. If true, {@link Legend#itemWidth itemWidth} is ignored.\r\n     * This setting takes into account the {@link Legend#gap gap}.\r\n     * @param  {Boolean} [autoItemWidth=false]\r\n     * @returns {Boolean|Legend}\r\n     */\r\n    autoItemWidth (autoItemWidth) {\r\n        if (!arguments.length) {\r\n            return this._autoItemWidth;\r\n        }\r\n        this._autoItemWidth = autoItemWidth;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get the legend text function. The legend widget uses this function to render the legend\r\n     * text for each item. If no function is specified the legend widget will display the names\r\n     * associated with each group.\r\n     * @param  {Function} [legendText]\r\n     * @returns {Function|Legend}\r\n     * @example\r\n     * // default legendText\r\n     * legend.legendText(pluck('name'))\r\n     *\r\n     * // create numbered legend items\r\n     * chart.legend(new Legend().legendText(function(d, i) { return i + '. ' + d.name; }))\r\n     *\r\n     * // create legend displaying group counts\r\n     * chart.legend(new Legend().legendText(function(d) { return d.name + ': ' d.data; }))\r\n     */\r\n    legendText (legendText) {\r\n        if (!arguments.length) {\r\n            return this._legendText;\r\n        }\r\n        this._legendText = legendText;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Maximum number of legend items to display\r\n     * @param  {Number} [maxItems]\r\n     * @return {Legend}\r\n     */\r\n    maxItems (maxItems) {\r\n        if (!arguments.length) {\r\n            return this._maxItems;\r\n        }\r\n        this._maxItems = utils.isNumber(maxItems) ? maxItems : undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * If set, individual legend items will be focusable from keyboard and on pressing Enter or Space\r\n     * will behave as if clicked on.\r\n     * \r\n     * If `svgDescription` on the parent chart has not been explicitly set, will also set the default \r\n     * SVG description text to the class constructor name, like BarChart or HeatMap, and make the entire\r\n     * SVG focusable.\r\n     * @param {Boolean} [keyboardAccessible=false]\r\n     * @returns {Boolean|Legend}\r\n     */\r\n    keyboardAccessible (keyboardAccessible) {\r\n        if (!arguments.length) {\r\n            return this._keyboardAccessible;\r\n        }\r\n        this._keyboardAccessible = keyboardAccessible;\r\n        return this;\r\n    }\r\n\r\n    // Implementation methods\r\n\r\n    _legendItemHeight () {\r\n        return this._gap + this._itemHeight;\r\n    }\r\n\r\n    _makeLegendKeyboardAccessible () {\r\n\r\n        if (!this._parent._svgDescription) {\r\n\r\n            this._parent.svg().append('desc')\r\n                .attr('id', `desc-id-${this._parent.__dcFlag__}`)\r\n                .html(`${this._parent.svgDescription()}`);\r\n\r\n            this._parent.svg()\r\n                .attr('tabindex', '0')\r\n                .attr('role', 'img')\r\n                .attr('aria-labelledby', `desc-id-${this._parent.__dcFlag__}`);\r\n        }\r\n\r\n        const tabElements = this._parent.svg()\r\n            .selectAll('.dc-legend .dc-tabbable')\r\n            .attr('tabindex', 0);\r\n\r\n        tabElements\r\n            .on('keydown', d3compat.eventHandler((d, event) => {\r\n                // trigger only if d is an object\r\n                if (event.keyCode === 13 && typeof d === 'object') {\r\n                    d.chart.legendToggle(d)\r\n                } \r\n                // special case for space key press - prevent scrolling\r\n                if (event.keyCode === 32 && typeof d === 'object') {\r\n                    d.chart.legendToggle(d)\r\n                    event.preventDefault();            \r\n                }\r\n            }))\r\n            .on('focus', d3compat.eventHandler(d => {\r\n                this._parent.legendHighlight(d);\r\n            }))\r\n            .on('blur', d3compat.eventHandler(d => {\r\n                this._parent.legendReset(d);\r\n            }));\r\n    }\r\n\r\n    render () {\r\n        this._parent.svg().select('g.dc-legend').remove();\r\n        this._g = this._parent.svg().append('g')\r\n            .attr('class', 'dc-legend')\r\n            .attr('transform', `translate(${this._x},${this._y})`);\r\n        let legendables = this._parent.legendables();\r\n        const filters = this._parent.filters();\r\n\r\n        if (this._maxItems !== undefined) {\r\n            legendables = legendables.slice(0, this._maxItems);\r\n        }\r\n\r\n        const itemEnter = this._g.selectAll('g.dc-legend-item')\r\n            .data(legendables)\r\n            .enter()\r\n            .append('g')\r\n            .attr('class', 'dc-legend-item')\r\n            .on('mouseover', d3compat.eventHandler(d => {\r\n                this._parent.legendHighlight(d);\r\n            }))\r\n            .on('mouseout', d3compat.eventHandler(d => {\r\n                this._parent.legendReset(d);\r\n            }))\r\n            .on('click', d3compat.eventHandler(d => {\r\n                d.chart.legendToggle(d);\r\n            }));\r\n\r\n        if (this._highlightSelected) {\r\n            itemEnter.classed(constants.SELECTED_CLASS,\r\n                              d => filters.indexOf(d.name) !== -1);\r\n        }\r\n\r\n\r\n        this._g.selectAll('g.dc-legend-item')\r\n            .classed('fadeout', d => d.chart.isLegendableHidden(d));\r\n\r\n        if (legendables.some(pluck('dashstyle'))) {\r\n            itemEnter\r\n                .append('line')\r\n                .attr('x1', 0)\r\n                .attr('y1', this._itemHeight / 2)\r\n                .attr('x2', this._itemHeight)\r\n                .attr('y2', this._itemHeight / 2)\r\n                .attr('stroke-width', 2)\r\n                .attr('stroke-dasharray', pluck('dashstyle'))\r\n                .attr('stroke', pluck('color'));\r\n        } else {\r\n            itemEnter\r\n                .append('rect')\r\n                .attr('width', this._itemHeight)\r\n                .attr('height', this._itemHeight)\r\n                .attr('fill', d => d ? d.color : 'blue');\r\n        }\r\n\r\n        {\r\n            const self = this;\r\n\r\n            itemEnter.append('text')\r\n                .text(self._legendText)\r\n                .classed('dc-tabbable', this._keyboardAccessible)\r\n                .attr('x', self._itemHeight + LABEL_GAP)\r\n                .attr('y', function () {\r\n                    return self._itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\r\n                });\r\n\r\n            if (this._keyboardAccessible) {\r\n                this._makeLegendKeyboardAccessible();\r\n            }\r\n        }\r\n\r\n        let cumulativeLegendTextWidth = 0;\r\n        let row = 0;\r\n\r\n        {\r\n            const self = this;\r\n\r\n            itemEnter.attr('transform', function (d, i) {\r\n                if (self._horizontal) {\r\n                    const itemWidth = self._autoItemWidth === true ? this.getBBox().width + self._gap : self._itemWidth;\r\n                    if ((cumulativeLegendTextWidth + itemWidth) > self._legendWidth && cumulativeLegendTextWidth > 0) {\r\n                        ++row;\r\n                        cumulativeLegendTextWidth = 0;\r\n                    }\r\n                    const translateBy = `translate(${cumulativeLegendTextWidth},${row * self._legendItemHeight()})`;\r\n                    cumulativeLegendTextWidth += itemWidth;\r\n                    return translateBy;\r\n                } else {\r\n                    return `translate(0,${i * self._legendItemHeight()})`;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const legend = () => new Legend();\r\n","import {\r\n    area,\r\n    curveBasis,\r\n    curveBasisClosed,\r\n    curveBasisOpen,\r\n    curveBundle,\r\n    curveCardinal,\r\n    curveCardinalClosed,\r\n    curveCardinalOpen,\r\n    curveLinear,\r\n    curveLinearClosed,\r\n    curveMonotoneX,\r\n    curveStep,\r\n    curveStepAfter,\r\n    curveStepBefore,\r\n    line\r\n} from 'd3-shape';\r\nimport {select} from 'd3-selection';\r\n\r\nimport {logger} from '../core/logger';\r\nimport {pluck, utils} from '../core/utils';\r\nimport {StackMixin} from '../base/stack-mixin';\r\nimport {transition} from '../core/core';\r\n\r\nconst DEFAULT_DOT_RADIUS = 5;\r\nconst TOOLTIP_G_CLASS = 'dc-tooltip';\r\nconst DOT_CIRCLE_CLASS = 'dot';\r\nconst Y_AXIS_REF_LINE_CLASS = 'yRef';\r\nconst X_AXIS_REF_LINE_CLASS = 'xRef';\r\nconst DEFAULT_DOT_OPACITY = 1e-6;\r\nconst LABEL_PADDING = 3;\r\n\r\n/**\r\n * Concrete line/area chart implementation.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\r\n * @mixes StackMixin\r\n * @mixes CoordinateGridMixin\r\n */\r\nexport class LineChart extends StackMixin {\r\n    /**\r\n     * Create a Line Chart.\r\n     * @example\r\n     * // create a line chart under #chart-container1 element using the default global chart group\r\n     * var chart1 = new LineChart('#chart-container1');\r\n     * // create a line chart under #chart-container2 element using chart group A\r\n     * var chart2 = new LineChart('#chart-container2', 'chartGroupA');\r\n     * // create a sub-chart under a composite parent chart\r\n     * var chart3 = new LineChart(compositeChart);\r\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\r\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\r\n     * chart is a sub-chart in a {@link CompositeChart Composite Chart} then pass in the parent\r\n     * composite chart instance instead.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._renderArea = false;\r\n        this._dotRadius = DEFAULT_DOT_RADIUS;\r\n        this._dataPointRadius = null;\r\n        this._dataPointFillOpacity = DEFAULT_DOT_OPACITY;\r\n        this._dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\r\n        this._curve = null;\r\n        this._interpolate = null; // d3.curveLinear;  // deprecated in 3.0\r\n        this._tension = null;  // deprecated in 3.0\r\n        this._defined = undefined;\r\n        this._dashStyle = undefined;\r\n        this._xyTipsOn = true;\r\n\r\n        this.transitionDuration(500);\r\n        this.transitionDelay(0);\r\n        this._rangeBandPadding(1);\r\n\r\n        this.label(d => utils.printSingleValue(d.y0 + d.y), false);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    plotData () {\r\n        const chartBody = this.chartBodyG();\r\n        let layersList = chartBody.select('g.stack-list');\r\n\r\n        if (layersList.empty()) {\r\n            layersList = chartBody.append('g').attr('class', 'stack-list');\r\n        }\r\n\r\n        let layers = layersList.selectAll('g.stack').data(this.data());\r\n\r\n        const layersEnter = layers\r\n            .enter()\r\n            .append('g')\r\n            .attr('class', (d, i) => `stack _${i}`);\r\n\r\n        layers = layersEnter.merge(layers);\r\n\r\n        this._drawLine(layersEnter, layers);\r\n\r\n        this._drawArea(layersEnter, layers);\r\n\r\n        this._drawDots(chartBody, layers);\r\n\r\n        if (this.renderLabel()) {\r\n            this._drawLabels(layers);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the curve factory to use for lines and areas drawn, allowing e.g. step\r\n     * functions, splines, and cubic interpolation. Typically you would use one of the interpolator functions\r\n     * provided by {@link https://github.com/d3/d3-shape/blob/master/README.md#curves d3 curves}.\r\n     *\r\n     * Replaces the use of {@link LineChart#interpolate} and {@link LineChart#tension}\r\n     * in dc.js < 3.0\r\n     *\r\n     * This is passed to\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#line_curve line.curve} and\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#area_curve area.curve}.\r\n     * @example\r\n     * // default\r\n     * chart\r\n     *     .curve(d3.curveLinear);\r\n     * // Add tension to curves that support it\r\n     * chart\r\n     *     .curve(d3.curveCardinal.tension(0.5));\r\n     * // You can use some specialized variation like\r\n     * // https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\r\n     * chart\r\n     *     .curve(d3.curveCatmullRom.alpha(0.5));\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#line_curve line.curve}\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#area_curve area.curve}\r\n     * @param  {d3.curve} [curve=d3.curveLinear]\r\n     * @returns {d3.curve|LineChart}\r\n     */\r\n    curve (curve) {\r\n        if (!arguments.length) {\r\n            return this._curve;\r\n        }\r\n        this._curve = curve;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\r\n     * functions, splines, and cubic interpolation.\r\n     *\r\n     * Possible values are: 'linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis',\r\n     * 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', and\r\n     * 'monotone'.\r\n     *\r\n     * This function exists for backward compatibility. Use {@link LineChart#curve}\r\n     * which is generic and provides more options.\r\n     * Value set through `.curve` takes precedence over `.interpolate` and `.tension`.\r\n     * @deprecated since version 3.0 use {@link LineChart#curve} instead\r\n     * @see {@link LineChart#curve}\r\n     * @param  {d3.curve} [interpolate=d3.curveLinear]\r\n     * @returns {d3.curve|LineChart}\r\n     */\r\n    interpolate (interpolate) {\r\n        logger.warnOnce('dc.lineChart.interpolate has been deprecated since version 3.0 use dc.lineChart.curve instead');\r\n        if (!arguments.length) {\r\n            return this._interpolate;\r\n        }\r\n        this._interpolate = interpolate;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\r\n     *\r\n     * Passed to the {@link https://github.com/d3/d3-shape/blob/master/README.md#curves d3 curve function}\r\n     * if it provides a `.tension` function. Example:\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#curveCardinal_tension curveCardinal.tension}.\r\n     *\r\n     * This function exists for backward compatibility. Use {@link LineChart#curve}\r\n     * which is generic and provides more options.\r\n     * Value set through `.curve` takes precedence over `.interpolate` and `.tension`.\r\n     * @deprecated since version 3.0 use {@link LineChart#curve} instead\r\n     * @see {@link LineChart#curve}\r\n     * @param  {Number} [tension=0]\r\n     * @returns {Number|LineChart}\r\n     */\r\n    tension (tension) {\r\n        logger.warnOnce('dc.lineChart.tension has been deprecated since version 3.0 use dc.lineChart.curve instead');\r\n        if (!arguments.length) {\r\n            return this._tension;\r\n        }\r\n        this._tension = tension;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a function that will determine discontinuities in the line which should be\r\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\r\n     * This function is passed to\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#line_defined line.defined}\r\n     *\r\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\r\n     * custom reduce functions to get this to work, depending on your data. See\r\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\r\n     * for more details and an example.\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#line_defined line.defined}\r\n     * @param  {Function} [defined]\r\n     * @returns {Function|LineChart}\r\n     */\r\n    defined (defined) {\r\n        if (!arguments.length) {\r\n            return this._defined;\r\n        }\r\n        this._defined = defined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\r\n     * array (solid line).\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\r\n     * @example\r\n     * // create a Dash Dot Dot Dot\r\n     * chart.dashStyle([3,1,1,1]);\r\n     * @param  {Array<Number>} [dashStyle=[]]\r\n     * @returns {Array<Number>|LineChart}\r\n     */\r\n    dashStyle (dashStyle) {\r\n        if (!arguments.length) {\r\n            return this._dashStyle;\r\n        }\r\n        this._dashStyle = dashStyle;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\r\n     * beneath each line and the line chart effectively becomes an area chart.\r\n     * @param  {Boolean} [renderArea=false]\r\n     * @returns {Boolean|LineChart}\r\n     */\r\n    renderArea (renderArea) {\r\n        if (!arguments.length) {\r\n            return this._renderArea;\r\n        }\r\n        this._renderArea = renderArea;\r\n        return this;\r\n    }\r\n\r\n    _getColor (d, i) {\r\n        return this.getColor.call(d, d.values, i);\r\n    }\r\n\r\n    // To keep it backward compatible, this covers multiple cases\r\n    // See https://github.com/dc-js/dc.js/issues/1376\r\n    // It will be removed when interpolate and tension are removed.\r\n    _getCurveFactory () {\r\n        let curve = null;\r\n\r\n        // _curve takes precedence\r\n        if (this._curve) {\r\n            return this._curve;\r\n        }\r\n\r\n        // Approximate the D3v3 behavior\r\n        if (typeof this._interpolate === 'function') {\r\n            curve = this._interpolate;\r\n        } else {\r\n            // If _interpolate is string\r\n            const mapping = {\r\n                'linear': curveLinear,\r\n                'linear-closed': curveLinearClosed,\r\n                'step': curveStep,\r\n                'step-before': curveStepBefore,\r\n                'step-after': curveStepAfter,\r\n                'basis': curveBasis,\r\n                'basis-open': curveBasisOpen,\r\n                'basis-closed': curveBasisClosed,\r\n                'bundle': curveBundle,\r\n                'cardinal': curveCardinal,\r\n                'cardinal-open': curveCardinalOpen,\r\n                'cardinal-closed': curveCardinalClosed,\r\n                'monotone': curveMonotoneX\r\n            };\r\n            curve = mapping[this._interpolate];\r\n        }\r\n\r\n        // Default value\r\n        if (!curve) {\r\n            curve = curveLinear;\r\n        }\r\n\r\n        if (this._tension !== null) {\r\n            if (typeof curve.tension !== 'function') {\r\n                logger.warn('tension was specified but the curve/interpolate does not support it.');\r\n            } else {\r\n                curve = curve.tension(this._tension);\r\n            }\r\n        }\r\n        return curve;\r\n    }\r\n\r\n    _drawLine (layersEnter, layers) {\r\n        const _line = line()\r\n            .x(d => this.x()(d.x))\r\n            .y(d => this.y()(d.y + d.y0))\r\n            .curve(this._getCurveFactory());\r\n        if (this._defined) {\r\n            _line.defined(this._defined);\r\n        }\r\n\r\n        const path = layersEnter.append('path')\r\n            .attr('class', 'line')\r\n            .attr('stroke', (d, i) => this._getColor(d, i));\r\n        if (this._dashStyle) {\r\n            path.attr('stroke-dasharray', this._dashStyle);\r\n        }\r\n\r\n        transition(layers.select('path.line'), this.transitionDuration(), this.transitionDelay())\r\n        //.ease('linear')\r\n            .attr('stroke', (d, i) => this._getColor(d, i))\r\n            .attr('d', d => this._safeD(_line(d.values)));\r\n    }\r\n\r\n    _drawArea (layersEnter, layers) {\r\n        if (this._renderArea) {\r\n            const _area = area()\r\n                .x(d => this.x()(d.x))\r\n                .y1(d => this.y()(d.y + d.y0))\r\n                .y0(d => this.y()(d.y0))\r\n                .curve(this._getCurveFactory());\r\n            if (this._defined) {\r\n                _area.defined(this._defined);\r\n            }\r\n\r\n            layersEnter.append('path')\r\n                .attr('class', 'area')\r\n                .attr('fill', (d, i) => this._getColor(d, i))\r\n                .attr('d', d => this._safeD(_area(d.values)));\r\n\r\n            transition(layers.select('path.area'), this.transitionDuration(), this.transitionDelay())\r\n            //.ease('linear')\r\n                .attr('fill', (d, i) => this._getColor(d, i))\r\n                .attr('d', d => this._safeD(_area(d.values)));\r\n        }\r\n    }\r\n\r\n    _safeD (d) {\r\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\r\n    }\r\n\r\n    _drawDots (chartBody, layers) {\r\n        if (this.xyTipsOn() === 'always' || (!(this.brushOn() || this.parentBrushOn()) && this.xyTipsOn())) {\r\n            const tooltipListClass = `${TOOLTIP_G_CLASS}-list`;\r\n            let tooltips = chartBody.select(`g.${tooltipListClass}`);\r\n\r\n            if (tooltips.empty()) {\r\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\r\n            }\r\n\r\n            layers.each((data, layerIndex) => {\r\n                let points = data.values;\r\n                if (this._defined) {\r\n                    points = points.filter(this._defined);\r\n                }\r\n\r\n                let g = tooltips.select(`g.${TOOLTIP_G_CLASS}._${layerIndex}`);\r\n                if (g.empty()) {\r\n                    g = tooltips.append('g').attr('class', `${TOOLTIP_G_CLASS} _${layerIndex}`);\r\n                }\r\n\r\n                this._createRefLines(g);\r\n\r\n                const dots = g.selectAll(`circle.${DOT_CIRCLE_CLASS}`)\r\n                    .data(points, pluck('x'));\r\n\r\n                const chart = this;\r\n                const dotsEnterModify = dots\r\n                    .enter()\r\n                    .append('circle')\r\n                    .attr('class', DOT_CIRCLE_CLASS)\r\n                    .classed('dc-tabbable', this._keyboardAccessible)\r\n                    .attr('cx', d => utils.safeNumber(this.x()(d.x)))\r\n                    .attr('cy', d => utils.safeNumber(this.y()(d.y + d.y0)))\r\n                    .attr('r', this._getDotRadius())\r\n                    .style('fill-opacity', this._dataPointFillOpacity)\r\n                    .style('stroke-opacity', this._dataPointStrokeOpacity)\r\n                    .attr('fill', this.getColor)\r\n                    .attr('stroke', this.getColor)\r\n                    .on('mousemove', function () {\r\n                        const dot = select(this);\r\n                        chart._showDot(dot);\r\n                        chart._showRefLines(dot, g);\r\n                    })\r\n                    .on('mouseout', function () {\r\n                        const dot = select(this);\r\n                        chart._hideDot(dot);\r\n                        chart._hideRefLines(g);\r\n                    })\r\n                    .merge(dots);\r\n\r\n                // special case for on-focus for line chart and its dots\r\n                if (this._keyboardAccessible) {\r\n\r\n                    this._svg.selectAll('.dc-tabbable')\r\n                        .attr('tabindex', 0)\r\n                        .on('focus', function () {\r\n                            const dot = select(this);\r\n                            chart._showDot(dot);\r\n                            chart._showRefLines(dot, g);\r\n                        })\r\n                        .on('blur', function () {\r\n                            const dot = select(this);\r\n                            chart._hideDot(dot);\r\n                            chart._hideRefLines(g);\r\n                        });\r\n                }\r\n\r\n                dotsEnterModify.call(dot => this._doRenderTitle(dot, data));\r\n\r\n                transition(dotsEnterModify, this.transitionDuration())\r\n                    .attr('cx', d => utils.safeNumber(this.x()(d.x)))\r\n                    .attr('cy', d => utils.safeNumber(this.y()(d.y + d.y0)))\r\n                    .attr('fill', this.getColor);\r\n\r\n                dots.exit().remove();\r\n            });\r\n        }\r\n    }\r\n\r\n    _drawLabels (layers) {\r\n        const chart = this;\r\n        layers.each(function (data, layerIndex) {\r\n            const layer = select(this);\r\n            const labels = layer.selectAll('text.lineLabel')\r\n                .data(data.values, pluck('x'));\r\n\r\n            const labelsEnterModify = labels\r\n                .enter()\r\n                .append('text')\r\n                .attr('class', 'lineLabel')\r\n                .attr('text-anchor', 'middle')\r\n                .merge(labels);\r\n\r\n            transition(labelsEnterModify, chart.transitionDuration())\r\n                .attr('x', d => utils.safeNumber(chart.x()(d.x)))\r\n                .attr('y', d => {\r\n                    const y = chart.y()(d.y + d.y0) - LABEL_PADDING;\r\n                    return utils.safeNumber(y);\r\n                })\r\n                .text(d => chart.label()(d));\r\n\r\n            transition(labels.exit(), chart.transitionDuration())\r\n                .attr('height', 0)\r\n                .remove();\r\n        });\r\n    }\r\n\r\n    _createRefLines (g) {\r\n        const yRefLine = g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).empty() ?\r\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select(`path.${Y_AXIS_REF_LINE_CLASS}`);\r\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\r\n\r\n        const xRefLine = g.select(`path.${X_AXIS_REF_LINE_CLASS}`).empty() ?\r\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select(`path.${X_AXIS_REF_LINE_CLASS}`);\r\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\r\n    }\r\n\r\n    _showDot (dot) {\r\n        dot.style('fill-opacity', 0.8);\r\n        dot.style('stroke-opacity', 0.8);\r\n        dot.attr('r', this._dotRadius);\r\n        return dot;\r\n    }\r\n\r\n    _showRefLines (dot, g) {\r\n        const x = dot.attr('cx');\r\n        const y = dot.attr('cy');\r\n        const yAxisX = (this._yAxisX() - this.margins().left);\r\n        const yAxisRefPathD = `M${yAxisX} ${y}L${x} ${y}`;\r\n        const xAxisRefPathD = `M${x} ${this.yAxisHeight()}L${x} ${y}`;\r\n        g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).style('display', '').attr('d', yAxisRefPathD);\r\n        g.select(`path.${X_AXIS_REF_LINE_CLASS}`).style('display', '').attr('d', xAxisRefPathD);\r\n    }\r\n\r\n    _getDotRadius () {\r\n        return this._dataPointRadius || this._dotRadius;\r\n    }\r\n\r\n    _hideDot (dot) {\r\n        dot.style('fill-opacity', this._dataPointFillOpacity)\r\n            .style('stroke-opacity', this._dataPointStrokeOpacity)\r\n            .attr('r', this._getDotRadius());\r\n    }\r\n\r\n    _hideRefLines (g) {\r\n        g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).style('display', 'none');\r\n        g.select(`path.${X_AXIS_REF_LINE_CLASS}`).style('display', 'none');\r\n    }\r\n\r\n    _doRenderTitle (dot, d) {\r\n        if (this.renderTitle()) {\r\n            dot.select('title').remove();\r\n            dot.append('title').text(pluck('data', this.title(d.name)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\r\n     * dashed lines back to each respective axis.  This is ignored if the chart\r\n     * {@link CoordinateGridMixin#brushOn brush} is on\r\n     * @param  {Boolean} [xyTipsOn=false]\r\n     * @returns {Boolean|LineChart}\r\n     */\r\n    xyTipsOn (xyTipsOn) {\r\n        if (!arguments.length) {\r\n            return this._xyTipsOn;\r\n        }\r\n        this._xyTipsOn = xyTipsOn;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the radius (in px) for dots displayed on the data points.\r\n     * @param  {Number} [dotRadius=5]\r\n     * @returns {Number|LineChart}\r\n     */\r\n    dotRadius (dotRadius) {\r\n        if (!arguments.length) {\r\n            return this._dotRadius;\r\n        }\r\n        this._dotRadius = dotRadius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Always show individual dots for each datapoint.\r\n     *\r\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\r\n     * current `options` values are instead returned.\r\n     * @example\r\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.0})\r\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.0, radius: 2}]\r\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|LineChart}\r\n     */\r\n    renderDataPoints (options) {\r\n        if (!arguments.length) {\r\n            return {\r\n                fillOpacity: this._dataPointFillOpacity,\r\n                strokeOpacity: this._dataPointStrokeOpacity,\r\n                radius: this._dataPointRadius\r\n            };\r\n        } else if (!options) {\r\n            this._dataPointFillOpacity = DEFAULT_DOT_OPACITY;\r\n            this._dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\r\n            this._dataPointRadius = null;\r\n        } else {\r\n            this._dataPointFillOpacity = options.fillOpacity || 0.8;\r\n            this._dataPointStrokeOpacity = options.strokeOpacity || 0.0;\r\n            this._dataPointRadius = options.radius || 2;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _colorFilter (color, dashstyle, inv) {\r\n        return function () {\r\n            const item = select(this);\r\n            const match = (item.attr('stroke') === color &&\r\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\r\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\r\n            return inv ? !match : match;\r\n        };\r\n    }\r\n\r\n    legendHighlight (d) {\r\n        if (!this.isLegendableHidden(d)) {\r\n            this.g().selectAll('path.line, path.area')\r\n                .classed('highlight', this._colorFilter(d.color, d.dashstyle))\r\n                .classed('fadeout', this._colorFilter(d.color, d.dashstyle, true));\r\n        }\r\n    }\r\n\r\n    legendReset () {\r\n        this.g().selectAll('path.line, path.area')\r\n            .classed('highlight', false)\r\n            .classed('fadeout', false);\r\n    }\r\n\r\n    legendables () {\r\n        const legendables = super.legendables();\r\n        if (!this._dashStyle) {\r\n            return legendables;\r\n        }\r\n        return legendables.map(l => {\r\n            l.dashstyle = this._dashStyle;\r\n            return l;\r\n        });\r\n    }\r\n}\r\n\r\nexport const lineChart = (parent, chartGroup) => new LineChart(parent, chartGroup);\r\n","import {format} from 'd3-format';\r\nimport {easeQuad} from 'd3-ease';\r\nimport {interpolateNumber} from 'd3-interpolate';\r\n\r\nimport {BaseMixin} from '../base/base-mixin';\r\n\r\nconst SPAN_CLASS = 'number-display';\r\n\r\n/**\r\n * A display of a single numeric value.\r\n *\r\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\r\n * a valueAccessor that returns a single value.\r\n *\r\n * If the group is a {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_groupAll groupAll}\r\n * then its `.value()` will be displayed. This is the recommended usage.\r\n *\r\n * However, if it is given an ordinary group, the `numberDisplay` will show the last bin's value, after\r\n * sorting with the {@link https://dc-js.github.io/dc.js/docs/html/dc.baseMixin.html#ordering__anchor ordering}\r\n * function. `numberDisplay` defaults the `ordering` function to sorting by value, so this will display\r\n * the largest value if the values are numeric.\r\n * @mixes BaseMixin\r\n */\r\nexport class NumberDisplay extends BaseMixin {\r\n    /**\r\n     * Create a Number Display widget.\r\n     *\r\n     * @example\r\n     * // create a number display under #chart-container1 element using the default global chart group\r\n     * var display1 = new NumberDisplay('#chart-container1');\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._formatNumber = format('.2s');\r\n        this._html = {one: '', some: '', none: ''};\r\n        this._lastValue = undefined;\r\n        this._ariaLiveRegion = false;\r\n\r\n        // dimension not required\r\n        this._mandatoryAttributes(['group']);\r\n\r\n        // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\r\n        this.ordering(kv => kv.value);\r\n\r\n        this.data(group => {\r\n            const valObj = group.value ? group.value() : this._maxBin(group.all());\r\n            return this.valueAccessor()(valObj);\r\n        });\r\n\r\n        this.transitionDuration(250); // good default\r\n        this.transitionDelay(0);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\r\n     * displayed.  The text `%number` will be replaced with the current value.\r\n     * - one: HTML template to use if the number is 1\r\n     * - zero: HTML template to use if the number is 0\r\n     * - some: HTML template to use otherwise\r\n     * @example\r\n     * numberWidget.html({\r\n     *      one:'%number record',\r\n     *      some:'%number records',\r\n     *      none:'no records'})\r\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\r\n     * @returns {{one:String, some:String, none:String}|NumberDisplay}\r\n     */\r\n    html (html) {\r\n        if (!arguments.length) {\r\n            return this._html;\r\n        }\r\n        if (html.none) {\r\n            this._html.none = html.none;//if none available\r\n        } else if (html.one) {\r\n            this._html.none = html.one;//if none not available use one\r\n        } else if (html.some) {\r\n            this._html.none = html.some;//if none and one not available use some\r\n        }\r\n        if (html.one) {\r\n            this._html.one = html.one;//if one available\r\n        } else if (html.some) {\r\n            this._html.one = html.some;//if one not available use some\r\n        }\r\n        if (html.some) {\r\n            this._html.some = html.some;//if some available\r\n        } else if (html.one) {\r\n            this._html.some = html.one;//if some not available use one\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate and return the underlying value of the display.\r\n     * @returns {Number}\r\n     */\r\n    value () {\r\n        return this.data();\r\n    }\r\n\r\n    _maxBin (all) {\r\n        if (!all.length) {\r\n            return null;\r\n        }\r\n        const sorted = this._computeOrderedGroups(all);\r\n        return sorted[sorted.length - 1];\r\n    }\r\n\r\n    _doRender () {\r\n        const newValue = this.value();\r\n        let span = this.selectAll(`.${SPAN_CLASS}`);\r\n\r\n        if (span.empty()) {\r\n            span = span.data([0])\r\n                .enter()\r\n                .append('span')\r\n                .attr('class', SPAN_CLASS)\r\n                .classed('dc-tabbable', this._keyboardAccessible)\r\n                .merge(span);\r\n\r\n            if (this._keyboardAccessible) {\r\n                span.attr('tabindex', '0');\r\n            }\r\n\r\n            if (this._ariaLiveRegion) {\r\n                this.transitionDuration(0);\r\n                span.attr('aria-live', 'polite');\r\n            }\r\n        }\r\n\r\n        {\r\n            const chart = this;\r\n            span.transition()\r\n                .duration(chart.transitionDuration())\r\n                .delay(chart.transitionDelay())\r\n                .ease(easeQuad)\r\n                .tween('text', function () {\r\n                    // [XA] don't try and interpolate from Infinity, else this breaks.\r\n                    const interpStart = isFinite(chart._lastValue) ? chart._lastValue : 0;\r\n                    const interp = interpolateNumber(interpStart || 0, newValue);\r\n                    chart._lastValue = newValue;\r\n\r\n                    // need to save it in D3v4\r\n                    const node = this;\r\n                    return t => {\r\n                        let html = null;\r\n                        const num = chart.formatNumber()(interp(t));\r\n                        if (newValue === 0 && (chart._html.none !== '')) {\r\n                            html = chart._html.none;\r\n                        } else if (newValue === 1 && (chart._html.one !== '')) {\r\n                            html = chart._html.one;\r\n                        } else if (chart._html.some !== '') {\r\n                            html = chart._html.some;\r\n                        }\r\n                        node.innerHTML = html ? html.replace('%number', num) : num;\r\n                    };\r\n                });\r\n        }\r\n    }\r\n\r\n    _doRedraw () {\r\n        return this._doRender();\r\n    }\r\n\r\n    /**\r\n     * Get or set a function to format the value for the display.\r\n     * @see {@link https://github.com/d3/d3-format/blob/master/README.md#format d3.format}\r\n     * @param {Function} [formatter=d3.format('.2s')]\r\n     * @returns {Function|NumberDisplay}\r\n     */\r\n    formatNumber (formatter) {\r\n        if (!arguments.length) {\r\n            return this._formatNumber;\r\n        }\r\n        this._formatNumber = formatter;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * If set, the Number Display widget will have its aria-live attribute set to 'polite' which will\r\n     * notify screen readers when the widget changes its value. Note that setting this method will also\r\n     * disable the default transition between the old and the new values. This is to avoid change\r\n     * notifications spoken out before the new value finishes re-drawing. It is also advisable to check\r\n     * if the widget has appropriately set accessibility description or label. \r\n     * @param {Boolean} [ariaLiveRegion=false]\r\n     * @returns {Boolean|NumberDisplay}\r\n     */\r\n    ariaLiveRegion (ariaLiveRegion) {\r\n        if (!arguments.length) {\r\n            return this._ariaLiveRegion;\r\n        }\r\n        this._ariaLiveRegion = ariaLiveRegion;\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport const numberDisplay = (parent, chartGroup) => new NumberDisplay(parent, chartGroup);\r\n","import {min, sum} from 'd3-array';\r\nimport {arc, pie} from 'd3-shape';\r\nimport {select} from 'd3-selection';\r\nimport {interpolate} from 'd3-interpolate';\r\n\r\nimport {CapMixin} from '../base/cap-mixin';\r\nimport {ColorMixin} from '../base/color-mixin';\r\nimport {BaseMixin} from '../base/base-mixin';\r\nimport {transition} from '../core/core';\r\nimport {d3compat} from '../core/config';\r\n\r\nconst DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\r\n\r\n/**\r\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\r\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\r\n * slice relative to the sum of all values. Slices are ordered by {@link BaseMixin#ordering ordering}\r\n * which defaults to sorting by key.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * @mixes CapMixin\r\n * @mixes ColorMixin\r\n * @mixes BaseMixin\r\n */\r\nexport class PieChart extends CapMixin(ColorMixin(BaseMixin)) {\r\n    /**\r\n     * Create a Pie Chart\r\n     *\r\n     * @example\r\n     * // create a pie chart under #chart-container1 element using the default global chart group\r\n     * var chart1 = new PieChart('#chart-container1');\r\n     * // create a pie chart under #chart-container2 element using chart group A\r\n     * var chart2 = new PieChart('#chart-container2', 'chartGroupA');\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._sliceCssClass = 'pie-slice';\r\n        this._labelCssClass = 'pie-label';\r\n        this._sliceGroupCssClass = 'pie-slice-group';\r\n        this._labelGroupCssClass = 'pie-label-group';\r\n        this._emptyCssClass = 'empty-chart';\r\n        this._emptyTitle = 'empty';\r\n\r\n        this._radius = undefined;\r\n        this._givenRadius = undefined; // specified radius, if any\r\n        this._innerRadius = 0;\r\n        this._externalRadiusPadding = 0;\r\n\r\n\r\n        this._g = undefined;\r\n        this._cx = undefined;\r\n        this._cy = undefined;\r\n        this._minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\r\n        this._externalLabelRadius = undefined;\r\n        this._drawPaths = false;\r\n\r\n        this.colorAccessor(d => this.cappedKeyAccessor(d));\r\n\r\n        this.title(d => `${this.cappedKeyAccessor(d)}: ${this.cappedValueAccessor(d)}`);\r\n\r\n        this.label(d => this.cappedKeyAccessor(d));\r\n        this.renderLabel(true);\r\n\r\n        this.transitionDuration(350);\r\n        this.transitionDelay(0);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    /**\r\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\r\n     * value from high to low. Other slices exceeding the cap will be rolled up into one single *Others* slice.\r\n     * @param {Number} [cap]\r\n     * @returns {Number|PieChart}\r\n     */\r\n    slicesCap (cap) {\r\n        return this.cap(cap)\r\n    }\r\n\r\n    _doRender () {\r\n        this.resetSvg();\r\n\r\n        this._g = this.svg()\r\n            .append('g')\r\n            .attr('transform', `translate(${this.cx()},${this.cy()})`);\r\n\r\n        this._g.append('g').attr('class', this._sliceGroupCssClass);\r\n        this._g.append('g').attr('class', this._labelGroupCssClass);\r\n\r\n        this._drawChart();\r\n\r\n        return this;\r\n    }\r\n\r\n    _drawChart () {\r\n        // set radius from chart size if none given, or if given radius is too large\r\n        const maxRadius = min([this.width(), this.height()]) / 2;\r\n        this._radius = this._givenRadius && this._givenRadius < maxRadius ? this._givenRadius : maxRadius;\r\n\r\n        const arcs = this._buildArcs();\r\n\r\n        const pieLayout = this._pieLayout();\r\n        let pieData;\r\n        // if we have data...\r\n        if (sum(this.data(), d => this.cappedValueAccessor(d))) {\r\n            pieData = pieLayout(this.data());\r\n            this._g.classed(this._emptyCssClass, false);\r\n        } else {\r\n            // otherwise we'd be getting NaNs, so override\r\n            // note: abuse others for its ignoring the value accessor\r\n            pieData = pieLayout([{key: this._emptyTitle, value: 1, others: [this._emptyTitle]}]);\r\n            this._g.classed(this._emptyCssClass, true);\r\n        }\r\n\r\n        if (this._g) {\r\n            const slices = this._g.select(`g.${this._sliceGroupCssClass}`)\r\n                .selectAll(`g.${this._sliceCssClass}`)\r\n                .data(pieData);\r\n\r\n            const labels = this._g.select(`g.${this._labelGroupCssClass}`)\r\n                .selectAll(`text.${this._labelCssClass}`)\r\n                .data(pieData);\r\n\r\n            this._removeElements(slices, labels);\r\n\r\n            this._createElements(slices, labels, arcs, pieData);\r\n\r\n            this._updateElements(pieData, arcs);\r\n\r\n            this._highlightFilter();\r\n\r\n            transition(this._g, this.transitionDuration(), this.transitionDelay())\r\n                .attr('transform', `translate(${this.cx()},${this.cy()})`);\r\n        }\r\n    }\r\n\r\n    _createElements (slices, labels, arcs, pieData) {\r\n        const slicesEnter = this._createSliceNodes(slices);\r\n\r\n        this._createSlicePath(slicesEnter, arcs);\r\n\r\n        this._createTitles(slicesEnter);\r\n\r\n        this._createLabels(labels, pieData, arcs);\r\n    }\r\n\r\n    _createSliceNodes (slices) {\r\n        return slices\r\n            .enter()\r\n            .append('g')\r\n            .attr('class', (d, i) => `${this._sliceCssClass} _${i}`)\r\n            .classed('dc-tabbable', this._keyboardAccessible);\r\n    }\r\n\r\n    _createSlicePath (slicesEnter, arcs) {\r\n        const slicePath = slicesEnter.append('path')\r\n            .attr('fill', (d, i) => this._fill(d, i))\r\n            .on('click', d3compat.eventHandler(d => this._onClick(d)))\r\n            .attr('d', (d, i) => this._safeArc(d, i, arcs));\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible(this._onClick);\r\n        }\r\n\r\n        const tranNodes = transition(slicePath, this.transitionDuration(), this.transitionDelay());\r\n        if (tranNodes.attrTween) {\r\n            const chart = this;\r\n            tranNodes.attrTween('d', function (d) {\r\n                return chart._tweenPie(d, this);\r\n            });\r\n        }\r\n    }\r\n\r\n    _createTitles (slicesEnter) {\r\n        if (this.renderTitle()) {\r\n            slicesEnter.append('title').text(d => this.title()(d.data));\r\n        }\r\n    }\r\n\r\n    _applyLabelText (labels) {\r\n        labels\r\n            .text(d => {\r\n                const data = d.data;\r\n                if ((this._sliceHasNoData(data) || this._sliceTooSmall(d)) && !this._isSelectedSlice(d)) {\r\n                    return '';\r\n                }\r\n                return this.label()(d.data);\r\n            });\r\n    }\r\n\r\n    _positionLabels (labels, arcs) {\r\n        this._applyLabelText(labels);\r\n        transition(labels, this.transitionDuration(), this.transitionDelay())\r\n            .attr('transform', d => this._labelPosition(d, arcs))\r\n            .attr('text-anchor', 'middle');\r\n    }\r\n\r\n    _highlightSlice (i, whether) {\r\n        this.select(`g.pie-slice._${i}`)\r\n            .classed('highlight', whether);\r\n    }\r\n\r\n    _createLabels (labels, pieData, arcs) {\r\n        if (this.renderLabel()) {\r\n            const labelsEnter = labels\r\n                .enter()\r\n                .append('text')\r\n                .attr('class', (d, i) => {\r\n                    let classes = `${this._sliceCssClass} ${this._labelCssClass} _${i}`;\r\n                    if (this._externalLabelRadius) {\r\n                        classes += ' external';\r\n                    }\r\n                    return classes;\r\n                })\r\n                .on('click', d3compat.eventHandler(d => this._onClick(d)))\r\n                .on('mouseover', d3compat.eventHandler(d => {\r\n                    this._highlightSlice(d.index, true);\r\n                }))\r\n                .on('mouseout', d3compat.eventHandler(d => {\r\n                    this._highlightSlice(d.index, false);\r\n                }));\r\n            this._positionLabels(labelsEnter, arcs);\r\n            if (this._externalLabelRadius && this._drawPaths) {\r\n                this._updateLabelPaths(pieData, arcs);\r\n            }\r\n        }\r\n    }\r\n\r\n    _updateLabelPaths (pieData, arcs) {\r\n        let polyline = this._g.selectAll(`polyline.${this._sliceCssClass}`)\r\n            .data(pieData);\r\n\r\n        polyline.exit().remove();\r\n\r\n        polyline = polyline\r\n            .enter()\r\n            .append('polyline')\r\n            .attr('class', (d, i) => `pie-path _${i} ${this._sliceCssClass}`)\r\n            .on('click', d3compat.eventHandler(d => this._onClick(d)))\r\n            .on('mouseover', d3compat.eventHandler(d => {\r\n                this._highlightSlice(d.index, true);\r\n            }))\r\n            .on('mouseout', d3compat.eventHandler(d => {\r\n                this._highlightSlice(d.index, false);\r\n            }))\r\n            .merge(polyline);\r\n\r\n        const arc2 = arc()\r\n            .outerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius)\r\n            .innerRadius(this._radius - this._externalRadiusPadding);\r\n        const tranNodes = transition(polyline, this.transitionDuration(), this.transitionDelay());\r\n        // this is one rare case where d3.selection differs from d3.transition\r\n        if (tranNodes.attrTween) {\r\n            tranNodes\r\n                .attrTween('points', function (d) {\r\n                    let current = this._current || d;\r\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\r\n                    const _interpolate = interpolate(current, d);\r\n                    this._current = _interpolate(0);\r\n                    return t => {\r\n                        const d2 = _interpolate(t);\r\n                        return [arcs.centroid(d2), arc2.centroid(d2)];\r\n                    };\r\n                });\r\n        } else {\r\n            tranNodes.attr('points', d => [arcs.centroid(d), arc2.centroid(d)]);\r\n        }\r\n        tranNodes.style('visibility', d => d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible');\r\n\r\n    }\r\n\r\n    _updateElements (pieData, arcs) {\r\n        this._updateSlicePaths(pieData, arcs);\r\n        this._updateLabels(pieData, arcs);\r\n        this._updateTitles(pieData);\r\n    }\r\n\r\n    _updateSlicePaths (pieData, arcs) {\r\n        const slicePaths = this._g.selectAll(`g.${this._sliceCssClass}`)\r\n            .data(pieData)\r\n            .select('path')\r\n            .attr('d', (d, i) => this._safeArc(d, i, arcs));\r\n        const tranNodes = transition(slicePaths, this.transitionDuration(), this.transitionDelay());\r\n        if (tranNodes.attrTween) {\r\n            const chart = this;\r\n            tranNodes.attrTween('d', function (d) {\r\n                return chart._tweenPie(d, this);\r\n            });\r\n        }\r\n        tranNodes.attr('fill', (d, i) => this._fill(d, i));\r\n    }\r\n\r\n    _updateLabels (pieData, arcs) {\r\n        if (this.renderLabel()) {\r\n            const labels = this._g.selectAll(`text.${this._labelCssClass}`)\r\n                .data(pieData);\r\n            this._positionLabels(labels, arcs);\r\n            if (this._externalLabelRadius && this._drawPaths) {\r\n                this._updateLabelPaths(pieData, arcs);\r\n            }\r\n        }\r\n    }\r\n\r\n    _updateTitles (pieData) {\r\n        if (this.renderTitle()) {\r\n            this._g.selectAll(`g.${this._sliceCssClass}`)\r\n                .data(pieData)\r\n                .select('title')\r\n                .text(d => this.title()(d.data));\r\n        }\r\n    }\r\n\r\n    _removeElements (slices, labels) {\r\n        slices.exit().remove();\r\n        labels.exit().remove();\r\n    }\r\n\r\n    _highlightFilter () {\r\n        const chart = this;\r\n        if (this.hasFilter()) {\r\n            this.selectAll(`g.${this._sliceCssClass}`).each(function (d) {\r\n                if (chart._isSelectedSlice(d)) {\r\n                    chart.highlightSelected(this);\r\n                } else {\r\n                    chart.fadeDeselected(this);\r\n                }\r\n            });\r\n        } else {\r\n            this.selectAll(`g.${this._sliceCssClass}`).each(function () {\r\n                chart.resetHighlight(this);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\r\n     * pie chart to become smaller or larger depending on the value.\r\n     * @param {Number} [externalRadiusPadding=0]\r\n     * @returns {Number|PieChart}\r\n     */\r\n    externalRadiusPadding (externalRadiusPadding) {\r\n        if (!arguments.length) {\r\n            return this._externalRadiusPadding;\r\n        }\r\n        this._externalRadiusPadding = externalRadiusPadding;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\r\n     * pie chart will be rendered as a doughnut chart.\r\n     * @param {Number} [innerRadius=0]\r\n     * @returns {Number|PieChart}\r\n     */\r\n    innerRadius (innerRadius) {\r\n        if (!arguments.length) {\r\n            return this._innerRadius;\r\n        }\r\n        this._innerRadius = innerRadius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\r\n     * chart width and height.\r\n     * @param {Number} [radius]\r\n     * @returns {Number|PieChart}\r\n     */\r\n    radius (radius) {\r\n        if (!arguments.length) {\r\n            return this._givenRadius;\r\n        }\r\n        this._givenRadius = radius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set center x coordinate position. Default is center of svg.\r\n     * @param {Number} [cx]\r\n     * @returns {Number|PieChart}\r\n     */\r\n    cx (cx) {\r\n        if (!arguments.length) {\r\n            return (this._cx || this.width() / 2);\r\n        }\r\n        this._cx = cx;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set center y coordinate position. Default is center of svg.\r\n     * @param {Number} [cy]\r\n     * @returns {Number|PieChart}\r\n     */\r\n    cy (cy) {\r\n        if (!arguments.length) {\r\n            return (this._cy || this.height() / 2);\r\n        }\r\n        this._cy = cy;\r\n        return this;\r\n    }\r\n\r\n    _buildArcs () {\r\n        return arc()\r\n            .outerRadius(this._radius - this._externalRadiusPadding)\r\n            .innerRadius(this._innerRadius);\r\n    }\r\n\r\n    _isSelectedSlice (d) {\r\n        return this.hasFilter(this.cappedKeyAccessor(d.data));\r\n    }\r\n\r\n    _doRedraw () {\r\n        this._drawChart();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\r\n     * display a slice label.\r\n     * @param {Number} [minAngleForLabel=0.5]\r\n     * @returns {Number|PieChart}\r\n     */\r\n    minAngleForLabel (minAngleForLabel) {\r\n        if (!arguments.length) {\r\n            return this._minAngleForLabel;\r\n        }\r\n        this._minAngleForLabel = minAngleForLabel;\r\n        return this;\r\n    }\r\n\r\n    _pieLayout () {\r\n        return pie().sort(null).value(d => this.cappedValueAccessor(d));\r\n    }\r\n\r\n    _sliceTooSmall (d) {\r\n        const angle = (d.endAngle - d.startAngle);\r\n        return isNaN(angle) || angle < this._minAngleForLabel;\r\n    }\r\n\r\n    _sliceHasNoData (d) {\r\n        return this.cappedValueAccessor(d) === 0;\r\n    }\r\n\r\n    _isOffCanvas (current) {\r\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\r\n    }\r\n\r\n    _fill (d, i) {\r\n        return this.getColor(d.data, i);\r\n    }\r\n\r\n    _onClick (d) {\r\n        if (this._g.attr('class') !== this._emptyCssClass) {\r\n            this.onClick(d.data);\r\n        }\r\n    }\r\n\r\n    _safeArc (d, i, _arc) {\r\n        let path = _arc(d, i);\r\n        if (path.indexOf('NaN') >= 0) {\r\n            path = 'M0,0';\r\n        }\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Title to use for the only slice when there is no data.\r\n     * @param {String} [title]\r\n     * @returns {String|PieChart}\r\n     */\r\n    emptyTitle (title) {\r\n        if (arguments.length === 0) {\r\n            return this._emptyTitle;\r\n        }\r\n        this._emptyTitle = title;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Position slice labels offset from the outer edge of the chart.\r\n     *\r\n     * The argument specifies the extra radius to be added for slice labels.\r\n     * @param {Number} [externalLabelRadius]\r\n     * @returns {Number|PieChart}\r\n     */\r\n    externalLabels (externalLabelRadius) {\r\n        if (arguments.length === 0) {\r\n            return this._externalLabelRadius;\r\n        } else if (externalLabelRadius) {\r\n            this._externalLabelRadius = externalLabelRadius;\r\n        } else {\r\n            this._externalLabelRadius = undefined;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set whether to draw lines from pie slices to their labels.\r\n     *\r\n     * @param {Boolean} [drawPaths]\r\n     * @returns {Boolean|PieChart}\r\n     */\r\n    drawPaths (drawPaths) {\r\n        if (arguments.length === 0) {\r\n            return this._drawPaths;\r\n        }\r\n        this._drawPaths = drawPaths;\r\n        return this;\r\n    }\r\n\r\n    _labelPosition (d, _arc) {\r\n        let centroid;\r\n        if (this._externalLabelRadius) {\r\n            centroid = arc()\r\n                .outerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius)\r\n                .innerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius)\r\n                .centroid(d);\r\n        } else {\r\n            centroid = _arc.centroid(d);\r\n        }\r\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\r\n            return 'translate(0,0)';\r\n        } else {\r\n            return `translate(${centroid})`;\r\n        }\r\n    }\r\n\r\n    legendables () {\r\n        return this.data().map((d, i) => {\r\n            const legendable = {name: d.key, data: d.value, others: d.others, chart: this};\r\n            legendable.color = this.getColor(d, i);\r\n            return legendable;\r\n        });\r\n    }\r\n\r\n    legendHighlight (d) {\r\n        this._highlightSliceFromLegendable(d, true);\r\n    }\r\n\r\n    legendReset (d) {\r\n        this._highlightSliceFromLegendable(d, false);\r\n    }\r\n\r\n    legendToggle (d) {\r\n        this.onClick({key: d.name, others: d.others});\r\n    }\r\n\r\n    _highlightSliceFromLegendable (legendable, highlighted) {\r\n        this.selectAll('g.pie-slice').each(function (d) {\r\n            if (legendable.name === d.data.key) {\r\n                select(this).classed('highlight', highlighted);\r\n            }\r\n        });\r\n    }\r\n\r\n    _tweenPie (b, element) {\r\n        b.innerRadius = this._innerRadius;\r\n        let current = element._current;\r\n        if (this._isOffCanvas(current)) {\r\n            current = {startAngle: 0, endAngle: 0};\r\n        } else {\r\n            // only interpolate startAngle & endAngle, not the whole data object\r\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\r\n        }\r\n        const i = interpolate(current, b);\r\n        element._current = i(0);\r\n        return t => this._safeArc(i(t), 0, this._buildArcs());\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const pieChart = (parent, chartGroup) => new PieChart(parent, chartGroup);\r\n","import {extent} from 'd3-array';\r\nimport {axisBottom} from 'd3-axis';\r\nimport {scaleLinear} from 'd3-scale';\r\n\r\nimport {CapMixin} from '../base/cap-mixin';\r\nimport {MarginMixin} from '../base/margin-mixin';\r\nimport {ColorMixin} from '../base/color-mixin';\r\nimport {transition} from '../core/core';\r\nimport {d3compat} from '../core/config';\r\n\r\n/**\r\n * Concrete row chart implementation.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * @mixes CapMixin\r\n * @mixes MarginMixin\r\n * @mixes ColorMixin\r\n * @mixes BaseMixin\r\n */\r\nexport class RowChart extends CapMixin(ColorMixin(MarginMixin)) {\r\n    /**\r\n     * Create a Row Chart.\r\n     * @example\r\n     * // create a row chart under #chart-container1 element using the default global chart group\r\n     * var chart1 = new RowChart('#chart-container1');\r\n     * // create a row chart under #chart-container2 element using chart group A\r\n     * var chart2 = new RowChart('#chart-container2', 'chartGroupA');\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._g = undefined;\r\n\r\n        this._labelOffsetX = 10;\r\n        this._labelOffsetY = 15;\r\n        this._hasLabelOffsetY = false;\r\n        this._dyOffset = '0.35em'; // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\r\n        this._titleLabelOffsetX = 2;\r\n\r\n        this._gap = 5;\r\n\r\n        this._fixedBarHeight = false;\r\n        this._rowCssClass = 'row';\r\n        this._titleRowCssClass = 'titlerow';\r\n        this._renderTitleLabel = false;\r\n\r\n        this._x = undefined;\r\n\r\n        this._elasticX = undefined;\r\n\r\n        this._xAxis = axisBottom();\r\n\r\n        this._rowData = undefined;\r\n\r\n        this.rowsCap = this.cap;\r\n\r\n        this.title(d => `${this.cappedKeyAccessor(d)}: ${this.cappedValueAccessor(d)}`);\r\n\r\n        this.label(d => this.cappedKeyAccessor(d));\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _calculateAxisScale () {\r\n        if (!this._x || this._elasticX) {\r\n            const _extent = extent(this._rowData, d => this.cappedValueAccessor(d));\r\n            if (_extent[0] > 0) {\r\n                _extent[0] = 0;\r\n            }\r\n            if (_extent[1] < 0) {\r\n                _extent[1] = 0;\r\n            }\r\n            this._x = scaleLinear().domain(_extent)\r\n                .range([0, this.effectiveWidth()]);\r\n        }\r\n        this._xAxis.scale(this._x);\r\n    }\r\n\r\n    _drawAxis () {\r\n        let axisG = this._g.select('g.axis');\r\n\r\n        this._calculateAxisScale();\r\n\r\n        if (axisG.empty()) {\r\n            axisG = this._g.append('g').attr('class', 'axis');\r\n        }\r\n        axisG.attr('transform', `translate(0, ${this.effectiveHeight()})`);\r\n\r\n        transition(axisG, this.transitionDuration(), this.transitionDelay())\r\n            .call(this._xAxis);\r\n    }\r\n\r\n    _doRender () {\r\n        this.resetSvg();\r\n\r\n        this._g = this.svg()\r\n            .append('g')\r\n            .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\r\n\r\n        this._drawChart();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the x scale. The x scale can be any d3\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}.\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @param {d3.scale} [scale]\r\n     * @returns {d3.scale|RowChart}\r\n     */\r\n    x (scale) {\r\n        if (!arguments.length) {\r\n            return this._x;\r\n        }\r\n        this._x = scale;\r\n        return this;\r\n    }\r\n\r\n    _drawGridLines () {\r\n        this._g.selectAll('g.tick')\r\n            .select('line.grid-line')\r\n            .remove();\r\n\r\n        this._g.selectAll('g.tick')\r\n            .append('line')\r\n            .attr('class', 'grid-line')\r\n            .attr('x1', 0)\r\n            .attr('y1', 0)\r\n            .attr('x2', 0)\r\n            .attr('y2', () => -this.effectiveHeight());\r\n    }\r\n\r\n    _drawChart () {\r\n        this._rowData = this.data();\r\n\r\n        this._drawAxis();\r\n        this._drawGridLines();\r\n\r\n        let rows = this._g.selectAll(`g.${this._rowCssClass}`)\r\n            .data(this._rowData);\r\n\r\n        this._removeElements(rows);\r\n        rows = this._createElements(rows)\r\n            .merge(rows);\r\n        this._updateElements(rows);\r\n    }\r\n\r\n    _createElements (rows) {\r\n        const rowEnter = rows.enter()\r\n            .append('g')\r\n            .attr('class', (d, i) => `${this._rowCssClass} _${i}`);\r\n\r\n        rowEnter.append('rect').attr('width', 0);\r\n\r\n        this._createLabels(rowEnter);\r\n\r\n        return rowEnter;\r\n    }\r\n\r\n    _removeElements (rows) {\r\n        rows.exit().remove();\r\n    }\r\n\r\n    _rootValue () {\r\n        const root = this._x(0);\r\n        return (root === -Infinity || root !== root) ? this._x(1) : root;\r\n    }\r\n\r\n    _updateElements (rows) {\r\n        const n = this._rowData.length;\r\n\r\n        let height;\r\n        if (!this._fixedBarHeight) {\r\n            height = (this.effectiveHeight() - (n + 1) * this._gap) / n;\r\n        } else {\r\n            height = this._fixedBarHeight;\r\n        }\r\n\r\n        // vertically align label in center unless they override the value via property setter\r\n        if (!this._hasLabelOffsetY) {\r\n            this._labelOffsetY = height / 2;\r\n        }\r\n\r\n        const rect = rows.attr('transform', (d, i) => `translate(0,${(i + 1) * this._gap + i * height})`).select('rect')\r\n            .attr('height', height)\r\n            .attr('fill', this.getColor)\r\n            .on('click', d3compat.eventHandler(d => this._onClick(d)))\r\n            .classed('dc-tabbable', this._keyboardAccessible)\r\n            .classed('deselected', d => (this.hasFilter()) ? !this._isSelectedRow(d) : false)\r\n            .classed('selected', d => (this.hasFilter()) ? this._isSelectedRow(d) : false);\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible(d => this._onClick(d));\r\n        }\r\n\r\n        transition(rect, this.transitionDuration(), this.transitionDelay())\r\n            .attr('width', d => Math.abs(this._rootValue() - this._x(this.cappedValueAccessor(d))))\r\n            .attr('transform', d => this._translateX(d));\r\n\r\n        this._createTitles(rows);\r\n        this._updateLabels(rows);\r\n    }\r\n\r\n    _createTitles (rows) {\r\n        if (this.renderTitle()) {\r\n            rows.select('title').remove();\r\n            rows.append('title').text(this.title());\r\n        }\r\n    }\r\n\r\n    _createLabels (rowEnter) {\r\n        if (this.renderLabel()) {\r\n            rowEnter.append('text')\r\n                .on('click', d3compat.eventHandler(d => this._onClick(d)));\r\n        }\r\n        if (this.renderTitleLabel()) {\r\n            rowEnter.append('text')\r\n                .attr('class', this._titleRowCssClass)\r\n                .on('click', d3compat.eventHandler(d => this._onClick(d)));\r\n        }\r\n    }\r\n\r\n    _updateLabels (rows) {\r\n        if (this.renderLabel()) {\r\n            const lab = rows.select('text')\r\n                .attr('x', this._labelOffsetX)\r\n                .attr('y', this._labelOffsetY)\r\n                .attr('dy', this._dyOffset)\r\n                .on('click', d3compat.eventHandler(d => this._onClick(d)))\r\n                .attr('class', (d, i) => `${this._rowCssClass} _${i}`)\r\n                .text(d => this.label()(d));\r\n            transition(lab, this.transitionDuration(), this.transitionDelay())\r\n                .attr('transform', d => this._translateX(d));\r\n        }\r\n        if (this.renderTitleLabel()) {\r\n            const titlelab = rows.select(`.${this._titleRowCssClass}`)\r\n                .attr('x', this.effectiveWidth() - this._titleLabelOffsetX)\r\n                .attr('y', this._labelOffsetY)\r\n                .attr('dy', this._dyOffset)\r\n                .attr('text-anchor', 'end')\r\n                .on('click', d3compat.eventHandler(d => this._onClick(d)))\r\n                .attr('class', (d, i) => `${this._titleRowCssClass} _${i}`)\r\n                .text(d => this.title()(d));\r\n            transition(titlelab, this.transitionDuration(), this.transitionDelay())\r\n                .attr('transform', d => this._translateX(d));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\r\n     * @param {Boolean} [renderTitleLabel=false]\r\n     * @returns {Boolean|RowChart}\r\n     */\r\n    renderTitleLabel (renderTitleLabel) {\r\n        if (!arguments.length) {\r\n            return this._renderTitleLabel;\r\n        }\r\n        this._renderTitleLabel = renderTitleLabel;\r\n        return this;\r\n    }\r\n\r\n    _onClick (d) {\r\n        this.onClick(d);\r\n    }\r\n\r\n    _translateX (d) {\r\n        const x = this._x(this.cappedValueAccessor(d)),\r\n            x0 = this._rootValue(),\r\n            s = x > x0 ? x0 : x;\r\n        return `translate(${s},0)`;\r\n    }\r\n\r\n    _doRedraw () {\r\n        this._drawChart();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or sets the x axis for the row chart instance.\r\n     * See the {@link https://github.com/d3/d3-axis/blob/master/README.md d3.axis}\r\n     * documention for more information.\r\n     * @param {d3.axis} [xAxis]\r\n     * @example\r\n     * // customize x axis tick format\r\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\r\n     * // customize x axis tick values\r\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\r\n     * // use a top-oriented axis. Note: position of the axis and grid lines will need to\r\n     * // be set manually, see https://dc-js.github.io/dc.js/examples/row-top-axis.html\r\n     * chart.xAxis(d3.axisTop())\r\n     * @returns {d3.axis|RowChart}\r\n     */\r\n    xAxis (xAxis) {\r\n        if (!arguments.length) {\r\n            return this._xAxis;\r\n        }\r\n        this._xAxis = xAxis;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\r\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\r\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\r\n     * your vertical gap space).\r\n     * @example\r\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\r\n     * @param {Boolean|Number} [fixedBarHeight=false]\r\n     * @returns {Boolean|Number|RowChart}\r\n     */\r\n    fixedBarHeight (fixedBarHeight) {\r\n        if (!arguments.length) {\r\n            return this._fixedBarHeight;\r\n        }\r\n        this._fixedBarHeight = fixedBarHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the vertical gap space between rows on a particular row chart instance.\r\n     * @param {Number} [gap=5]\r\n     * @returns {Number|RowChart}\r\n     */\r\n    gap (gap) {\r\n        if (!arguments.length) {\r\n            return this._gap;\r\n        }\r\n        this._gap = gap;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescale to auto-fit the\r\n     * data range when filtered.\r\n     * @param {Boolean} [elasticX]\r\n     * @returns {Boolean|RowChart}\r\n     */\r\n    elasticX (elasticX) {\r\n        if (!arguments.length) {\r\n            return this._elasticX;\r\n        }\r\n        this._elasticX = elasticX;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\r\n     * @param {Number} [labelOffsetX=10]\r\n     * @returns {Number|RowChart}\r\n     */\r\n    labelOffsetX (labelOffsetX) {\r\n        if (!arguments.length) {\r\n            return this._labelOffsetX;\r\n        }\r\n        this._labelOffsetX = labelOffsetX;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\r\n     * @param {Number} [labelOffsety=15]\r\n     * @returns {Number|RowChart}\r\n     */\r\n    labelOffsetY (labelOffsety) {\r\n        if (!arguments.length) {\r\n            return this._labelOffsetY;\r\n        }\r\n        this._labelOffsetY = labelOffsety;\r\n        this._hasLabelOffsetY = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\r\n     * @param {Number} [titleLabelOffsetX=2]\r\n     * @returns {Number|RowChart}\r\n     */\r\n    titleLabelOffsetX (titleLabelOffsetX) {\r\n        if (!arguments.length) {\r\n            return this._titleLabelOffsetX;\r\n        }\r\n        this._titleLabelOffsetX = titleLabelOffsetX;\r\n        return this;\r\n    }\r\n\r\n    _isSelectedRow (d) {\r\n        return this.hasFilter(this.cappedKeyAccessor(d));\r\n    }\r\n}\r\n\r\nexport const rowChart = (parent, chartGroup) => new RowChart(parent, chartGroup);\r\n","import {symbol} from 'd3-shape';\r\nimport {select} from 'd3-selection';\r\nimport {brush} from 'd3-brush';\r\nimport {ascending} from 'd3-array'\r\n\r\nimport {CoordinateGridMixin} from '../base/coordinate-grid-mixin';\r\nimport {optionalTransition, transition} from '../core/core';\r\nimport {filters} from '../core/filters';\r\nimport {constants} from '../core/constants';\r\nimport {events} from '../core/events';\r\n\r\n/**\r\n * A scatter plot chart\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\r\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\r\n * @mixes CoordinateGridMixin\r\n */\r\nexport class ScatterPlot extends CoordinateGridMixin {\r\n    /**\r\n     * Create a Scatter Plot.\r\n     * @example\r\n     * // create a scatter plot under #chart-container1 element using the default global chart group\r\n     * var chart1 = new ScatterPlot('#chart-container1');\r\n     * // create a scatter plot under #chart-container2 element using chart group A\r\n     * var chart2 = new ScatterPlot('#chart-container2', 'chartGroupA');\r\n     * // create a sub-chart under a composite parent chart\r\n     * var chart3 = new ScatterPlot(compositeChart);\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._symbol = symbol();\r\n\r\n        this._existenceAccessor = d => d.value;\r\n\r\n        const originalKeyAccessor = this.keyAccessor();\r\n        this.keyAccessor(d => originalKeyAccessor(d)[0]);\r\n        this.valueAccessor(d => originalKeyAccessor(d)[1]);\r\n        this.colorAccessor(() => this._groupName);\r\n\r\n        // this basically just counteracts the setting of its own key/value accessors\r\n        // see https://github.com/dc-js/dc.js/issues/702\r\n        this.title(d => `${this.keyAccessor()(d)},${this.valueAccessor()(d)}: ${this.existenceAccessor()(d)}`);\r\n\r\n        this._highlightedSize = 7;\r\n        this._symbolSize = 5;\r\n        this._excludedSize = 3;\r\n        this._excludedColor = null;\r\n        this._excludedOpacity = 1.0;\r\n        this._emptySize = 0;\r\n        this._emptyOpacity = 0;\r\n        this._nonemptyOpacity = 1;\r\n        this._emptyColor = null;\r\n        this._filtered = [];\r\n        this._canvas = null;\r\n        this._context = null;\r\n        this._useCanvas = false;\r\n\r\n\r\n        // Use a 2 dimensional brush\r\n        this.brush(brush());\r\n\r\n        this._symbol.size((d, i) => this._elementSize(d, i));\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    // Calculates element radius for canvas plot to be comparable to D3 area based symbol sizes\r\n    _canvasElementSize (d, isFiltered) {\r\n        if (!this._existenceAccessor(d)) {\r\n            return this._emptySize / Math.sqrt(Math.PI);\r\n        } else if (isFiltered) {\r\n            return this._symbolSize / Math.sqrt(Math.PI);\r\n        } else {\r\n            return this._excludedSize / Math.sqrt(Math.PI);\r\n        }\r\n    }\r\n\r\n    _elementSize (d, i) {\r\n        if (!this._existenceAccessor(d)) {\r\n            return Math.pow(this._emptySize, 2);\r\n        } else if (this._filtered[i]) {\r\n            return Math.pow(this._symbolSize, 2);\r\n        } else {\r\n            return Math.pow(this._excludedSize, 2);\r\n        }\r\n    }\r\n\r\n    _locator (d) {\r\n        return `translate(${this.x()(this.keyAccessor()(d))},${ \r\n            this.y()(this.valueAccessor()(d))})`;\r\n    }\r\n\r\n    filter (filter) {\r\n        if (!arguments.length) {\r\n            return super.filter();\r\n        }\r\n\r\n        return super.filter(filters.RangedTwoDimensionalFilter(filter));\r\n    }\r\n\r\n    /**\r\n     * Method that replaces original resetSvg and appropriately inserts canvas\r\n     * element along with svg element and sets their CSS properties appropriately\r\n     * so they are overlapped on top of each other.\r\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\r\n     * @returns {SVGElement}\r\n     */\r\n    resetSvg () {\r\n        if (!this._useCanvas) {\r\n            return super.resetSvg();\r\n        } else {\r\n            super.resetSvg(); // Perform original svgReset inherited from baseMixin\r\n            this.select('canvas').remove(); // remove old canvas\r\n\r\n            const svgSel = this.svg();\r\n            const rootSel = this.root();\r\n\r\n            // Set root node to relative positioning and svg to absolute\r\n            rootSel.style('position', 'relative');\r\n            svgSel.style('position', 'relative');\r\n\r\n            // Check if SVG element already has any extra top/left CSS offsets\r\n            const svgLeft = isNaN(parseInt(svgSel.style('left'), 10)) ? 0 : parseInt(svgSel.style('left'), 10);\r\n            const svgTop = isNaN(parseInt(svgSel.style('top'), 10)) ? 0 : parseInt(svgSel.style('top'), 10);\r\n            const width = this.effectiveWidth();\r\n            const height = this.effectiveHeight();\r\n            const margins = this.margins(); // {top: 10, right: 130, bottom: 42, left: 42}\r\n\r\n            // Add the canvas element such that it perfectly overlaps the plot area of the scatter plot SVG\r\n            const devicePixelRatio = window.devicePixelRatio || 1;\r\n            this._canvas = this.root().append('canvas')\r\n                .attr('x', 0)\r\n                .attr('y', 0)\r\n                .attr('width', (width) * devicePixelRatio)\r\n                .attr('height', (height) * devicePixelRatio)\r\n                .style('width', `${width}px`)\r\n                .style('height', `${height}px`)\r\n                .style('position', 'absolute')\r\n                .style('top', `${margins.top + svgTop}px`)\r\n                .style('left', `${margins.left + svgLeft}px`)\r\n                .style('z-index', -1) // Place behind SVG\r\n                .style('pointer-events', 'none'); // Disable pointer events on canvas so SVG can capture brushing\r\n\r\n            // Define canvas context and set clipping path\r\n            this._context = this._canvas.node().getContext('2d');\r\n            this._context.scale(devicePixelRatio, devicePixelRatio);\r\n            this._context.rect(0, 0, width, height);\r\n            this._context.clip(); // Setup clipping path\r\n            this._context.imageSmoothingQuality = 'high';\r\n\r\n            return this.svg(); // Respect original return param for this.resetSvg;\r\n        }\r\n    }\r\n\r\n    _resizeCanvas () {\r\n        const width = this.effectiveWidth();\r\n        const height = this.effectiveHeight();\r\n\r\n        const devicePixelRatio = window.devicePixelRatio || 1;\r\n        this._canvas\r\n            .attr('width', (width) * devicePixelRatio)\r\n            .attr('height', (height) * devicePixelRatio)\r\n            .style('width', `${width}px`)\r\n            .style('height', `${height}px`);\r\n        this._context.scale(devicePixelRatio, devicePixelRatio);\r\n    }\r\n\r\n\r\n    /**\r\n     * Set or get whether to use canvas backend for plotting scatterPlot. Note that the\r\n     * canvas backend does not currently support\r\n     * {@link ScatterPlot#customSymbol customSymbol} or\r\n     * {@link ScatterPlot#symbol symbol} methods and is limited to always plotting\r\n     * with filled circles. Symbols are drawn with\r\n     * {@link ScatterPlot#symbolSize symbolSize} radius. By default, the SVG backend\r\n     * is used when `useCanvas` is set to `false`.\r\n     * @param {Boolean} [useCanvas=false]\r\n     * @return {Boolean|d3.selection}\r\n     */\r\n    useCanvas (useCanvas) {\r\n        if (!arguments.length) {\r\n            return this._useCanvas;\r\n        }\r\n        this._useCanvas = useCanvas;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get canvas element. You should usually only ever use the get method as\r\n     * dc.js will handle canvas element generation.  Provides valid canvas only when\r\n     * {@link ScatterPlot#useCanvas useCanvas} is set to `true`\r\n     * @param {CanvasElement|d3.selection} [canvasElement]\r\n     * @return {CanvasElement|d3.selection}\r\n     */\r\n    canvas (canvasElement) {\r\n        if (!arguments.length) {\r\n            return this._canvas;\r\n        }\r\n        this._canvas = canvasElement;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get canvas 2D context. Provides valid context only when\r\n     * {@link ScatterPlot#useCanvas useCanvas} is set to `true`\r\n     * @return {CanvasContext}\r\n     */\r\n    context () {\r\n        return this._context;\r\n    }\r\n\r\n    /*eslint complexity: [2,11] */\r\n    // Plots data on canvas element. If argument provided, assumes legend is\r\n    // currently being highlighted and modifies opacity/size of symbols accordingly\r\n    // @param {Object} [legendHighlightDatum] - Datum provided to legendHighlight method\r\n    _plotOnCanvas (legendHighlightDatum) {\r\n        this._resizeCanvas();\r\n        const context = this.context();\r\n        context.clearRect(0, 0, (context.canvas.width + 2) * 1, (context.canvas.height + 2) * 1);\r\n        const data = this.data();\r\n\r\n        // Draw the data on canvas\r\n        data.forEach((d, i) => {\r\n            const isFiltered = !this.filter() || this.filter().isFiltered([d.key[0], d.key[1]]);\r\n            // Calculate opacity for current data point\r\n            let cOpacity = 1;\r\n            if (!this._existenceAccessor(d)) {\r\n                cOpacity = this._emptyOpacity;\r\n            } else if (isFiltered) {\r\n                cOpacity = this._nonemptyOpacity;\r\n            } else {\r\n                cOpacity = this.excludedOpacity();\r\n            }\r\n            // Calculate color for current data point\r\n            let cColor = null;\r\n            if (this._emptyColor && !this._existenceAccessor(d)) {\r\n                cColor = this._emptyColor;\r\n            } else if (this.excludedColor() && !isFiltered) {\r\n                cColor = this.excludedColor();\r\n            } else {\r\n                cColor = this.getColor(d);\r\n            }\r\n            let cSize = this._canvasElementSize(d, isFiltered);\r\n\r\n            // Adjust params for data points if legend is highlighted\r\n            if (legendHighlightDatum) {\r\n                const isHighlighted = (cColor === legendHighlightDatum.color);\r\n                // Calculate opacity for current data point\r\n                const fadeOutOpacity = 0.1; // TODO: Make this programmatically setable\r\n                if (!isHighlighted) { // Fade out non-highlighted colors + highlighted colors outside filter\r\n                    cOpacity = fadeOutOpacity;\r\n                }\r\n                if (isHighlighted) { // Set size for highlighted color data points\r\n                    cSize = this._highlightedSize / Math.sqrt(Math.PI);\r\n                }\r\n            }\r\n\r\n            // Draw point on canvas\r\n            context.save();\r\n            context.globalAlpha = cOpacity;\r\n            context.beginPath();\r\n            context.arc(this.x()(this.keyAccessor()(d)), this.y()(this.valueAccessor()(d)), cSize, 0, 2 * Math.PI, true);\r\n            context.fillStyle = cColor;\r\n            context.fill();\r\n            // context.lineWidth = 0.5; // Commented out code to add stroke around scatter points if desired\r\n            // context.strokeStyle = '#333';\r\n            // context.stroke();\r\n            context.restore();\r\n        });\r\n    }\r\n\r\n    _plotOnSVG () {\r\n\r\n        const data = this.data();\r\n\r\n        if (this._keyboardAccessible) {\r\n            // sort based on the x value (key)\r\n            data.sort((a, b) => ascending(this.keyAccessor()(a), this.keyAccessor()(b)));\r\n        }\r\n\r\n        let symbols = this.chartBodyG().selectAll('path.symbol')\r\n            .data(data);\r\n\r\n        transition(symbols.exit(), this.transitionDuration(), this.transitionDelay())\r\n            .attr('opacity', 0).remove();\r\n\r\n        symbols = symbols\r\n            .enter()\r\n            .append('path')\r\n            .attr('class', 'symbol')\r\n            .classed('dc-tabbable', this._keyboardAccessible)\r\n            .attr('opacity', 0)\r\n            .attr('fill', this.getColor)\r\n            .attr('transform', d => this._locator(d))\r\n            .merge(symbols);\r\n\r\n        // no click handler - just tabindex for reading out of tooltips\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible();\r\n            symbols.order();\r\n        }\r\n\r\n        symbols.call(s => this._renderTitles(s, data));\r\n\r\n        symbols.each((d, i) => {\r\n            this._filtered[i] = !this.filter() || this.filter().isFiltered([this.keyAccessor()(d), this.valueAccessor()(d)]);\r\n        });\r\n\r\n        transition(symbols, this.transitionDuration(), this.transitionDelay())\r\n            .attr('opacity', (d, i) => {\r\n                if (!this._existenceAccessor(d)) {\r\n                    return this._emptyOpacity;\r\n                } else if (this._filtered[i]) {\r\n                    return this._nonemptyOpacity;\r\n                } else {\r\n                    return this.excludedOpacity();\r\n                }\r\n            })\r\n            .attr('fill', (d, i) => {\r\n                if (this._emptyColor && !this._existenceAccessor(d)) {\r\n                    return this._emptyColor;\r\n                } else if (this.excludedColor() && !this._filtered[i]) {\r\n                    return this.excludedColor();\r\n                } else {\r\n                    return this.getColor(d);\r\n                }\r\n            })\r\n            .attr('transform', d => this._locator(d))\r\n            .attr('d', this._symbol);\r\n    }\r\n\r\n    plotData () {\r\n        if (this._useCanvas) {\r\n            this._plotOnCanvas();\r\n        } else {\r\n            this._plotOnSVG();\r\n        }\r\n    }\r\n\r\n    _renderTitles (_symbol, _d) {\r\n        if (this.renderTitle()) {\r\n            _symbol.selectAll('title').remove();\r\n            _symbol.append('title').text(d => this.title()(d));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get or set the existence accessor.  If a point exists, it is drawn with\r\n     * {@link ScatterPlot#symbolSize symbolSize} radius and\r\n     * opacity 1; if it does not exist, it is drawn with\r\n     * {@link ScatterPlot#emptySize emptySize} radius and opacity 0. By default,\r\n     * the existence accessor checks if the reduced value is truthy.\r\n     * @see {@link ScatterPlot#symbolSize symbolSize}\r\n     * @see {@link ScatterPlot#emptySize emptySize}\r\n     * @example\r\n     * // default accessor\r\n     * chart.existenceAccessor(function (d) { return d.value; });\r\n     * @param {Function} [accessor]\r\n     * @returns {Function|ScatterPlot}\r\n     */\r\n    existenceAccessor (accessor) {\r\n        if (!arguments.length) {\r\n            return this._existenceAccessor;\r\n        }\r\n        this._existenceAccessor = accessor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the symbol type used for each point. By default the symbol is a circle (d3.symbolCircle).\r\n     * Type can be a constant or an accessor.\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_type symbol.type}\r\n     * @example\r\n     * // Circle type\r\n     * chart.symbol(d3.symbolCircle);\r\n     * // Square type\r\n     * chart.symbol(d3.symbolSquare);\r\n     * @param {Function} [type=d3.symbolCircle]\r\n     * @returns {Function|ScatterPlot}\r\n     */\r\n    symbol (type) {\r\n        if (!arguments.length) {\r\n            return this._symbol.type();\r\n        }\r\n        this._symbol.type(type);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the symbol generator. By default `ScatterPlot` will use\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol d3.symbol()}\r\n     * to generate symbols. `ScatterPlot` will set the\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size symbol size accessor}\r\n     * on the symbol generator.\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol d3.symbol}\r\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\r\n     * @param {String|Function} [customSymbol=d3.symbol()]\r\n     * @returns {String|Function|ScatterPlot}\r\n     */\r\n    customSymbol (customSymbol) {\r\n        if (!arguments.length) {\r\n            return this._symbol;\r\n        }\r\n        this._symbol = customSymbol;\r\n        this._symbol.size((d, i) => this._elementSize(d, i));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get radius for symbols.\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\r\n     * @param {Number} [symbolSize=3]\r\n     * @returns {Number|ScatterPlot}\r\n     */\r\n    symbolSize (symbolSize) {\r\n        if (!arguments.length) {\r\n            return this._symbolSize;\r\n        }\r\n        this._symbolSize = symbolSize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get radius for highlighted symbols.\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\r\n     * @param {Number} [highlightedSize=5]\r\n     * @returns {Number|ScatterPlot}\r\n     */\r\n    highlightedSize (highlightedSize) {\r\n        if (!arguments.length) {\r\n            return this._highlightedSize;\r\n        }\r\n        this._highlightedSize = highlightedSize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get size for symbols excluded from this chart's filter. If null, no\r\n     * special size is applied for symbols based on their filter status.\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\r\n     * @param {Number} [excludedSize=null]\r\n     * @returns {Number|ScatterPlot}\r\n     */\r\n    excludedSize (excludedSize) {\r\n        if (!arguments.length) {\r\n            return this._excludedSize;\r\n        }\r\n        this._excludedSize = excludedSize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get color for symbols excluded from this chart's filter. If null, no\r\n     * special color is applied for symbols based on their filter status.\r\n     * @param {Number} [excludedColor=null]\r\n     * @returns {Number|ScatterPlot}\r\n     */\r\n    excludedColor (excludedColor) {\r\n        if (!arguments.length) {\r\n            return this._excludedColor;\r\n        }\r\n        this._excludedColor = excludedColor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get opacity for symbols excluded from this chart's filter.\r\n     * @param {Number} [excludedOpacity=1.0]\r\n     * @returns {Number|ScatterPlot}\r\n     */\r\n    excludedOpacity (excludedOpacity) {\r\n        if (!arguments.length) {\r\n            return this._excludedOpacity;\r\n        }\r\n        this._excludedOpacity = excludedOpacity;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get radius for symbols when the group is empty.\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\r\n     * @param {Number} [emptySize=0]\r\n     * @returns {Number|ScatterPlot}\r\n     */\r\n    emptySize (emptySize) {\r\n        if (!arguments.length) {\r\n            return this._emptySize;\r\n        }\r\n        this._emptySize = emptySize;\r\n        return this;\r\n    }\r\n\r\n    hiddenSize (emptySize) {\r\n        if (!arguments.length) {\r\n            return this.emptySize();\r\n        }\r\n        return this.emptySize(emptySize);\r\n    }\r\n\r\n    /**\r\n     * Set or get color for symbols when the group is empty. If null, just use the\r\n     * {@link ColorMixin#colors colorMixin.colors} color scale zero value.\r\n     * @param {String} [emptyColor=null]\r\n     * @return {String}\r\n     * @return {ScatterPlot}/\r\n     */\r\n    emptyColor (emptyColor) {\r\n        if (!arguments.length) {\r\n            return this._emptyColor;\r\n        }\r\n        this._emptyColor = emptyColor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get opacity for symbols when the group is empty.\r\n     * @param {Number} [emptyOpacity=0]\r\n     * @return {Number}\r\n     * @return {ScatterPlot}\r\n     */\r\n    emptyOpacity (emptyOpacity) {\r\n        if (!arguments.length) {\r\n            return this._emptyOpacity;\r\n        }\r\n        this._emptyOpacity = emptyOpacity;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set or get opacity for symbols when the group is not empty.\r\n     * @param {Number} [nonemptyOpacity=1]\r\n     * @return {Number}\r\n     * @return {ScatterPlot}\r\n     */\r\n    nonemptyOpacity (nonemptyOpacity) {\r\n        if (!arguments.length) {\r\n            return this._emptyOpacity;\r\n        }\r\n        this._nonemptyOpacity = nonemptyOpacity;\r\n        return this;\r\n    }\r\n\r\n    legendables () {\r\n        return [{chart: this, name: this._groupName, color: this.getColor()}];\r\n    }\r\n\r\n    legendHighlight (d) {\r\n        if (this._useCanvas) {\r\n            this._plotOnCanvas(d); // Supply legend datum to plotOnCanvas\r\n        } else {\r\n            this._resizeSymbolsWhere(s => s.attr('fill') === d.color, this._highlightedSize);\r\n            this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\r\n                return select(this).attr('fill') !== d.color;\r\n            }).classed('fadeout', true);\r\n        }\r\n    }\r\n\r\n    legendReset (d) {\r\n        if (this._useCanvas) {\r\n            this._plotOnCanvas(d); // Supply legend datum to plotOnCanvas\r\n        } else {\r\n            this._resizeSymbolsWhere(s => s.attr('fill') === d.color, this._symbolSize);\r\n            this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\r\n                return select(this).attr('fill') !== d.color;\r\n            }).classed('fadeout', false);\r\n        }\r\n    }\r\n\r\n    _resizeSymbolsWhere (condition, size) {\r\n        const symbols = this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\r\n            return condition(select(this));\r\n        });\r\n        const oldSize = this._symbol.size();\r\n        this._symbol.size(Math.pow(size, 2));\r\n        transition(symbols, this.transitionDuration(), this.transitionDelay()).attr('d', this._symbol);\r\n        this._symbol.size(oldSize);\r\n    }\r\n    createBrushHandlePaths () {\r\n        // no handle paths for poly-brushes\r\n    }\r\n\r\n    extendBrush (brushSelection) {\r\n        if (this.round()) {\r\n            brushSelection[0] = brushSelection[0].map(this.round());\r\n            brushSelection[1] = brushSelection[1].map(this.round());\r\n        }\r\n        return brushSelection;\r\n    }\r\n\r\n    brushIsEmpty (brushSelection) {\r\n        return !brushSelection || brushSelection[0][0] >= brushSelection[1][0] || brushSelection[0][1] >= brushSelection[1][1];\r\n    }\r\n\r\n    _brushing (evt) {\r\n        if (this._ignoreBrushEvents) {\r\n            return;\r\n        }\r\n\r\n        let brushSelection = evt.selection;\r\n\r\n        // Testing with pixels is more reliable\r\n        let brushIsEmpty = this.brushIsEmpty(brushSelection);\r\n\r\n        if (brushSelection) {\r\n            brushSelection = brushSelection.map(point => point.map((coord, i) => {\r\n                const scale = i === 0 ? this.x() : this.y();\r\n                return scale.invert(coord);\r\n            }));\r\n\r\n            brushSelection = this.extendBrush(brushSelection);\r\n\r\n            // The rounding process might have made brushSelection empty, so we need to recheck\r\n            brushIsEmpty = brushIsEmpty && this.brushIsEmpty(brushSelection);\r\n        }\r\n\r\n        this.redrawBrush(brushSelection, false);\r\n\r\n        const ranged2DFilter = brushIsEmpty ? null : filters.RangedTwoDimensionalFilter(brushSelection);\r\n\r\n        events.trigger(() => {\r\n            this.replaceFilter(ranged2DFilter);\r\n            this.redrawGroup();\r\n        }, constants.EVENT_DELAY);\r\n    }\r\n\r\n    redrawBrush (brushSelection, doTransition) {\r\n        // override default x axis brush from parent chart\r\n        this._gBrush = this.gBrush();\r\n\r\n        if (this.brushOn() && this._gBrush) {\r\n            if (this.resizing()) {\r\n                this.setBrushExtents(doTransition);\r\n            }\r\n\r\n            if (!brushSelection) {\r\n                this._withoutBrushEvents(() => {\r\n                    this._gBrush\r\n                        .call(this.brush().move, brushSelection);\r\n                });\r\n            } else {\r\n                brushSelection = brushSelection.map(point => point.map((coord, i) => {\r\n                    const scale = i === 0 ? this.x() : this.y();\r\n                    return scale(coord);\r\n                }));\r\n\r\n                const gBrush =\r\n                    optionalTransition(doTransition, this.transitionDuration(), this.transitionDelay())(this._gBrush);\r\n\r\n                this._withoutBrushEvents(() => {\r\n                    gBrush\r\n                        .call(this.brush().move, brushSelection);\r\n                });\r\n            }\r\n        }\r\n\r\n        this.fadeDeselectedArea(brushSelection);\r\n    }\r\n}\r\n\r\nexport const scatterPlot = (parent, chartGroup) => new ScatterPlot(parent, chartGroup);\r\n","import {events} from '../core/events';\r\nimport {BaseMixin} from '../base/base-mixin';\r\nimport {logger} from '../core/logger';\r\nimport {d3compat} from '../core/config';\r\n\r\nconst SELECT_CSS_CLASS = 'dc-select-menu';\r\nconst OPTION_CSS_CLASS = 'dc-select-option';\r\n\r\n/**\r\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\r\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\r\n * @mixes BaseMixin\r\n */\r\nexport class SelectMenu extends BaseMixin {\r\n    /**\r\n     * Create a Select Menu.\r\n     * @example\r\n     * // create a select menu under #select-container using the default global chart group\r\n     * var select = new SelectMenu('#select-container')\r\n     *                .dimension(states)\r\n     *                .group(stateGroup);\r\n     * // the option text can be set via the title() function\r\n     * // by default the option text is '`key`: `value`'\r\n     * select.title(function (d){\r\n     *     return 'STATE: ' + d.key;\r\n     * })\r\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\r\n     * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\r\n     * Interaction with the widget will only trigger events and redraws within its group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._select = undefined;\r\n        this._promptText = 'Select all';\r\n        this._multiple = false;\r\n        this._promptValue = null;\r\n        this._numberVisible = null;\r\n\r\n        this.data(group => group.all().filter(this._filterDisplayed));\r\n\r\n        this._filterDisplayed = d => this.valueAccessor()(d) > 0;\r\n\r\n        this._order = (a, b) => {\r\n            if (this.keyAccessor()(a) > this.keyAccessor()(b)) {\r\n                return 1;\r\n            }\r\n            if (this.keyAccessor()(a) < this.keyAccessor()(b)) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _doRender () {\r\n        this.select('select').remove();\r\n        this._select = this.root().append('select')\r\n            .classed(SELECT_CSS_CLASS, true);\r\n        this._select.append('option').text(this._promptText).attr('value', '');\r\n\r\n        this._doRedraw();\r\n        return this;\r\n    }\r\n\r\n    _doRedraw () {\r\n        this._setAttributes();\r\n        this._renderOptions();\r\n        // select the option(s) corresponding to current filter(s)\r\n        if (this.hasFilter() && this._multiple) {\r\n            this._select.selectAll('option')\r\n                .property('selected', d => typeof d !== 'undefined' && this.filters().indexOf(String(this.keyAccessor()(d))) >= 0);\r\n        } else if (this.hasFilter()) {\r\n            this._select.property('value', this.filter());\r\n        } else {\r\n            this._select.property('value', '');\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _renderOptions () {\r\n        const options = this._select.selectAll(`option.${OPTION_CSS_CLASS}`)\r\n            .data(this.data(), d => this.keyAccessor()(d));\r\n\r\n        options.exit().remove();\r\n\r\n        options.enter()\r\n            .append('option')\r\n            .classed(OPTION_CSS_CLASS, true)\r\n            .attr('value', d => this.keyAccessor()(d))\r\n            .merge(options)\r\n            .text(this.title());\r\n\r\n        this._select.selectAll(`option.${OPTION_CSS_CLASS}`).sort(this._order);\r\n\r\n        this._select.on('change', d3compat.eventHandler((d, evt) => this._onChange(d, evt)));\r\n    }\r\n\r\n    _onChange (_d, evt) {\r\n        let values;\r\n\r\n        const target = evt.target;\r\n\r\n        if (target.selectedOptions) {\r\n            const selectedOptions = Array.prototype.slice.call(target.selectedOptions);\r\n            values = selectedOptions.map(d => d.value);\r\n        } else { // IE and other browsers do not support selectedOptions\r\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\r\n            const options = [].slice.call(evt.target.options);\r\n            values = options.filter(option => option.selected).map(option => option.value);\r\n        }\r\n        // console.log(values);\r\n        // check if only prompt option is selected\r\n        if (values.length === 1 && values[0] === '') {\r\n            values = this._promptValue || null;\r\n        } else if (!this._multiple && values.length === 1) {\r\n            values = values[0];\r\n        }\r\n        this.onChange(values);\r\n    }\r\n\r\n    onChange (val) {\r\n        if (val && this._multiple) {\r\n            this.replaceFilter([val]);\r\n        } else if (val) {\r\n            this.replaceFilter(val);\r\n        } else {\r\n            this.filterAll();\r\n        }\r\n        events.trigger(() => {\r\n            this.redrawGroup();\r\n        });\r\n    }\r\n\r\n    _setAttributes () {\r\n        if (this._multiple) {\r\n            this._select.attr('multiple', true);\r\n        } else {\r\n            this._select.attr('multiple', null);\r\n        }\r\n        if (this._numberVisible !== null) {\r\n            this._select.attr('size', this._numberVisible);\r\n        } else {\r\n            this._select.attr('size', null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get or set the function that controls the ordering of option tags in the\r\n     * select menu. By default options are ordered by the group key in ascending\r\n     * order.\r\n     * @param {Function} [order]\r\n     * @returns {Function|SelectMenu}\r\n     * @example\r\n     * // order by the group's value\r\n     * chart.order(function (a,b) {\r\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\r\n     * });\r\n     */\r\n    order (order) {\r\n        if (!arguments.length) {\r\n            return this._order;\r\n        }\r\n        this._order = order;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the text displayed in the options used to prompt selection.\r\n     * @param {String} [promptText='Select all']\r\n     * @returns {String|SelectMenu}\r\n     * @example\r\n     * chart.promptText('All states');\r\n     */\r\n    promptText (promptText) {\r\n        if (!arguments.length) {\r\n            return this._promptText;\r\n        }\r\n        this._promptText = promptText;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the function that filters option tags prior to display. By default options\r\n     * with a value of < 1 are not displayed.\r\n     * @param {function} [filterDisplayed]\r\n     * @returns {Function|SelectMenu}\r\n     * @example\r\n     * // display all options override the `filterDisplayed` function:\r\n     * chart.filterDisplayed(function () {\r\n     *     return true;\r\n     * });\r\n     */\r\n    filterDisplayed (filterDisplayed) {\r\n        if (!arguments.length) {\r\n            return this._filterDisplayed;\r\n        }\r\n        this._filterDisplayed = filterDisplayed;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Controls the type of select menu. Setting it to true converts the underlying\r\n     * HTML tag into a multiple select.\r\n     * @param {boolean} [multiple=false]\r\n     * @returns {boolean|SelectMenu}\r\n     * @example\r\n     * chart.multiple(true);\r\n     */\r\n    multiple (multiple) {\r\n        if (!arguments.length) {\r\n            return this._multiple;\r\n        }\r\n        this._multiple = multiple;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Controls the default value to be used for\r\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\r\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\r\n     * just the prompt is selected.\r\n     * @param {?*} [promptValue=null]\r\n     * @returns {*|SelectMenu}\r\n     */\r\n    promptValue (promptValue) {\r\n        if (!arguments.length) {\r\n            return this._promptValue;\r\n        }\r\n        this._promptValue = promptValue;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\r\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\r\n     * the `select` element. If `null` (the default), uses the browser's default height.\r\n     * @param {?number} [numberVisible=null]\r\n     * @returns {number|SelectMenu}\r\n     * @example\r\n     * chart.numberVisible(10);\r\n     */\r\n    numberVisible (numberVisible) {\r\n        if (!arguments.length) {\r\n            return this._numberVisible;\r\n        }\r\n        this._numberVisible = numberVisible;\r\n\r\n        return this;\r\n    }\r\n\r\n    size (numberVisible) {\r\n        logger.warnOnce('selectMenu.size is ambiguous - use selectMenu.numberVisible instead');\r\n        if (!arguments.length) {\r\n            return this.numberVisible();\r\n        }\r\n        return this.numberVisible(numberVisible);\r\n    }\r\n}\r\n\r\nexport const selectMenu = (parent, chartGroup) => new SelectMenu(parent, chartGroup);\r\n","import {ascending} from 'd3-array';\r\n\r\nimport {CompositeChart} from './composite-chart';\r\nimport {lineChart} from './line-chart';\r\nimport {utils} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\n\r\n/**\r\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\r\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\r\n * composite features other than recomposing the chart.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\r\n * @mixes CompositeChart\r\n */\r\nexport class SeriesChart extends CompositeChart {\r\n    /**\r\n     * Create a Series Chart.\r\n     * @example\r\n     * // create a series chart under #chart-container1 element using the default global chart group\r\n     * var seriesChart1 = new SeriesChart(\"#chart-container1\");\r\n     * // create a series chart under #chart-container2 element using chart group A\r\n     * var seriesChart2 = new SeriesChart(\"#chart-container2\", \"chartGroupA\");\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super(parent, chartGroup);\r\n\r\n        this._keySort = (a, b) => ascending(this.keyAccessor()(a), this.keyAccessor()(b));\r\n\r\n        this._charts = {};\r\n        this._chartFunction = lineChart;\r\n        this._chartGroup = chartGroup;\r\n        this._seriesAccessor = undefined;\r\n        this._seriesSort = ascending;\r\n        this._valueSort = this._keySort;\r\n\r\n        this._mandatoryAttributes().push('seriesAccessor', 'chart');\r\n        this.shareColors(true);\r\n    }\r\n\r\n    _compose (subChartArray) {\r\n        super.compose(subChartArray);\r\n    }\r\n\r\n    compose (subChartArray) {\r\n        throw new Error('Not supported for this chart type');\r\n    }\r\n\r\n    _preprocessData () {\r\n        const keep = [];\r\n        let childrenChanged;\r\n\r\n        const nesting = d3compat.nester({\r\n            key: this._seriesAccessor,\r\n            sortKeys: this._seriesSort,\r\n            sortValues: this._valueSort,\r\n            entries: this.data()\r\n        });\r\n\r\n        const children =\r\n            nesting.map((sub, i) => {\r\n                const subChart = this._charts[sub.key] || this._chartFunction(this, this._chartGroup , sub.key, i);\r\n                if (!this._charts[sub.key]) {\r\n                    childrenChanged = true;\r\n                }\r\n                this._charts[sub.key] = subChart;\r\n                keep.push(sub.key);\r\n                return subChart\r\n                    .dimension(this.dimension())\r\n                    .group({\r\n                        all: typeof sub.values === 'function' ? sub.values : utils.constant(sub.values)\r\n                    }, sub.key)\r\n                    .keyAccessor(this.keyAccessor())\r\n                    .valueAccessor(this.valueAccessor())\r\n                    .brushOn(false);\r\n            });\r\n        // this works around the fact compositeChart doesn't really\r\n        // have a removal interface\r\n        Object.keys(this._charts)\r\n            .filter(c => keep.indexOf(c) === -1)\r\n            .forEach(c => {\r\n                this._clearChart(c);\r\n                childrenChanged = true;\r\n            });\r\n        this._compose(children);\r\n        if (childrenChanged && this.legend()) {\r\n            this.legend().render();\r\n        }\r\n    }\r\n\r\n    _clearChart (c) {\r\n        if (this._charts[c].g()) {\r\n            this._charts[c].g().remove();\r\n        }\r\n        delete this._charts[c];\r\n    }\r\n\r\n    _resetChildren () {\r\n        Object.keys(this._charts).map(this._clearChart.bind(this));\r\n        this._charts = {};\r\n    }\r\n\r\n    /**\r\n     * Get or set the chart function, which generates the child charts.\r\n     * @example\r\n     * // put curve on the line charts used for the series\r\n     * chart.chart(function(c) { return new LineChart(c).curve(d3.curveBasis); })\r\n     * // do a scatter series chart\r\n     * chart.chart(anchor => new ScatterPlot(anchor))\r\n     * @param {Function} [chartFunction= (anchor) =>  new LineChart(anchor)]\r\n     * @returns {Function|SeriesChart}\r\n     */\r\n    chart (chartFunction) {\r\n        if (!arguments.length) {\r\n            return this._chartFunction;\r\n        }\r\n        this._chartFunction = chartFunction;\r\n        this._resetChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Get or set accessor function for the displayed series. Given a datum, this function\r\n     * should return the series that datum belongs to.\r\n     * @example\r\n     * // simple series accessor\r\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\r\n     * @param {Function} [accessor]\r\n     * @returns {Function|SeriesChart}\r\n     */\r\n    seriesAccessor (accessor) {\r\n        if (!arguments.length) {\r\n            return this._seriesAccessor;\r\n        }\r\n        this._seriesAccessor = accessor;\r\n        this._resetChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set a function to sort the list of series by, given series values.\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\r\n     * @example\r\n     * chart.seriesSort(d3.descending);\r\n     * @param {Function} [sortFunction=d3.ascending]\r\n     * @returns {Function|SeriesChart}\r\n     */\r\n    seriesSort (sortFunction) {\r\n        if (!arguments.length) {\r\n            return this._seriesSort;\r\n        }\r\n        this._seriesSort = sortFunction;\r\n        this._resetChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\r\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\r\n     * rather than haphazardly.\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\r\n     * @example\r\n     * // Default value sort\r\n     * _chart.valueSort(function keySort (a, b) {\r\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\r\n     * });\r\n     * @param {Function} [sortFunction]\r\n     * @returns {Function|SeriesChart}\r\n     */\r\n    valueSort (sortFunction) {\r\n        if (!arguments.length) {\r\n            return this._valueSort;\r\n        }\r\n        this._valueSort = sortFunction;\r\n        this._resetChildren();\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport const seriesChart = (parent, chartGroup) => new SeriesChart(parent, chartGroup);\r\n","import {hierarchy, partition} from 'd3-hierarchy';\r\nimport {ascending, min, sum} from 'd3-array';\r\nimport {arc} from 'd3-shape';\r\nimport {select} from 'd3-selection';\r\nimport {interpolate} from 'd3-interpolate';\r\n\r\nimport {transition} from '../core/core';\r\nimport {filters} from '../core/filters';\r\nimport {utils, pluck} from '../core/utils';\r\nimport {d3compat} from '../core/config';\r\nimport {events} from '../core/events';\r\nimport {ColorMixin} from '../base/color-mixin';\r\nimport {BaseMixin} from '../base/base-mixin';\r\nimport {constants} from '../core/constants';\r\nimport {BadArgumentException} from '../core/bad-argument-exception';\r\n\r\nconst DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\r\n\r\n/**\r\n * The sunburst chart implementation is usually used to visualize a small tree distribution.  The sunburst\r\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\r\n * slice relative to the sum of all values. Slices are ordered by {@link BaseMixin#ordering ordering} which defaults to sorting\r\n * by key.\r\n *\r\n * The keys used in the sunburst chart should be arrays, representing paths in the tree.\r\n *\r\n * When filtering, the sunburst chart creates instances of {@link Filters.HierarchyFilter HierarchyFilter}.\r\n *\r\n * @mixes CapMixin\r\n * @mixes ColorMixin\r\n * @mixes BaseMixin\r\n */\r\nexport class SunburstChart extends ColorMixin(BaseMixin) {\r\n    /**\r\n     * Create a Sunburst Chart\r\n     * @example\r\n     * // create a sunburst chart under #chart-container1 element using the default global chart group\r\n     * var chart1 = new SunburstChart('#chart-container1');\r\n     * // create a sunburst chart under #chart-container2 element using chart group A\r\n     * var chart2 = new SunburstChart('#chart-container2', 'chartGroupA');\r\n     *\r\n     * @param {String|node|d3.selection} parent - Any valid\r\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\r\n     * a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._sliceCssClass = 'pie-slice';\r\n        this._emptyCssClass = 'empty-chart';\r\n        this._emptyTitle = 'empty';\r\n\r\n        this._radius = undefined;\r\n        this._givenRadius = undefined; // given radius, if any\r\n        this._innerRadius = 0;\r\n        this._ringSizes = null;\r\n\r\n        this._g = undefined;\r\n        this._cx = undefined;\r\n        this._cy = undefined;\r\n        this._minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\r\n        this._externalLabelRadius = undefined;\r\n\r\n        this.colorAccessor(d => this.keyAccessor()(d));\r\n\r\n        // override cap mixin\r\n        this.ordering(pluck('key'));\r\n\r\n        this.title(d => `${this.keyAccessor()(d)}: ${this._extendedValueAccessor(d)}`);\r\n\r\n        this.label(d => this.keyAccessor()(d));\r\n        this.renderLabel(true);\r\n\r\n        this.transitionDuration(350);\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    // Handle cases if value corresponds to generated parent nodes\r\n    _extendedValueAccessor (d) {\r\n        if (d.path) {\r\n            return d.value;\r\n        }\r\n        return this.valueAccessor()(d);\r\n    }\r\n\r\n    _scaleRadius (ringIndex, y) {\r\n        if (ringIndex === 0) {\r\n            return this._innerRadius;\r\n        } else {\r\n            const customRelativeRadius = sum(this.ringSizes().relativeRingSizes.slice(0, ringIndex));\r\n            const scaleFactor = (ringIndex * (1 / this.ringSizes().relativeRingSizes.length)) /\r\n                  customRelativeRadius;\r\n            const standardRadius = (y - this.ringSizes().rootOffset) /\r\n                  (1 - this.ringSizes().rootOffset) * (this._radius - this._innerRadius);\r\n            return this._innerRadius + standardRadius / scaleFactor;\r\n        }\r\n    }\r\n\r\n    _doRender () {\r\n        this.resetSvg();\r\n\r\n        this._g = this.svg()\r\n            .append('g')\r\n            .attr('transform', `translate(${this.cx()},${this.cy()})`);\r\n\r\n        this._drawChart();\r\n\r\n        return this;\r\n    }\r\n\r\n    _drawChart () {\r\n        // set radius from chart size if none given, or if given radius is too large\r\n        const maxRadius = min([this.width(), this.height()]) / 2;\r\n        this._radius = this._givenRadius && this._givenRadius < maxRadius ? this._givenRadius : maxRadius;\r\n\r\n        const arcs = this._buildArcs();\r\n\r\n        let partitionedNodes, cdata;\r\n        // if we have data...\r\n        if (sum(this.data(), this.valueAccessor())) {\r\n            cdata = utils.toHierarchy(this.data(), this.valueAccessor());\r\n            partitionedNodes = this._partitionNodes(cdata);\r\n            // First one is the root, which is not needed\r\n            partitionedNodes.nodes.shift();\r\n            this._g.classed(this._emptyCssClass, false);\r\n        } else {\r\n            // otherwise we'd be getting NaNs, so override\r\n            // note: abuse others for its ignoring the value accessor\r\n            cdata = utils.toHierarchy([], d => d.value);\r\n            partitionedNodes = this._partitionNodes(cdata);\r\n            this._g.classed(this._emptyCssClass, true);\r\n        }\r\n        this.ringSizes().rootOffset = partitionedNodes.rootOffset;\r\n        this.ringSizes().relativeRingSizes = partitionedNodes.relativeRingSizes;\r\n\r\n        if (this._g) {\r\n            const slices = this._g.selectAll(`g.${this._sliceCssClass}`)\r\n                .data(partitionedNodes.nodes);\r\n            this._createElements(slices, arcs, partitionedNodes.nodes);\r\n\r\n            this._updateElements(partitionedNodes.nodes, arcs);\r\n\r\n            this._removeElements(slices);\r\n\r\n            this._highlightFilter();\r\n\r\n            transition(this._g, this.transitionDuration(), this.transitionDelay())\r\n                .attr('transform', `translate(${this.cx()},${this.cy()})`);\r\n        }\r\n    }\r\n\r\n    _createElements (slices, arcs, sunburstData) {\r\n        const slicesEnter = this._createSliceNodes(slices);\r\n\r\n        this._createSlicePath(slicesEnter, arcs);\r\n        this._createTitles(slicesEnter);\r\n        this._createLabels(sunburstData, arcs);\r\n    }\r\n\r\n    _createSliceNodes (slices) {\r\n        return slices\r\n            .enter()\r\n            .append('g')\r\n            .attr('class', (d, i) => `${this._sliceCssClass\r\n            } _${i} ${\r\n                this._sliceCssClass}-level-${d.depth}`);\r\n    }\r\n\r\n    _createSlicePath (slicesEnter, arcs) {\r\n        const slicePath = slicesEnter.append('path')\r\n            .attr('fill', (d, i) => this._fill(d, i))\r\n            .on('click', d3compat.eventHandler(d => this.onClick(d)))\r\n            .classed('dc-tabbable', this._keyboardAccessible)\r\n            .attr('d', d => this._safeArc(arcs, d));\r\n\r\n        if (this._keyboardAccessible) {\r\n            this._makeKeyboardAccessible(this.onClick);\r\n        }\r\n\r\n        const tranNodes = transition(slicePath, this.transitionDuration());\r\n        if (tranNodes.attrTween) {\r\n            const chart = this;\r\n            tranNodes.attrTween('d', function (d) {\r\n                return chart._tweenSlice(d, this);\r\n            });\r\n        }\r\n    }\r\n\r\n    _createTitles (slicesEnter) {\r\n        if (this.renderTitle()) {\r\n            slicesEnter.append('title').text(d => this.title()(d));\r\n        }\r\n    }\r\n\r\n    _positionLabels (labelsEnter, arcs) {\r\n        transition(labelsEnter, this.transitionDuration())\r\n            .attr('transform', d => this._labelPosition(d, arcs))\r\n            .attr('text-anchor', 'middle')\r\n            .text(d => {\r\n                // position label...\r\n                if (this._sliceHasNoData(d) || this._sliceTooSmall(d)) {\r\n                    return '';\r\n                }\r\n                return this.label()(d);\r\n            });\r\n    }\r\n\r\n    _createLabels (sunburstData, arcs) {\r\n        if (this.renderLabel()) {\r\n            const labels = this._g.selectAll(`text.${this._sliceCssClass}`)\r\n                .data(sunburstData);\r\n\r\n            labels.exit().remove();\r\n\r\n            const labelsEnter = labels\r\n                .enter()\r\n                .append('text')\r\n                .attr('class', (d, i) => {\r\n                    let classes = `${this._sliceCssClass} _${i}`;\r\n                    if (this._externalLabelRadius) {\r\n                        classes += ' external';\r\n                    }\r\n                    return classes;\r\n                })\r\n                .on('click', d3compat.eventHandler(d => this.onClick(d)));\r\n            this._positionLabels(labelsEnter, arcs);\r\n        }\r\n    }\r\n\r\n    _updateElements (sunburstData, arcs) {\r\n        this._updateSlicePaths(sunburstData, arcs);\r\n        this._updateLabels(sunburstData, arcs);\r\n        this._updateTitles(sunburstData);\r\n    }\r\n\r\n    _updateSlicePaths (sunburstData, arcs) {\r\n        const slicePaths = this._g.selectAll(`g.${this._sliceCssClass}`)\r\n            .data(sunburstData)\r\n            .select('path')\r\n            .attr('d', (d, i) => this._safeArc(arcs, d));\r\n        const tranNodes = transition(slicePaths, this.transitionDuration());\r\n        if (tranNodes.attrTween) {\r\n            const chart = this;\r\n            tranNodes.attrTween('d', function (d) {\r\n                return chart._tweenSlice(d, this);\r\n            });\r\n        }\r\n        tranNodes.attr('fill', (d, i) => this._fill(d, i));\r\n    }\r\n\r\n    _updateLabels (sunburstData, arcs) {\r\n        if (this.renderLabel()) {\r\n            const labels = this._g.selectAll(`text.${this._sliceCssClass}`)\r\n                .data(sunburstData);\r\n            this._positionLabels(labels, arcs);\r\n        }\r\n    }\r\n\r\n    _updateTitles (sunburstData) {\r\n        if (this.renderTitle()) {\r\n            this._g.selectAll(`g.${this._sliceCssClass}`)\r\n                .data(sunburstData)\r\n                .select('title')\r\n                .text(d => this.title()(d));\r\n        }\r\n    }\r\n\r\n    _removeElements (slices) {\r\n        slices.exit().remove();\r\n    }\r\n\r\n    _highlightFilter () {\r\n        const chart = this;\r\n        if (chart.hasFilter()) {\r\n            chart.selectAll(`g.${chart._sliceCssClass}`).each(function (d) {\r\n                if (chart._isSelectedSlice(d)) {\r\n                    chart.highlightSelected(this);\r\n                } else {\r\n                    chart.fadeDeselected(this);\r\n                }\r\n            });\r\n        } else {\r\n            chart.selectAll(`g.${chart._sliceCssClass}`).each(function (d) {\r\n                chart.resetHighlight(this);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get or set the inner radius of the sunburst chart. If the inner radius is greater than 0px then the\r\n     * sunburst chart will be rendered as a doughnut chart. Default inner radius is 0px.\r\n     * @param {Number} [innerRadius=0]\r\n     * @returns {Number|SunburstChart}\r\n     */\r\n    innerRadius (innerRadius) {\r\n        if (!arguments.length) {\r\n            return this._innerRadius;\r\n        }\r\n        this._innerRadius = innerRadius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\r\n     * chart width and height.\r\n     * @param {Number} [radius]\r\n     * @returns {Number|SunburstChart}\r\n     */\r\n    radius (radius) {\r\n        if (!arguments.length) {\r\n            return this._givenRadius;\r\n        }\r\n        this._givenRadius = radius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set center x coordinate position. Default is center of svg.\r\n     * @param {Number} [cx]\r\n     * @returns {Number|SunburstChart}\r\n     */\r\n    cx (cx) {\r\n        if (!arguments.length) {\r\n            return (this._cx || this.width() / 2);\r\n        }\r\n        this._cx = cx;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set center y coordinate position. Default is center of svg.\r\n     * @param {Number} [cy]\r\n     * @returns {Number|SunburstChart}\r\n     */\r\n    cy (cy) {\r\n        if (!arguments.length) {\r\n            return (this._cy || this.height() / 2);\r\n        }\r\n        this._cy = cy;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\r\n     * display a slice label.\r\n     * @param {Number} [minAngleForLabel=0.5]\r\n     * @returns {Number|SunburstChart}\r\n     */\r\n    minAngleForLabel (minAngleForLabel) {\r\n        if (!arguments.length) {\r\n            return this._minAngleForLabel;\r\n        }\r\n        this._minAngleForLabel = minAngleForLabel;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Title to use for the only slice when there is no data.\r\n     * @param {String} [title]\r\n     * @returns {String|SunburstChart}\r\n     */\r\n    emptyTitle (title) {\r\n        if (arguments.length === 0) {\r\n            return this._emptyTitle;\r\n        }\r\n        this._emptyTitle = title;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Position slice labels offset from the outer edge of the chart.\r\n     *\r\n     * The argument specifies the extra radius to be added for slice labels.\r\n     * @param {Number} [externalLabelRadius]\r\n     * @returns {Number|SunburstChart}\r\n     */\r\n    externalLabels (externalLabelRadius) {\r\n        if (arguments.length === 0) {\r\n            return this._externalLabelRadius;\r\n        } else if (externalLabelRadius) {\r\n            this._externalLabelRadius = externalLabelRadius;\r\n        } else {\r\n            this._externalLabelRadius = undefined;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Constructs the default RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()},\r\n     * which makes the rings narrower as they get farther away from the center.\r\n     *\r\n     * Can be used as a parameter to ringSizes() to reset the default behavior, or modified for custom ring sizes.\r\n     *\r\n     * @example\r\n     *   var chart = new dc.SunburstChart(...);\r\n     *   chart.ringSizes(chart.defaultRingSizes())\r\n     * @returns {RingSizes}\r\n     */\r\n    defaultRingSizes () {\r\n        return {\r\n            partitionDy: () => this._radius * this._radius,\r\n            scaleInnerRadius: d => d.data.path && d.data.path.length === 1 ?\r\n                this._innerRadius :\r\n                Math.sqrt(d.y0),\r\n            scaleOuterRadius: d => Math.sqrt(d.y1),\r\n            relativeRingSizesFunction: () => []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Constructs a RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()}\r\n     * that will make the chart rings equally wide.\r\n     *\r\n     * @example\r\n     *   var chart = new dc.SunburstChart(...);\r\n     *   chart.ringSizes(chart.equalRingSizes())\r\n     * @returns {RingSizes}\r\n     */\r\n    equalRingSizes () {\r\n        return this.relativeRingSizes(\r\n            ringCount => {\r\n                const result = [];\r\n                for (let i = 0; i < ringCount; i++) {\r\n                    result.push(1 / ringCount);\r\n                }\r\n                return result;\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Constructs a RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()} using the given function\r\n     * to determine each rings width.\r\n     *\r\n     * * The function must return an array containing portion values for each ring/level of the chart.\r\n     * * The length of the array must match the number of rings of the chart at runtime, which is provided as the only\r\n     *   argument.\r\n     * * The sum of all portions from the array must be 1 (100%).\r\n     *\r\n     * @example\r\n     * // specific relative portions (the number of rings (3) is known in this case)\r\n     * chart.ringSizes(chart.relativeRingSizes(function (ringCount) {\r\n     *     return [.1, .3, .6];\r\n     * });\r\n     * @param {Function} [relativeRingSizesFunction]\r\n     * @returns {RingSizes}\r\n     */\r\n    relativeRingSizes (relativeRingSizesFunction) {\r\n        function assertPortionsArray (relativeSizes, numberOfRings) {\r\n            if (!Array.isArray(relativeSizes)) {\r\n                throw new BadArgumentException('relativeRingSizes function must return an array');\r\n            }\r\n\r\n            const portionsSum = sum(relativeSizes);\r\n            if (Math.abs(portionsSum - 1) > constants.NEGLIGIBLE_NUMBER) {\r\n                throw new BadArgumentException(\r\n                    `relativeRingSizes : portions must add up to 1, but sum was ${portionsSum}`);\r\n            }\r\n\r\n            if (relativeSizes.length !== numberOfRings) {\r\n                throw new BadArgumentException(\r\n                    `relativeRingSizes : number of values must match number of rings (${\r\n                        numberOfRings}) but was ${relativeSizes.length}`);\r\n            }\r\n        }\r\n        return {\r\n            partitionDy: () => 1,\r\n            scaleInnerRadius: d => this._scaleRadius(d.data.path.length - 1, d.y0),\r\n            scaleOuterRadius: d => this._scaleRadius(d.data.path.length, d.y1),\r\n            relativeRingSizesFunction: ringCount => {\r\n                const result = relativeRingSizesFunction(ringCount);\r\n                assertPortionsArray(result, ringCount);\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get or set the strategy to use for sizing the charts rings.\r\n     *\r\n     * There are three strategies available\r\n     * * {@link SunburstChart#defaultRingSizes `defaultRingSizes`}: the rings get narrower farther away from the center\r\n     * * {@link SunburstChart#relativeRingSizes `relativeRingSizes`}: set the ring sizes as portions of 1\r\n     * * {@link SunburstChart#equalRingSizes `equalRingSizes`}: the rings are equally wide\r\n     *\r\n     * You can modify the returned strategy, or create your own, for custom ring sizing.\r\n     *\r\n     * RingSizes is a duck-typed interface that must support the following methods:\r\n     * * `partitionDy()`: used for\r\n     *   {@link https://github.com/d3/d3-hierarchy/blob/v1.1.9/README.md#partition_size `d3.partition.size`}\r\n     * * `scaleInnerRadius(d)`: takes datum and returns radius for\r\n     *    {@link https://github.com/d3/d3-shape/blob/v1.3.7/README.md#arc_innerRadius `d3.arc.innerRadius`}\r\n     * * `scaleOuterRadius(d)`: takes datum and returns radius for\r\n     *    {@link https://github.com/d3/d3-shape/blob/v1.3.7/README.md#arc_outerRadius `d3.arc.outerRadius`}\r\n     * * `relativeRingSizesFunction(ringCount)`: takes ring count and returns an array of portions that\r\n     *   must add up to 1\r\n     *\r\n     * @example\r\n     * // make rings equally wide\r\n     * chart.ringSizes(chart.equalRingSizes())\r\n     * // reset to default behavior\r\n     * chart.ringSizes(chart.defaultRingSizes()))\r\n     * @param {RingSizes} ringSizes\r\n     * @returns {Object|SunburstChart}\r\n     */\r\n    ringSizes (ringSizes) {\r\n        if (!arguments.length) {\r\n            if (!this._ringSizes) {\r\n                this._ringSizes = this.defaultRingSizes();\r\n            }\r\n            return this._ringSizes;\r\n        }\r\n        this._ringSizes = ringSizes;\r\n        return this;\r\n    }\r\n\r\n    _buildArcs () {\r\n        return arc()\r\n            .startAngle(d => d.x0)\r\n            .endAngle(d => d.x1)\r\n            .innerRadius(d => this.ringSizes().scaleInnerRadius(d))\r\n            .outerRadius(d => this.ringSizes().scaleOuterRadius(d));\r\n    }\r\n\r\n    _isSelectedSlice (d) {\r\n        return this._isPathFiltered(d.path);\r\n    }\r\n\r\n    _isPathFiltered (path) {\r\n        for (let i = 0; i < this.filters().length; i++) {\r\n            const currentFilter = this.filters()[i];\r\n            if (currentFilter.isFiltered(path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // returns all filters that are a parent or child of the path\r\n    _filtersForPath (path) {\r\n        const pathFilter = filters.HierarchyFilter(path);\r\n        const filtersList = [];\r\n        for (let i = 0; i < this.filters().length; i++) {\r\n            const currentFilter = this.filters()[i];\r\n            if (currentFilter.isFiltered(path) || pathFilter.isFiltered(currentFilter)) {\r\n                filtersList.push(currentFilter);\r\n            }\r\n        }\r\n        return filtersList;\r\n    }\r\n\r\n    _doRedraw () {\r\n        this._drawChart();\r\n        return this;\r\n    }\r\n\r\n    _partitionNodes (data) {\r\n        const getSortable = function (d) {\r\n            return {'key': d.data.key, 'value': d.value};\r\n        };\r\n        const _hierarchy = hierarchy(data)\r\n            .sum(d => d.children ? 0 : this._extendedValueAccessor(d))\r\n            .sort((a, b) => ascending(this.ordering()(getSortable(a)), this.ordering()(getSortable(b))));\r\n\r\n        const _partition = partition()\r\n              .size([2 * Math.PI, this.ringSizes().partitionDy()]);\r\n\r\n        _partition(_hierarchy);\r\n\r\n        // In D3v4 the returned data is slightly different, change it enough to suit our purposes.\r\n        const nodes = _hierarchy.descendants().map(d => {\r\n            d.key = d.data.key;\r\n            d.path = d.data.path;\r\n            return d;\r\n        });\r\n\r\n        const relativeSizes = this.ringSizes().relativeRingSizesFunction(_hierarchy.height);\r\n\r\n        return {\r\n            nodes,\r\n            rootOffset: _hierarchy.y1,\r\n            relativeRingSizes: relativeSizes\r\n        };\r\n    }\r\n\r\n    _sliceTooSmall (d) {\r\n        const angle = d.x1 - d.x0;\r\n        return isNaN(angle) || angle < this._minAngleForLabel;\r\n    }\r\n\r\n    _sliceHasNoData (d) {\r\n        return this._extendedValueAccessor(d) === 0;\r\n    }\r\n\r\n    _isOffCanvas (d) {\r\n        return !d || isNaN(d.x0) || isNaN(d.y0);\r\n    }\r\n\r\n    _fill (d, i) {\r\n        return this.getColor(d.data, i);\r\n    }\r\n\r\n    onClick (d) {\r\n        if (this._g.attr('class') === this._emptyCssClass) {\r\n            return;\r\n        }\r\n\r\n        // Must be better way to handle this, in legends we need to access `d.key`\r\n        const path = d.path || d.key;\r\n        const filter = filters.HierarchyFilter(path);\r\n\r\n        // filters are equal to parents or children of the path.\r\n        const filtersList = this._filtersForPath(path);\r\n        let exactMatch = false;\r\n        // clear out any filters that cover the path filtered.\r\n        for (let j = filtersList.length - 1; j >= 0; j--) {\r\n            const currentFilter = filtersList[j];\r\n            if (utils.arraysIdentical(currentFilter, path)) {\r\n                exactMatch = true;\r\n            }\r\n            this.filter(filtersList[j]);\r\n        }\r\n        events.trigger(() => {\r\n            // if it is a new filter - put it in.\r\n            if (!exactMatch) {\r\n                this.filter(filter);\r\n            }\r\n            this.redrawGroup();\r\n        });\r\n    }\r\n\r\n    _safeArc (_arc, d) {\r\n        let path = _arc(d);\r\n        if (path.indexOf('NaN') >= 0) {\r\n            path = 'M0,0';\r\n        }\r\n        return path;\r\n    }\r\n\r\n    _labelPosition (d, _arc) {\r\n        let centroid;\r\n        if (this._externalLabelRadius) {\r\n            centroid = arc()\r\n                .outerRadius(this._radius + this._externalLabelRadius)\r\n                .innerRadius(this._radius + this._externalLabelRadius)\r\n                .centroid(d);\r\n        } else {\r\n            centroid = _arc.centroid(d);\r\n        }\r\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\r\n            return 'translate(0,0)';\r\n        } else {\r\n            return `translate(${centroid})`;\r\n        }\r\n    }\r\n\r\n    legendables () {\r\n        return this.data().map((d, i) => {\r\n            const legendable = {name: d.key, data: d.value, others: d.others, chart: this};\r\n            legendable.color = this.getColor(d, i);\r\n            return legendable;\r\n        });\r\n    }\r\n\r\n    legendHighlight (d) {\r\n        this._highlightSliceFromLegendable(d, true);\r\n    }\r\n\r\n    legendReset (d) {\r\n        this._highlightSliceFromLegendable(d, false);\r\n    }\r\n\r\n    legendToggle (d) {\r\n        this.onClick({key: d.name, others: d.others});\r\n    }\r\n\r\n    _highlightSliceFromLegendable (legendable, highlighted) {\r\n        this.selectAll('g.pie-slice').each(function (d) {\r\n            if (legendable.name === d.key) {\r\n                select(this).classed('highlight', highlighted);\r\n            }\r\n        });\r\n    }\r\n\r\n    _tweenSlice (d, element) {\r\n        let current = element._current;\r\n        if (this._isOffCanvas(current)) {\r\n            current = {x0: 0, x1: 0, y0: 0, y1: 0};\r\n        }\r\n        const tweenTarget = {\r\n            x0: d.x0,\r\n            x1: d.x1,\r\n            y0: d.y0,\r\n            y1: d.y1\r\n        };\r\n        const i = interpolate(current, tweenTarget);\r\n        element._current = i(0);\r\n        return t => this._safeArc(this._buildArcs(), Object.assign({}, d, i(t)));\r\n    }\r\n}\r\n\r\nexport const sunburstChart = (parent, chartGroup) => new SunburstChart(parent, chartGroup);\r\n","import {BaseMixin} from '../base/base-mixin';\r\nimport {constants} from '../core/constants';\r\nimport {events} from '../core/events';\r\n\r\nconst INPUT_CSS_CLASS = 'dc-text-filter-input';\r\n\r\n/**\r\n * Text Filter Widget\r\n *\r\n * The text filter widget is a simple widget designed to display an input field allowing to filter\r\n * data that matches the text typed.\r\n * As opposed to the other charts, this doesn't display any result and doesn't update its display,\r\n * it's just to input an filter other charts.\r\n *\r\n * @mixes BaseMixin\r\n */\r\nexport class TextFilterWidget extends BaseMixin {\r\n    /**\r\n     * Create Text Filter widget\r\n     * @example\r\n     *\r\n     * var data = [{\"firstName\":\"John\",\"lastName\":\"Coltrane\"}{\"firstName\":\"Miles\",lastName:\"Davis\"}]\r\n     * var ndx = crossfilter(data);\r\n     * var dimension = ndx.dimension(function(d) {\r\n     *     return d.lastName.toLowerCase() + ' ' + d.firstName.toLowerCase();\r\n     * });\r\n     *\r\n     * new TextFilterWidget('#search')\r\n     *     .dimension(dimension);\r\n     *     // you don't need the group() function\r\n     *\r\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\r\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\r\n     * specifying a dom block element such as a div; or a dom element or d3 selection.\r\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n     */\r\n    constructor (parent, chartGroup) {\r\n        super();\r\n\r\n        this._normalize = s => s.toLowerCase();\r\n\r\n        this._filterFunctionFactory = query => {\r\n            query = this._normalize(query);\r\n            return d => this._normalize(d).indexOf(query) !== -1;\r\n        };\r\n\r\n        this._placeHolder = 'search';\r\n\r\n        this.group(() => {\r\n            throw 'the group function on textFilterWidget should never be called, please report the issue';\r\n        });\r\n\r\n        this.anchor(parent, chartGroup);\r\n    }\r\n\r\n    _doRender () {\r\n        this.select('input').remove();\r\n\r\n        this._input = this.root().append('input')\r\n            .classed(INPUT_CSS_CLASS, true);\r\n\r\n        const chart = this;\r\n        this._input.on('input', function () {\r\n            chart.dimension().filterFunction(chart._filterFunctionFactory(this.value));\r\n            events.trigger(() => {\r\n                chart.redrawGroup();\r\n            }, constants.EVENT_DELAY);\r\n        });\r\n\r\n        this._doRedraw();\r\n\r\n        return this;\r\n    }\r\n\r\n    _doRedraw () {\r\n        this.root().selectAll('input')\r\n            .attr('placeholder', this._placeHolder);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called on values before calling the filter function.\r\n     * @example\r\n     * // This is the default\r\n     * chart.normalize(function (s) {\r\n     *   return s.toLowerCase();\r\n     * });\r\n     * @param {function} [normalize]\r\n     * @returns {TextFilterWidget|function}\r\n     */\r\n    normalize (normalize) {\r\n        if (!arguments.length) {\r\n            return this._normalize;\r\n        }\r\n        this._normalize = normalize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Placeholder text in the search box.\r\n     * @example\r\n     * // This is the default\r\n     * chart.placeHolder('type to filter');\r\n     * @param {function} [placeHolder='search']\r\n     * @returns {TextFilterWidget|string}\r\n     */\r\n    placeHolder (placeHolder) {\r\n        if (!arguments.length) {\r\n            return this._placeHolder;\r\n        }\r\n        this._placeHolder = placeHolder;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called with the search text, it needs to return a function that will be used to\r\n     * filter the data. The default function checks presence of the search text.\r\n     * @example\r\n     * // This is the default\r\n     * function (query) {\r\n     *     query = _normalize(query);\r\n     *     return function (d) {\r\n     *         return _normalize(d).indexOf(query) !== -1;\r\n     *     };\r\n     * };\r\n     * @param {function} [filterFunctionFactory]\r\n     * @returns {TextFilterWidget|function}\r\n     */\r\n    filterFunctionFactory (filterFunctionFactory) {\r\n        if (!arguments.length) {\r\n            return this._filterFunctionFactory;\r\n        }\r\n        this._filterFunctionFactory = filterFunctionFactory;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const textFilterWidget = (parent, chartGroup) => new TextFilterWidget(parent, chartGroup);\r\n","import { version } from 'd3';\r\n\r\nimport { event, mouse } from 'd3-selection';\r\nimport { nest } from 'd3-collection';\r\n\r\nimport { d3compat } from '../core/config';\r\n\r\nconst majorVer = +version[0];\r\n\r\nif (majorVer < 6) {\r\n    Object.assign(d3compat, {\r\n        eventHandler: handler => function eventHandler (d, _) {\r\n            handler.call(this, d, event);\r\n        },\r\n        // manual firing of event, usu for tests\r\n        callHandler: function callHandler (handler, that, _, d) {\r\n            // note: dropping event as well as any extra args\r\n            // d3@6 does not pass extra args anymore, so we can't use them and remain compatible\r\n            handler.call(that, d);\r\n        },\r\n        nester: ({key, sortKeys, sortValues, entries}) => {\r\n            const nester = nest().key(key);\r\n            if (sortKeys) {\r\n                nester.sortKeys(sortKeys);\r\n            }\r\n            if (sortValues) {\r\n                nester.sortValues(sortValues);\r\n            }\r\n            return nester.entries(entries);\r\n        },\r\n        pointer: (evt, elem) => mouse(elem)\r\n    });\r\n}\r\n","import { version } from 'd3';\r\n\r\nimport { pointer } from 'd3-selection';\r\nimport { groups } from 'd3-array';\r\n\r\nimport { d3compat } from '../core/config';\r\n\r\nconst majorVer = +version[0];\r\n\r\nif (majorVer > 5) {\r\n    Object.assign(d3compat, {\r\n        eventHandler: handler => function eventHandler (event, d) {\r\n            handler.call(this, d, event);\r\n        },\r\n        // manual firing of event, usu for tests\r\n        callHandler: function callHandler (handler, that, event, d) {\r\n            handler.call(that, event, d);\r\n        },\r\n        nester: ({key, sortKeys, sortValues, entries}) => {\r\n            if (sortValues) {\r\n                entries = [...entries].sort(sortValues);\r\n            }\r\n            let out = groups(entries, key);\r\n            if (sortKeys) {\r\n                out = out.sort(sortKeys);\r\n            }\r\n\r\n            // remap to d3@v5 structure\r\n            return out.map(e => ({\r\n                key: `${e[0]}`, // d3@v5 always returns key as string\r\n                values: e[1]\r\n            }));\r\n        },\r\n        pointer\r\n    });\r\n}\r\n"],"names":["BadArgumentException","Error","constants","CHART_CLASS","DEBUG_GROUP_CLASS","STACK_CLASS","DESELECTED_CLASS","SELECTED_CLASS","NODE_INDEX_NAME","GROUP_INDEX_NAME","DEFAULT_CHART_GROUP","EVENT_DELAY","NEGLIGIBLE_NUMBER","Logger","[object Object]","this","enableDebugLog","_alreadyWarned","msg","console","warn","log","logger","debug","Config","_defaultColors","_schemeCategory20c","dateFormat","timeFormat","_renderlet","disableTransitions","colors","arguments","length","warnOnce","config","d3compat","eventHandler","handler","a","b","call","nester","key","sortKeys","sortValues","entries","pointer","chartRegistry","_chartMap","group","chart","e","indexOf","_initializeChartGroup","push","i","anchorName","splice","registerChart","register","deregisterChart","deregister","renderAll","charts","list","render","redrawAll","redraw","transition","selection","duration","delay","name","s","undefined","optionalTransition","enable","instanceOfChart","o","Object","__dcFlag__","events","current","trigger","closure","setTimeout","filters","RangedFilter","low","high","range","Array","isFiltered","value","filterType","TwoDimensionalFilter","filter","f","RangedTwoDimensionalFilter","fromBottomLeft","Math","min","max","Infinity","x","y","HierarchyFilter","path","slice","InvalidStateException","pluck","n","d","utils","printSingleValue","Date","isFloat","fformat","isInteger","round","format","_toTimeFunc","t","second","timeSecond","minute","timeMinute","hour","timeHour","day","timeDay","week","timeWeek","month","timeMonth","year","timeYear","add","l","r","replace","getTime","offset","percentage","subtract","isNumber","isNegligible","clamp","val","constant","_idCounter","findChild","children","nodeName","k","uniqueId","nameToId","toLowerCase","appendOrSelect","parent","selector","tag","element","select","empty","append","safeNumber","arraysEqual","a1","a2","every","elem","valueOf","allChildren","node","paths","concat","toHierarchy","accessor","root","data","parts","currentNode","j","currentPath","childNode","getAncestors","unshift","arraysIdentical","printers","map","join","units","integers","start","end","abs","ordinal","fp","precision","_f","resolution","floor","ceil","_defaultFilterHandler","dimension","filterRange","filterFunction","filterExact","_defaultHasFilterHandler","some","_defaultRemoveFilterHandler","_defaultAddFilterHandler","_defaultResetFilterHandler","BaseMixin","_svgDescription","_keyboardAccessible","_dimension","_group","_anchor","_root","_svg","_isChild","_minWidth","_defaultWidthCalc","width","getBoundingClientRect","_widthCalc","_minHeight","_defaultHeightCalc","height","_heightCalc","_width","_height","_useViewBoxResizing","_keyAccessor","_valueAccessor","_label","_ordering","_renderLabel","_title","keyAccessor","valueAccessor","_renderTitle","_controlsUseVisibility","_transitionDuration","_transitionDelay","_filterPrinter","_mandatoryAttributesList","_chartGroup","_listeners","dispatch","_legend","_commitHandler","_defaultData","all","_data","_filters","_filterHandler","_hasFilterHandler","_removeFilterHandler","_addFilterHandler","_resetFilterHandler","minWidth","minHeight","useViewBoxResizing","expireCache","callback","_groupName","orderFunction","from","sort","ascending","sel","selectAll","chartGroup","anchor","classed","id","chartID","rootElement","svgElement","remove","generateSvg","attr","html","svgDescription","sizeSvg","description","constructor","keyboardAccessible","filterPrinterFunction","controlsUseVisibility","attribute","style","text","_","forEach","checkForMandatoryAttributes","result","_doRender","_activateRenderlets","onClickFunction","onClickArgs","tabElements","on","event","keyCode","preventDefault","transitionDuration","transitionDelay","_doRedraw","commitHandler","error","hasFilterHandler","removeFilterHandler","addFilterHandler","resetFilterHandler","fs","applyFilters","_invokeFilteredListener","hasFilter","turnOnControls","turnOffControls","datum","redrawGroup","filterHandler","labelFunction","enableLabels","renderLabel","titleFunction","renderTitle","legend","opts","applyOptions","apply","listener","renderletFunction","ColorMixin","Base","super","_colors","scaleOrdinal","defaultColors","_colorAccessor","_colorCalculator","getColor","newDomain","colorAccessor","domain","colorScale","scaleQuantize","scaleLinear","interpolate","interpolateHcl","colorCalculator","BubbleMixin","_maxBubbleRelativeSize","_minRadiusWithLabel","_sortBubbleSize","_elasticRadius","_excludeElasticZero","BUBBLE_NODE_CLASS","BUBBLE_CLASS","MIN_RADIUS","radiusAccessor","radiusValueAccessor","descending","_r","bubbleRadiusScale","elasticRadius","rMin","rMax","_rValueAccessor","values","isNaN","label","bubbleR","_shouldLabel","bubbleGEnter","onClick","_labelPointerEvent","_labelFunction","_labelOpacity","labels","title","g","_titleFunction","sortBubbleSize","radius","relativeSize","excludeZero","each","isSelectedNode","highlightSelected","fadeDeselected","resetHighlight","CapMixin","_cap","_takeFront","_othersLabel","_othersGrouper","topItems","restItems","restItemsSum","sum","restKeys","others","othersLabel","ordering","kv","_computeOrderedGroups","rest","items","count","takeFront","grouperFunction","MarginMixin","_margin","top","right","bottom","left","margins","X_AXIS_LABEL_CLASS","CUSTOM_BRUSH_HANDLE_CLASS","CoordinateGridMixin","schemeCategory10","_mandatoryAttributes","_parent","_g","_chartBodyG","_x","_origX","_xOriginalDomain","_xAxis","_xUnits","_xAxisPadding","_xAxisPaddingUnit","_xElasticity","_xAxisLabel","_xAxisLabelPadding","_lastXDomain","_y","_yAxis","_yAxisPadding","_yElasticity","_yAxisLabel","_yAxisLabelPadding","_brush","brushX","_gBrush","_brushOn","_parentBrushOn","_round","_ignoreBrushEvents","_renderHorizontalGridLine","_renderVerticalGridLine","_resizing","_unitCount","_zoomScale","_zoomOutRestrict","_zoom","zoom","evt","_onZoom","_nullZoom","_hasBeenMouseZoomable","_ignoreZoomEvents","_rangeChart","_focusChart","_mouseZoomable","_clipPadding","_fOuterRangeBandPadding","_fRangeBandPadding","_useRightYAxis","_useTopXAxis","resizing","rangeChart","focusChart","extent","zoomOutRestrict","svg","href","window","location","split","_getClipPathId","gElement","mouseZoomable","chartBodyG","xScale","rescale","xUnits","xAxis","_createXAxis","elasticX","padding","unit","isOrdinal","useRightYAxis","useTopXAxis","axisTop","axisBottom","bandwidth","scaleBand","_ordinalXDomain","xAxisMin","xAxisMax","xdom","xAxisLength","paddingInner","paddingOuter","_useOuterPadding","scale","_renderVerticalGridLines","axisXG","_xAxisY","axisXLab","axisXLabY","xAxisLabel","gridLineG","insert","ticks","tickValues","tickArguments","lines","linesGEnter","enter","exit","effectiveWidth","labelText","axisRight","axisLeft","elasticY","_min","yAxisMin","_max","yAxisMax","rangeRound","yAxisHeight","_createYAxis","_renderHorizontalGridLinesForAxis","axisClass","rotation","labelXPosition","axisYLab","labelYPosition","axis","position","axisYG","axisPosition","_yAxisX","renderYAxisAt","labelPosition","renderYAxisLabel","yAxisLabel","yScale","yAxis","renderHorizontalGridLines","renderVerticalGridLines","m","effectiveHeight","redrawBrush","doTransition","_brushing","setBrushExtents","createBrushHandlePaths","gBrush","brushHandles","type","merge","resizeHandlePath","brushSelection","invert","extendBrush","rangedFilter","brushIsEmpty","applyBrushSelection","replaceFilter","oldValue","_withoutBrushEvents","scaledSelection","move","fadeDeselectedArea","defs","chartBodyClip","resetSvg","_preprocessData","_generateG","_generateClipPath","_drawChart","_configureMouseZoom","_prepareXAxis","_prepareYAxis","plotData","renderXAxis","renderYAxis","renderBrush","copy","_enableMouseZoom","_disableMouseZoom","scaleExtent","zoomScaleMin","translateExtent","_updateD3zoomTransform","noRaiseEvents","domFilter","_hasRangeSelected","_invokeZoomedListener","origDomain","xt","zoomIdentity","translate","_withoutZoomEvents","transform","_domainToZoomTransform","rescaleX","focus","ext","outerLimits","_checkExtents","_zoomHandler","c","xOriginalDomain","brushOn","d3Box","Number","whiskers","boxWhiskers","quartiles","boxQuartiles","tickFormat","renderDataPoints","dataOpacity","dataWidthPortion","showOutliers","boldOutlier","box","index","quartileData","whiskerIndices","whiskerData","_i","outlierIndices","pointIndices","x1","x0","__chart__","center","_box","medianLine","whisker","outlierClass","outlierSize","outlierX","random","outlier","point","boxTick","whiskerTick","timerFlush","quantile","StackMixin","_stackLayout","stack","_stack","_titles","_hidableStacks","_evadeDomainFilter","layers","_visibility","_prepareValues","v4data","v","col","layer","keys","stackLayout","series","ys","y0","y1","layerIdx","valAccessor","String","allValues","hidden","domainValues","_domainFilter","evadeDomainFilter","xDomain","p","hidableStacks","stackName","_findLayerByName","_flattenStack","yAxisPadding","xAxisPadding","xAxisPaddingUnit","titleAccessor","flat","color","isLegendableHidden","showStack","hideStack","renderGroup","BarChart","_gap","_centerBar","_alwaysUseRounding","_barWidth","_outerRangeBandPadding","_calculateBarWidth","last","size","_renderBars","_renderLabels","_barHeight","layerIndex","labelsEnterUpdate","_labelXPos","_labelYPos","bars","_barXPos","barsEnterUpdate","_makeKeyboardAccessible","numberOfBars","xUnitCount","barPadding","parentBrushOn","centerBar","_rangeBandPadding","gap","alwaysUseRounding","colorFilter","inv","match","defaultWhiskersIQR","q1","q3","iqr","BoxPlot","_whiskerIqrFactor","_whiskersIqr","_whiskers","_tickFormat","_renderDataPoints","_dataOpacity","_dataWidthPortion","_showOutliers","_boldOutlier","_yRangePadding","_boxWidth","innerChartWidth","boxPadding","outerPadding","boxWidth","_calculatedBoxWidth","boxesG","boxesGEnterUpdate","_renderBoxes","_updateBoxes","_removeBoxes","boxesGEnter","_boxTransform","_maxDataValue","_minDataValue","_yAxisRangeRatio","yRangePadding","show","opacity","BubbleChart","_bubbleX","_bubbleY","calculateRadiusDomain","maxBubbleRelativeSize","bubbleG","order","_removeNodes","_renderNodes","_updateNodes","_bubbleLocator","_doRenderLabel","_doRenderTitles","doUpdateLabels","doUpdateTitles","isFinite","BUBBLE_OVERLAY_CLASS","BubbleOverlay","_points","_initOverlayG","_initializeBubbles","_mapData","nodeG","_getNodeG","circle","bubbleNodeClass","_updateBubbles","flag","debugG","debugText","ITEM_CSS_CLASS","CboxMenu","_cbox","_promptText","_multiple","_inputType","_promptValue","_uniqueId","_filterDisplayed","_order","_renderOptions","property","options","_onChange","li","target","checked","nodes","option","onChange","filterAll","promptText","filterDisplayed","multiple","promptValue","CompositeChart","_children","_childOptions","_shareColors","_shareTitle","_alignYAxes","_rightYAxis","_rightYAxisLabel","_rightYAxisLabelPadding","_rightY","_rightAxisGridLines","child","_generateChildG","_leftYAxisChildren","_rightYAxisChildren","ranges","_calculateYAxisRanges","_prepareLeftYAxis","_prepareRightYAxis","rightYAxis","rightYAxisLabel","lyAxisMin","lyAxisMax","ryAxisMin","ryAxisMax","_yAxisMin","_yAxisMax","_rightYAxisMin","_rightYAxisMax","alignYAxes","_alignYAxisRanges","extentRatio","needDomain","rightY","needRange","useRightAxisGridLines","childOptions","subChartArray","prop","_setChildrenProperty","shareColors","shareTitle","_getYAxisMin","_getYAxisMax","_getAllXAxisMinFromChildCharts","_getAllXAxisMaxFromChildCharts","reduce","legendables","legendHighlight","legendReset","DataCount","_formatNumber","_crossfilter","_groupAll","_html","formatter","tot","crossfilter","groupAll","selected","cf","GRID_CSS_CLASS","DataGrid","_section","_size","JSON","stringify","_sortBy","_beginSlice","_endSlice","_htmlSection","_renderItems","_renderSections","sections","_nestEntries","itemSection","section","beginSlice","endSlice","htmlSection","sortByFunction","ROW_CSS_CLASS","DataTable","_columns","_showSections","_renderRows","_doColumnHeaderFnToString","_doColumnHeaderCapitalize","charAt","toUpperCase","i1","i2","lastIndexOf","substring","bAllFunctions","thead","headrow","headcols","_doColumnHeaderFormat","rowSection","rows","rowEnter","_doColumnValueFormat","columns","sortBy","showSections","GeoChoroplethChart","_geoPath","geoPath","_projectionFlag","_projection","_geoJsons","regionG","_geoJson","_getGeoPath","_plotData","_generateLayeredData","_isDataLayer","_renderRegionG","_renderPaths","_renderTitles","_layerSelector","_isSelected","_isDeselected","baseClasses","_getKey","currentFill","selectedRegion","json","projection","geoAlbersUsa","geoJsons","HeatMap","_chartBody","_cols","_rows","_colOrdering","_rowOrdering","_colScale","_rowScale","_xBorderRadius","_yBorderRadius","_colsLabel","_rowsLabel","_xAxisOnClick","_filterAxis","_yAxisOnClick","_boxOnClick","cellsOnAxis","unfilteredCellsOnAxis","filtersList","nonstandardFilter","_filter","isArray","rowOrdering","cols","colOrdering","rowCount","colCount","boxHeight","boxes","gEnter","boxOnClick","gCols","gColsText","xAxisOnClick","colsLabel","gRows","gRowsText","yAxisOnClick","rowsLabel","xBorderRadius","yBorderRadius","HtmlLegend","_htmlLegendDivCssClass","_legendItemCssClassHorizontal","_legendItemCssClassVertical","_container","_legendText","_maxItems","_horizontal","_legendItemClass","_highlightSelected","_defaultLegendItemCssClass","container","legendItemClassName","itemEnter","legendToggle","_makeLegendKeyboardAccessible","legendItemClass","horizontal","legendText","maxItems","Legend","_itemHeight","_legendWidth","_itemWidth","_autoItemWidth","itemHeight","legendWidth","itemWidth","autoItemWidth","self","clientHeight","cumulativeLegendTextWidth","row","getBBox","translateBy","_legendItemHeight","Y_AXIS_REF_LINE_CLASS","X_AXIS_REF_LINE_CLASS","DEFAULT_DOT_OPACITY","LineChart","_renderArea","_dotRadius","_dataPointRadius","_dataPointFillOpacity","_dataPointStrokeOpacity","_curve","_interpolate","_tension","_defined","_dashStyle","_xyTipsOn","chartBody","layersList","layersEnter","_drawLine","_drawArea","_drawDots","_drawLabels","curve","tension","defined","dashStyle","renderArea","linear","curveLinear","linear-closed","curveLinearClosed","step","curveStep","step-before","curveStepBefore","step-after","curveStepAfter","basis","curveBasis","basis-open","curveBasisOpen","basis-closed","curveBasisClosed","bundle","curveBundle","cardinal","curveCardinal","cardinal-open","curveCardinalOpen","cardinal-closed","curveCardinalClosed","monotone","curveMonotoneX","_line","line","_getCurveFactory","_getColor","_safeD","_area","area","xyTipsOn","tooltipListClass","tooltips","points","_createRefLines","dots","dotsEnterModify","_getDotRadius","dot","_showDot","_showRefLines","_hideDot","_hideRefLines","_doRenderTitle","labelsEnterModify","yAxisRefPathD","xAxisRefPathD","dotRadius","fillOpacity","strokeOpacity","dashstyle","item","_colorFilter","lineChart","SPAN_CLASS","NumberDisplay","one","none","_lastValue","_ariaLiveRegion","valObj","_maxBin","sorted","newValue","span","ease","easeQuad","tween","interpStart","interp","interpolateNumber","num","formatNumber","innerHTML","ariaLiveRegion","PieChart","_sliceCssClass","_labelCssClass","_sliceGroupCssClass","_labelGroupCssClass","_emptyCssClass","_emptyTitle","_radius","_givenRadius","_innerRadius","_externalRadiusPadding","_cx","_cy","_minAngleForLabel","_externalLabelRadius","_drawPaths","cappedKeyAccessor","cappedValueAccessor","cap","cx","cy","maxRadius","arcs","_buildArcs","pieLayout","_pieLayout","pieData","slices","_removeElements","_createElements","_updateElements","_highlightFilter","slicesEnter","_createSliceNodes","_createSlicePath","_createTitles","_createLabels","slicePath","_fill","_onClick","_safeArc","tranNodes","attrTween","_tweenPie","_sliceHasNoData","_sliceTooSmall","_isSelectedSlice","_applyLabelText","_labelPosition","whether","labelsEnter","classes","_highlightSlice","_positionLabels","_updateLabelPaths","polyline","arc2","arc","outerRadius","innerRadius","_current","startAngle","endAngle","d2","centroid","_updateSlicePaths","_updateLabels","_updateTitles","slicePaths","externalRadiusPadding","minAngleForLabel","pie","angle","_arc","externalLabelRadius","drawPaths","legendable","_highlightSliceFromLegendable","highlighted","_isOffCanvas","RowChart","_labelOffsetX","_labelOffsetY","_hasLabelOffsetY","_dyOffset","_titleLabelOffsetX","_fixedBarHeight","_rowCssClass","_titleRowCssClass","_renderTitleLabel","_elasticX","_rowData","rowsCap","_extent","axisG","_calculateAxisScale","_drawAxis","_drawGridLines","rect","_isSelectedRow","_rootValue","_translateX","renderTitleLabel","lab","titlelab","fixedBarHeight","labelOffsetX","labelOffsety","titleLabelOffsetX","ScatterPlot","_symbol","symbol","_existenceAccessor","originalKeyAccessor","existenceAccessor","_highlightedSize","_symbolSize","_excludedSize","_excludedColor","_excludedOpacity","_emptySize","_emptyOpacity","_nonemptyOpacity","_emptyColor","_filtered","_canvas","_context","_useCanvas","brush","_elementSize","sqrt","PI","pow","svgSel","svgLeft","parseInt","svgTop","devicePixelRatio","getContext","clip","imageSmoothingQuality","useCanvas","canvasElement","legendHighlightDatum","_resizeCanvas","context","clearRect","canvas","cOpacity","excludedOpacity","cColor","excludedColor","cSize","_canvasElementSize","isHighlighted","fadeOutOpacity","save","globalAlpha","beginPath","fillStyle","fill","restore","symbols","_locator","_plotOnCanvas","_plotOnSVG","_d","customSymbol","symbolSize","highlightedSize","excludedSize","emptySize","emptyColor","emptyOpacity","nonemptyOpacity","_resizeSymbolsWhere","condition","oldSize","coord","ranged2DFilter","OPTION_CSS_CLASS","SelectMenu","_select","_numberVisible","_setAttributes","selectedOptions","prototype","numberVisible","SeriesChart","_keySort","_charts","_chartFunction","_seriesAccessor","_seriesSort","_valueSort","compose","keep","childrenChanged","sub","subChart","_clearChart","_compose","bind","chartFunction","_resetChildren","sortFunction","SunburstChart","_ringSizes","_extendedValueAccessor","ringIndex","customRelativeRadius","ringSizes","relativeRingSizes","scaleFactor","standardRadius","rootOffset","partitionedNodes","cdata","_partitionNodes","shift","sunburstData","depth","_tweenSlice","partitionDy","scaleInnerRadius","scaleOuterRadius","relativeRingSizesFunction","ringCount","_scaleRadius","relativeSizes","numberOfRings","portionsSum","assertPortionsArray","defaultRingSizes","_isPathFiltered","pathFilter","currentFilter","getSortable","_hierarchy","hierarchy","partition","_partition","descendants","_filtersForPath","exactMatch","tweenTarget","assign","TextFilterWidget","_normalize","_filterFunctionFactory","query","_placeHolder","_input","normalize","placeHolder","filterFunctionFactory","version","callHandler","that","nest","mouse","out","groups","_transition","clear","has"],"mappings":"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"}